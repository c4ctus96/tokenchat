{"version":3,"file":"index-ge8fwJ6w.js","sources":["../../src/components/Firebase.tsx","../../src/components/EthProfilePic.tsx","../../src/components/ChatSelector.tsx","../../src/components/UserContext.tsx","../../src/components/ChatBottomBar.tsx","../../src/components/ChatWindow.tsx","../../src/components/Message.tsx","../../src/components/TransactionMessage.tsx","../../src/components/ChatContent.tsx","../../src/components/ChatHeader.tsx","../../src/components/NewChatModal.tsx","../../src/components/SendTransactionModal.tsx","../../src/components/useResponsive.tsx","../../src/components/Chat.tsx","../../src/components/ProceedButton.tsx","../../src/components/WalletMenu.tsx","../../src/components/HomePage.tsx","../../src/components/Signup.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from \"firebase/firestore\";  // Import Firestore\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_APIKEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTHDOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECTID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGEBUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APPID,\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENTID,\n  // .env gitignored\n};\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst firestore = getFirestore(app);  // Initialize Firestore\n\nexport { firebaseConfig, firestore };\n","import React from \"react\";\n\ntype EthProfilePicProps = {\n    eth: string;\n};\n\nconst EthProfilePic: React.FC<EthProfilePicProps> = ({ eth }) => {\n    return (\n        <div>\n            <img src={`https://effigy.im/a/${eth}.svg`} alt=\"Profile picture\" className=\"profilePic\" />\n        </div>\n    );\n};\n\nexport default EthProfilePic;","import React, { useState, useEffect } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, onSnapshot, query, orderBy, limit, getDocs } from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport EthProfilePic from \"./EthProfilePic\";\n\ninterface Chatroom {\n  id: string;\n  pid: string[];\n  lastMessage?: string;\n  lastMessageTime?: Date;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatSelectorProps {\n  setSelectedChatId: (id: string) => void;\n  users: User[];\n  getWalletById: (id: string) => string;\n  selectedChatId?: string | null;\n}\n\nfunction ChatSelector({ setSelectedChatId, users, getWalletById, selectedChatId }: ChatSelectorProps) {\n  const { address } = useAccount();\n  const [chatrooms, setChatrooms] = useState<Chatroom[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!address) return;\n\n    // Set up real-time listener for privateChats collection\n    const privateChatsRef = collection(firestore, \"privateChats\");\n    \n    const unsubscribe = onSnapshot(\n      privateChatsRef,\n      async (snapshot) => {\n        try {\n          const privateChatsData: Chatroom[] = [];\n          \n          // Process each chat document\n          for (const doc of snapshot.docs) {\n            const data = doc.data();\n            const chatroom: Chatroom = {\n              id: doc.id,\n              pid: data.pid || []\n            };\n            \n            // Fetch the latest message for this chat\n            try {\n              const messagesRef = collection(firestore, \"privateChats\", doc.id, \"msg\");\n              const messagesQuery = query(messagesRef, orderBy(\"ts\", \"desc\"), limit(1));\n              const messagesSnapshot = await getDocs(messagesQuery);\n              \n              if (!messagesSnapshot.empty) {\n                const latestMessage = messagesSnapshot.docs[0].data();\n                chatroom.lastMessage = latestMessage.txt || \"\";\n                chatroom.lastMessageTime = latestMessage.ts?.toDate() || new Date();\n              } else {\n                chatroom.lastMessage = \"No messages yet\";\n                chatroom.lastMessageTime = new Date(0); // Use epoch for empty chats\n              }\n            } catch (msgError) {\n              console.error(`Error fetching messages for chat ${doc.id}:`, msgError);\n              chatroom.lastMessage = \"Failed to load\";\n              chatroom.lastMessageTime = new Date(0);\n            }\n            \n            privateChatsData.push(chatroom);\n          }\n          \n          // Sort chats by last message time (most recent first)\n          privateChatsData.sort((a, b) => {\n            const timeA = a.lastMessageTime?.getTime() || 0;\n            const timeB = b.lastMessageTime?.getTime() || 0;\n            return timeB - timeA;\n          });\n          \n          console.log(\"Real-time chatrooms update:\", privateChatsData);\n          setChatrooms(privateChatsData);\n          setError(null);\n        } catch (err) {\n          setError(\"Failed to fetch chat data. Please check your internet connection.\");\n          console.error(\"Snapshot error:\", err);\n        }\n      },\n      (error) => {\n        setError(\"Failed to fetch data. Please check your internet connection.\");\n        console.error(\"Fetch error:\", error);\n      }\n    );\n    \n    // Cleanup subscription on unmount or when address changes\n    return () => unsubscribe();\n  }, [address]);\n\n  // Request notification permission when component mounts\n  useEffect(() => {\n    const requestNotificationPermission = async () => {\n      if (\"Notification\" in window) {\n        if (Notification.permission === \"default\") {\n          const permission = await Notification.requestPermission();\n          console.log(\"Notification permission:\", permission);\n        }\n      }\n    };\n    \n    requestNotificationPermission();\n  }, []);\n\n  // Listen for new messages to show notifications\n  useEffect(() => {\n    if (!address || chatrooms.length === 0) return;\n\n    const currentUser = users.find(user => user.wallet === address);\n    if (!currentUser) return;\n\n    const unsubscribers: (() => void)[] = [];\n\n    // Set up listeners for each chat the user is part of\n    chatrooms.forEach(chatroom => {\n      if (chatroom.pid.includes(currentUser.id)) {\n        const messagesRef = collection(firestore, \"privateChats\", chatroom.id, \"msg\");\n        const messagesQuery = query(messagesRef, orderBy(\"ts\", \"desc\"), limit(1));\n        \n        const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n          if (!snapshot.empty && chatroom.id !== selectedChatId) {\n            const latestMessage = snapshot.docs[0].data();\n            \n            // Check if this is a new message (not from current user)\n            if (latestMessage.from !== currentUser.id) {\n              const senderName = getUserNameById(latestMessage.from);\n              showNotification(senderName, latestMessage.txt);\n            }\n          }\n        });\n        \n        unsubscribers.push(unsubscribe);\n      }\n    });\n\n    // Cleanup all listeners\n    return () => {\n      unsubscribers.forEach(unsubscribe => unsubscribe());\n    };\n  }, [chatrooms, address, users, selectedChatId]);\n\n  // Show notification for new messages\n  const showNotification = (senderName: string, messageText: string) => {\n    if (\"Notification\" in window && Notification.permission === \"granted\") {\n      const truncatedText = messageText.length > 50 \n        ? messageText.substring(0, 50) + \"...\" \n        : messageText;\n      \n      new Notification(`New message from ${senderName}`, {\n        body: truncatedText,\n        icon: \"/favicon.ico\", // You can customize this icon\n        badge: \"/favicon.ico\",\n        tag: \"new-message\", // This prevents multiple notifications from stacking\n      });\n    }\n  };\n\n  // Determine the current user based on wallet address\n  const currentUser = users.find(user => user.wallet === address);\n\n  // Filter chatrooms to only those that the current user participates in\n  const filteredChatrooms = currentUser\n    ? chatrooms.filter(chat => chat.pid.includes(currentUser.id))\n    : [];\n\n  const getUserNameById = (id: string) => {\n    const user = users.find(user => user.id === id);\n    return user ? user.name : id;\n  };\n\n  // For a valid chatroom, return the participant's id that doesn't match the current user\n  const getOtherParticipantId = (pid: string[]) => {\n    return currentUser ? pid.find(id => id !== currentUser.id) || '' : '';\n  };\n\n  const getOtherParticipantName = (pid: string[]) => {\n    const otherParticipantId = getOtherParticipantId(pid);\n    return getUserNameById(otherParticipantId);\n  };\n\n  // Truncate message text for display\n  const truncateMessage = (text: string, maxLength: number = 40) => {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + \"...\";\n  };\n\n  const handleChatClick = (id: string) => {\n    setSelectedChatId(id);\n  };\n\n  return (\n    <div className=\"chatSelector\">\n      {error && <p className=\"error\">{error}</p>}\n      {filteredChatrooms.length > 0 ? (\n        filteredChatrooms.map((chatroom) => (\n          <div\n            className=\"contactBox\"\n            key={chatroom.id}\n            onClick={() => handleChatClick(chatroom.id)}\n            style={{\n              backgroundColor: chatroom.id === selectedChatId ? '#003344' : '#002233',\n              cursor: 'pointer'\n            }}\n          >\n            <EthProfilePic eth={getWalletById(getOtherParticipantId(chatroom.pid))} />\n            <div className=\"contactTextBox\">\n              <h3 style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                {getOtherParticipantName(chatroom.pid)}\n              </h3>\n              <p style={{ \n                margin: 0, \n                fontSize: '14px', \n                color: '#ccc',\n                opacity: 0.8,\n                lineHeight: '1.2'\n              }}>\n                {truncateMessage(chatroom.lastMessage || \"No messages yet\")}\n              </p>\n            </div>\n          </div>\n        ))\n      ) : (\n        <div style={{ padding: '20px', textAlign: 'center', color: '#ccc' }}>\n          <p>No chats yet</p>\n          <p style={{ fontSize: '14px', marginTop: '10px' }}>\n            Click the + button to start a new conversation\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ChatSelector;","import React, { createContext, useState, useContext, ReactNode } from \"react\";\n\nexport interface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface UserContextType {\n  currentUser?: User;\n  setCurrentUser: (user?: User) => void;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n  const [currentUser, setCurrentUser] = useState<User | undefined>(undefined);\n\n  return (\n    <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n  return context;\n};\n","import React from \"react\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport { IoSend, IoCard } from \"react-icons/io5\";\nimport { TransactionData } from \"./SendTransactionModal\";\n\ninterface ChatBottomBarProps {\n  selectedChatId?: string;\n  onSendTransaction?: (recipientUser: { id: string; name: string; wallet: string }) => void;\n  recipientUser?: { id: string; name: string; wallet: string };\n}\n\nconst SendMessage = async (\n  txt: string, \n  from: string, \n  chatId: string, \n  messageType: 'text' | 'transaction' = 'text', \n  transactionData?: TransactionData\n) => {\n  try {\n    const chatMessagesCollectionRef = collection(\n      firestore,\n      \"privateChats\",\n      chatId,\n      \"msg\"\n    );\n    \n    const messageData: any = {\n      txt: txt,\n      from: from,\n      ts: new Date(),\n      type: messageType,\n    };\n\n    // Add transaction data if it's a transaction message\n    if (messageType === 'transaction' && transactionData) {\n      messageData.transactionData = transactionData;\n    }\n\n    await addDoc(chatMessagesCollectionRef, messageData);\n    console.log(\"Message sent successfully\");\n  } catch (error) {\n    console.error(\"Error sending message:\", error);\n    throw error;\n  }\n};\n\nconst ChatBottomBar: React.FC<ChatBottomBarProps> = ({ \n  selectedChatId, \n  onSendTransaction,\n  recipientUser \n}) => {\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const { currentUser } = useUser();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSend = async () => {\n    if (!selectedChatId || !currentUser || !inputValue.trim()) {\n      console.error(\"Missing required data:\", { selectedChatId, currentUser, inputValue });\n      return;\n    }\n\n    try {\n      await SendMessage(inputValue.trim(), currentUser.id, selectedChatId);\n      setInputValue(\"\"); // Clear input after sending\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n      // Optionally show error to user\n    }\n  };\n\n  const handleSendTransaction = () => {\n    if (!recipientUser || !onSendTransaction) {\n      console.error(\"Missing recipient data for transaction\");\n      return;\n    }\n    onSendTransaction(recipientUser);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"chatBottomBar\">\n      <input\n        type=\"text\"\n        className=\"messageInput\"\n        placeholder=\"Type your message...\"\n        value={inputValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      \n      {/* Transaction Button */}\n      <button\n        className=\"transactionButton\"\n        onClick={handleSendTransaction}\n        disabled={!selectedChatId || !currentUser || !recipientUser}\n        title=\"Send crypto\"\n      >\n        <IoCard size={20} />\n      </button>\n\n      {/* Send Message Button */}\n      <button\n        className=\"sendMessageButton\"\n        onClick={handleSend}\n        disabled={!selectedChatId || !currentUser || !inputValue.trim()}\n        title=\"Send message\"\n      >\n        <IoSend size={20} />\n      </button>\n    </div>\n  );\n};\n\n// Helper function to send transaction messages to chat\nexport const SendTransactionMessage = async (\n  transactionData: TransactionData,\n  chatId: string,\n  senderId: string\n) => {\n  try {\n    // Create a descriptive message text\n    const messageText = `Sent ${transactionData.amount} ${getTokenSymbol(transactionData.chainId)} to ${transactionData.recipientName}`;\n    \n    await SendMessage(\n      messageText,\n      senderId,\n      chatId,\n      'transaction',\n      transactionData\n    );\n    \n    console.log(\"Transaction message sent to chat\");\n  } catch (error) {\n    console.error(\"Failed to send transaction message:\", error);\n    throw error;\n  }\n};\n\n// Helper function to get token symbol based on chain\nconst getTokenSymbol = (chainId: number): string => {\n  switch (chainId) {\n    case 1: return 'ETH';\n    case 56: return 'BNB';\n    case 137: return 'MATIC';\n    case 42161: return 'ETH';\n    case 10: return 'ETH';\n    case 8453: return 'ETH';\n    case 43114: return 'AVAX';\n    case 250: return 'FTM';\n    default: return 'ETH';\n  }\n};\n\n// Export both the component and the helper functions for external use\nexport { SendMessage };\nexport default ChatBottomBar;","import React, { ReactNode } from \"react\";\nimport \"../styles.css\";\nimport ChatBottomBar from \"./ChatBottomBar\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatWindowProps {\n  children?: ReactNode;\n  selectedChatId?: string;\n  onSendTransaction?: (recipientUser: User) => void;\n  recipientUser?: User | null;\n}\n\nfunction ChatWindow({ \n  children, \n  selectedChatId, \n  onSendTransaction,\n  recipientUser \n}: ChatWindowProps) {\n  return (\n    <div className=\"chatWindow\">\n      <div className=\"chatContent\">{children}</div>\n      <ChatBottomBar \n        selectedChatId={selectedChatId} \n        onSendTransaction={onSendTransaction}\n        recipientUser={recipientUser || undefined}\n      />\n    </div>\n  );\n}\n\nexport default ChatWindow;","import React from \"react\";\n\ninterface MessageProps {\n  text: string;\n  timeStamp: number; // Expecting timeStamp as a number in milliseconds\n  from: string;\n  own: boolean;\n}\n\nconst Message: React.FC<MessageProps> = ({ text, timeStamp, from, own }) => {\n  return (\n    <div className=\"messageBox\">\n      <div className={`message ${own ? 'own' : ''}`}>\n        <p className=\"message-text\">{text}</p>\n        <p className=\"message-timestamp\">{new Date(timeStamp).toLocaleString()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport { IoSend, IoCheckmark, IoClose, IoTime } from \"react-icons/io5\";\nimport { TransactionData } from \"./SendTransactionModal\";\nimport \"../styles.css\";\n\ninterface TransactionMessageProps {\n  transaction: TransactionData;\n  own: boolean;\n  timeStamp: number;\n}\n\nconst TransactionMessage: React.FC<TransactionMessageProps> = ({ \n  transaction, \n  own, \n  timeStamp \n}) => {\n  // Get network name and symbol\n  const getNetworkInfo = (chainId: number) => {\n    switch (chainId) {\n      case 1: return { \n        name: 'Ethereum', \n        symbol: 'ETH', \n        color: '#627EEA',\n        explorerUrl: 'https://etherscan.io'\n      };\n      case 56: return { \n        name: 'BSC', \n        symbol: 'BNB', \n        color: '#F3BA2F',\n        explorerUrl: 'https://bscscan.com'\n      };\n      case 137: return { \n        name: 'Polygon', \n        symbol: 'MATIC', \n        color: '#8247E5',\n        explorerUrl: 'https://polygonscan.com'\n      };\n      case 42161: return { \n        name: 'Arbitrum', \n        symbol: 'ETH', \n        color: '#28A0F0',\n        explorerUrl: 'https://arbiscan.io'\n      };\n      case 10: return { \n        name: 'Optimism', \n        symbol: 'ETH', \n        color: '#FF0420',\n        explorerUrl: 'https://optimistic.etherscan.io'\n      };\n      case 8453: return { \n        name: 'Base', \n        symbol: 'ETH', \n        color: '#0052FF',\n        explorerUrl: 'https://basescan.org'\n      };\n      case 43114: return { \n        name: 'Avalanche', \n        symbol: 'AVAX', \n        color: '#E84142',\n        explorerUrl: 'https://snowtrace.io'\n      };\n      case 250: return { \n        name: 'Fantom', \n        symbol: 'FTM', \n        color: '#1969FF',\n        explorerUrl: 'https://ftmscan.com'\n      };\n      default: return { \n        name: 'Unknown', \n        symbol: 'ETH', \n        color: '#666',\n        explorerUrl: null\n      };\n    }\n  };\n\n  const networkInfo = getNetworkInfo(transaction.chainId);\n\n  // Status icon and text\n  const getStatusInfo = () => {\n    switch (transaction.status) {\n      case 'pending':\n        return {\n          icon: <IoTime size={16} />,\n          text: 'Pending',\n          className: 'pending'\n        };\n      case 'confirmed':\n        return {\n          icon: <IoCheckmark size={16} />,\n          text: 'Confirmed',\n          className: 'confirmed'\n        };\n      case 'failed':\n        return {\n          icon: <IoClose size={16} />,\n          text: 'Failed',\n          className: 'failed'\n        };\n      default:\n        return {\n          icon: <IoTime size={16} />,\n          text: 'Unknown',\n          className: 'unknown'\n        };\n    }\n  };\n\n  const statusInfo = getStatusInfo();\n\n  // Format amount for display\n  const formatAmount = (amount: string) => {\n    const num = parseFloat(amount);\n    if (num < 0.0001) return num.toExponential(2);\n    if (num < 1) return num.toFixed(6);\n    if (num < 1000) return num.toFixed(4);\n    return num.toFixed(2);\n  };\n\n  // Create block explorer URL\n  const getExplorerUrl = () => {\n    if (!networkInfo.explorerUrl) return null;\n    return `${networkInfo.explorerUrl}/tx/${transaction.hash}`;\n  };\n\n  const explorerUrl = getExplorerUrl();\n\n  return (\n    <div className=\"messageBox\">\n      <div className={`message transaction-message ${own ? 'own' : ''}`}>\n        {/* Transaction Header */}\n        <div className=\"transaction-header\">\n          <div className=\"transaction-icon\">\n            <IoSend size={20} />\n          </div>\n          <div className=\"transaction-title\">\n            <span>\n              {own ? `Sent to ${transaction.recipientName}` : `Received from ${transaction.senderName}`}\n            </span>\n          </div>\n          <div className={`transaction-status ${statusInfo.className}`}>\n            {statusInfo.icon}\n            <span>{statusInfo.text}</span>\n          </div>\n        </div>\n\n        {/* Transaction Amount */}\n        <div className=\"transaction-amount\">\n          <span className=\"amount\">\n            {own ? '-' : '+'}{formatAmount(transaction.amount)}\n          </span>\n          <span className=\"currency\">{networkInfo.symbol}</span>\n        </div>\n\n        {/* Network Badge */}\n        <div className=\"transaction-network\">\n          <div \n            className=\"network-badge\"\n            style={{ backgroundColor: networkInfo.color }}\n          >\n            {networkInfo.name}\n          </div>\n        </div>\n\n        {/* Transaction Details */}\n        <div className=\"transaction-details\">\n          <div className=\"detail-row\">\n            <span className=\"label\">Hash:</span>\n            <span className=\"value hash\">\n              {transaction.hash.slice(0, 8)}...{transaction.hash.slice(-6)}\n            </span>\n          </div>\n          \n          {explorerUrl && (\n            <div className=\"transaction-explorer\">\n              <a \n                href={explorerUrl} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"explorer-link\"\n              >\n                View on Explorer →\n              </a>\n            </div>\n          )}\n        </div>\n\n        {/* Timestamp */}\n        <div className=\"message-timestamp\">\n          {new Date(timeStamp).toLocaleString()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionMessage;","import React, { useState, useEffect, useRef } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, query, orderBy, onSnapshot, Timestamp } from \"firebase/firestore\";\nimport Message from \"./Message\";\nimport TransactionMessage from \"./TransactionMessage\";\nimport { useAccount } from \"wagmi\";\nimport { useUser } from \"./UserContext\";\nimport { TransactionData } from \"./SendTransactionModal\";\n\ninterface ChatMessage {\n  txt: string;\n  ts: Timestamp;\n  from: string;\n  type?: 'text' | 'transaction';\n  transactionData?: TransactionData;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatContentProps {\n  selectedChatId: string;\n  users: User[];\n  getWalletById: (id: string) => string;\n  onSendTransaction?: (recipientUser: User) => void;\n  recipientUser?: User | null;\n}\n\nfunction ChatContent({ \n  selectedChatId, \n  users, \n  getWalletById, \n  onSendTransaction,\n  recipientUser \n}: ChatContentProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const { address } = useAccount();\n  const { currentUser } = useUser();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to bottom function\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Scroll whenever messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!selectedChatId) return;\n\n    // Create a query with ordering\n    const messagesRef = collection(firestore, \"privateChats\", selectedChatId, \"msg\");\n    const messagesQuery = query(messagesRef, orderBy(\"ts\", \"asc\"));\n\n    // Set up real-time listener\n    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n      const fetchedMessages: ChatMessage[] = [];\n      snapshot.forEach((doc) => {\n        const messageData = doc.data() as ChatMessage;\n        if (messageData.txt && messageData.ts && messageData.from) {\n          fetchedMessages.push(messageData);\n        } else {\n          console.log(\"Missing fields in document:\", doc.id);\n        }\n      });\n      console.log(\"Real-time Messages Update:\", fetchedMessages);\n      setMessages(fetchedMessages);\n    }, (error) => {\n      console.error(\"Error fetching messages:\", error);\n    });\n\n    // Cleanup subscription on unmount or when selectedChatId changes\n    return () => unsubscribe();\n  }, [selectedChatId]);\n\n  return (\n    <div className=\"chatContent\">\n      {messages.map((message, index) => {\n        const isOwnMessage = currentUser?.id ? message.from === currentUser.id : false;\n        \n        // Render transaction messages differently\n        if (message.type === 'transaction' && message.transactionData) {\n          return (\n            <TransactionMessage\n              key={index}\n              transaction={message.transactionData}\n              own={isOwnMessage}\n              timeStamp={message.ts.toMillis()}\n            />\n          );\n        }\n\n        // Render regular text messages\n        return (\n          <Message\n            key={index}\n            text={message.txt}\n            timeStamp={message.ts.toMillis()}\n            from={message.from}\n            own={isOwnMessage}\n          />\n        );\n      })}\n      <div ref={messagesEndRef} /> {/* Invisible element to scroll to */}\n    </div>\n  );\n}\n\nexport default ChatContent;","import React from \"react\";\nimport { useAccount } from \"wagmi\";\nimport { IoArrowBack } from \"react-icons/io5\";\nimport EthProfilePic from \"./EthProfilePic\";\nimport \"../styles.css\";\n\ninterface ChatHeaderProps {\n  chatName: string;\n  onBack: () => void;\n  showBackButton: boolean;\n  showProfilePic?: boolean;\n}\n\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  chatName, \n  onBack, \n  showBackButton,\n  showProfilePic = false \n}) => {\n  const { address } = useAccount();\n\n  return (\n    <div className=\"chat-header\">\n      <div className=\"chat-header-left\">\n        {showBackButton && (\n          <button \n            className=\"back-button\"\n            onClick={onBack}\n            title=\"Go back\"\n          >\n            <IoArrowBack size={24} />\n          </button>\n        )}\n        <div className=\"chat-header-info\">\n          <h2 className=\"chat-header-title\">{chatName}</h2>\n        </div>\n      </div>\n      \n      <div className=\"chat-header-right\">\n        {(showProfilePic || !showBackButton) && address && (\n          <div className=\"header-profile-pic\">\n            <EthProfilePic eth={address} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatHeader;","import React, { useState, useEffect } from \"react\";\nimport { SlClose, SlPlus } from \"react-icons/sl\";\nimport { collection, getDocs, addDoc, doc, updateDoc, arrayUnion, query, where } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport EthProfilePic from \"./EthProfilePic\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n  chats?: string[];\n}\n\ninterface NewChatModalProps {\n  onClose: () => void;\n  onChatCreated?: (chatId: string) => void; // Optional callback when chat is created\n}\n\nconst NewChatModal: React.FC<NewChatModalProps> = ({ onClose, onChatCreated }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [creatingChat, setCreatingChat] = useState<string | null>(null); // Track which user we're creating chat with\n  const [error, setError] = useState<string | null>(null);\n  const { currentUser } = useUser();\n\n  // Fetch all users except the current user\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        setLoading(true);\n        const usersRef = collection(firestore, \"users\");\n        const usersSnapshot = await getDocs(usersRef);\n        \n        const allUsers = usersSnapshot.docs.map(doc => ({\n          id: doc.id,\n          name: doc.data().name,\n          wallet: doc.data().wallet,\n          chats: doc.data().chats || []\n        }));\n\n        // Filter out the current user\n        const filteredUsers = currentUser \n          ? allUsers.filter(user => user.id !== currentUser.id)\n          : allUsers;\n\n        setUsers(filteredUsers);\n      } catch (err) {\n        console.error(\"Error fetching users:\", err);\n        setError(\"Failed to load users. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, [currentUser]);\n\n  // Check if a chat already exists between current user and target user\n  const checkExistingChat = async (targetUserId: string): Promise<string | null> => {\n    if (!currentUser) return null;\n\n    try {\n      const privateChatsRef = collection(firestore, \"privateChats\");\n      const q = query(privateChatsRef);\n      const snapshot = await getDocs(q);\n\n      // Look for existing chat with both users\n      for (const doc of snapshot.docs) {\n        const chatData = doc.data();\n        const participants = chatData.pid || [];\n        \n        if (participants.includes(currentUser.id) && participants.includes(targetUserId)) {\n          return doc.id; // Return existing chat ID\n        }\n      }\n      \n      return null; // No existing chat found\n    } catch (err) {\n      console.error(\"Error checking existing chat:\", err);\n      return null;\n    }\n  };\n\n  // Create a new chat between current user and target user\n  const createChat = async (targetUser: User) => {\n    if (!currentUser) {\n      setError(\"You must be logged in to create a chat\");\n      return;\n    }\n\n    setCreatingChat(targetUser.id);\n    setError(null);\n\n    try {\n      // Check if chat already exists\n      const existingChatId = await checkExistingChat(targetUser.id);\n      if (existingChatId) {\n        console.log(\"Chat already exists:\", existingChatId);\n        if (onChatCreated) {\n          onChatCreated(existingChatId);\n        }\n        onClose();\n        return;\n      }\n\n      // Create new chat in privateChats collection\n      const privateChatsRef = collection(firestore, \"privateChats\");\n      const newChatDoc = await addDoc(privateChatsRef, {\n        pid: [currentUser.id, targetUser.id],\n        createdAt: new Date(),\n        lastActivity: new Date()\n      });\n\n      console.log(\"Created new chat with ID:\", newChatDoc.id);\n\n      // Update both users' chats arrays\n      const currentUserRef = doc(firestore, \"users\", currentUser.id);\n      const targetUserRef = doc(firestore, \"users\", targetUser.id);\n\n      await Promise.all([\n        updateDoc(currentUserRef, {\n          chats: arrayUnion(newChatDoc.id)\n        }),\n        updateDoc(targetUserRef, {\n          chats: arrayUnion(newChatDoc.id)\n        })\n      ]);\n\n      console.log(\"Updated users' chat lists\");\n\n      // Call callback if provided\n      if (onChatCreated) {\n        onChatCreated(newChatDoc.id);\n      }\n\n      // Close modal\n      onClose();\n\n    } catch (err) {\n      console.error(\"Error creating chat:\", err);\n      setError(\"Failed to create chat. Please try again.\");\n    } finally {\n      setCreatingChat(null);\n    }\n  };\n\n  return (\n    <div className=\"modalOverlay\">\n      <div className=\"modalContent\">\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>\n          <h2>Start New Chat</h2>\n          <button \n            className=\"closeButton\" \n            onClick={onClose}\n            style={{\n              background: 'transparent',\n              border: 'none',\n              color: '#fff',\n              cursor: 'pointer',\n              padding: '5px'\n            }}\n          >\n            <SlClose size={20} />\n          </button>\n        </div>\n\n        {error && (\n          <div style={{ \n            color: '#ff4444', \n            marginBottom: '15px', \n            padding: '10px', \n            background: 'rgba(255, 68, 68, 0.1)',\n            borderRadius: '8px'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {loading ? (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <p>Loading users...</p>\n          </div>\n        ) : users.length === 0 ? (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <p>No other users found.</p>\n          </div>\n        ) : (\n          <div style={{ \n            maxHeight: '60vh', \n            overflowY: 'auto',\n            scrollbarWidth: 'thin',\n            scrollbarColor: 'rgba(255, 255, 255, 0.2) transparent',\n            paddingRight: '8px'\n          }}\n          className=\"modal-scroll-area\"\n          >\n            <p style={{ marginBottom: '15px', color: '#ccc' }}>\n              Select a user to start chatting:\n            </p>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n              {users.map((user) => (\n                <div\n                  key={user.id}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    padding: '12px',\n                    background: 'rgba(255, 255, 255, 0.05)',\n                    borderRadius: '8px',\n                    border: '1px solid rgba(255, 255, 255, 0.1)'\n                  }}\n                >\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n                    <EthProfilePic eth={user.wallet} />\n                    <div>\n                      <h4 style={{ margin: 0, fontSize: '16px' }}>{user.name}</h4>\n                      <p style={{ \n                        margin: 0, \n                        fontSize: '12px', \n                        color: '#ccc',\n                        fontFamily: 'monospace'\n                      }}>\n                        {user.wallet.slice(0, 6)}...{user.wallet.slice(-4)}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <button\n                    onClick={() => createChat(user)}\n                    disabled={creatingChat === user.id}\n                    style={{\n                      background: creatingChat === user.id ? '#666' : '#50b458',\n                      border: 'none',\n                      borderRadius: '50%',\n                      width: '40px',\n                      height: '40px',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      cursor: creatingChat === user.id ? 'not-allowed' : 'pointer',\n                      color: '#fff',\n                      transition: 'all 0.2s ease'\n                    }}\n                    onMouseEnter={(e) => {\n                      if (creatingChat !== user.id) {\n                        (e.target as HTMLButtonElement).style.background = '#5bc464';\n                        (e.target as HTMLButtonElement).style.transform = 'scale(1.05)';\n                      }\n                    }}\n                    onMouseLeave={(e) => {\n                      if (creatingChat !== user.id) {\n                        (e.target as HTMLButtonElement).style.background = '#50b458';\n                        (e.target as HTMLButtonElement).style.transform = 'scale(1)';\n                      }\n                    }}\n                  >\n                    {creatingChat === user.id ? (\n                      <div style={{ \n                        width: '16px', \n                        height: '16px', \n                        border: '2px solid #fff',\n                        borderTop: '2px solid transparent',\n                        borderRadius: '50%',\n                        animation: 'spin 1s linear infinite'\n                      }} />\n                    ) : (\n                      <SlPlus size={18} />\n                    )}\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        <style>{`\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar {\n            width: 6px;\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar-track {\n            background: transparent;\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar-thumb {\n            background-color: rgba(255, 255, 255, 0.2);\n            border-radius: 3px;\n          }\n        `}</style>\n      </div>\n    </div>\n  );\n};\n\nexport default NewChatModal;","import React, { useState, useEffect } from \"react\";\nimport { SlClose } from \"react-icons/sl\";\nimport { IoSend } from \"react-icons/io5\";\nimport { useAccount, useBalance, useSendTransaction, useWaitForTransactionReceipt, useChainId, useSwitchChain } from \"wagmi\";\nimport { parseEther, formatEther, isAddress } from \"viem\";\nimport { useUser } from \"./UserContext\";\nimport EthProfilePic from \"./EthProfilePic\";\nimport \"../styles.css\";\n\ninterface SendTransactionModalProps {\n  onClose: () => void;\n  recipientUser?: {\n    id: string;\n    name: string;\n    wallet: string;\n  };\n  onTransactionSent?: (transactionData: TransactionData) => void;\n}\n\nexport interface TransactionData {\n  hash: string;\n  to: string;\n  amount: string;\n  chainId: number;\n  timestamp: Date;\n  from: string;\n  recipientName: string;\n  senderName: string;\n  status: 'pending' | 'confirmed' | 'failed';\n}\n\nconst SendTransactionModal: React.FC<SendTransactionModalProps> = ({ \n  onClose, \n  recipientUser,\n  onTransactionSent \n}) => {\n  const { address } = useAccount();\n  const { currentUser } = useUser();\n  const chainId = useChainId();\n  const { switchChain } = useSwitchChain();\n  \n  // Transaction form state\n  const [amount, setAmount] = useState(\"\");\n  const [recipientAddress, setRecipientAddress] = useState(recipientUser?.wallet || \"\");\n  const [message, setMessage] = useState(\"\");\n  const [step, setStep] = useState<'form' | 'confirming' | 'pending' | 'success' | 'error'>('form');\n  const [error, setError] = useState<string | null>(null);\n\n  // Get user's balance for current chain\n  const { data: balance, isLoading: balanceLoading, error: balanceError } = useBalance({\n    address: address,\n    chainId: chainId,\n  });\n\n  // Transaction hooks\n  const { \n    sendTransaction, \n    data: hash, \n    error: sendError, \n    isPending: isSending,\n    reset: resetSendTransaction\n  } = useSendTransaction();\n\n  const { \n    isLoading: isConfirming, \n    isSuccess: isConfirmed,\n    isError: isConfirmError,\n    error: confirmError\n  } = useWaitForTransactionReceipt({\n    hash,\n  });\n\n  // Reset transaction state when modal opens\n  useEffect(() => {\n    resetSendTransaction();\n    setStep('form');\n    setError(null);\n  }, [resetSendTransaction]);\n\n  // Handle transaction lifecycle\n  useEffect(() => {\n    if (isSending) {\n      setStep('confirming');\n      setError(null);\n    }\n  }, [isSending]);\n\n  useEffect(() => {\n    if (hash && !isConfirming && !isConfirmed && !isConfirmError) {\n      setStep('pending');\n    }\n  }, [hash, isConfirming, isConfirmed, isConfirmError]);\n\n  useEffect(() => {\n    if (isConfirmed && hash) {\n      setStep('success');\n      \n      // Create transaction data for chat integration\n      const transactionData: TransactionData = {\n        hash,\n        to: recipientAddress,\n        amount,\n        chainId,\n        timestamp: new Date(),\n        from: address!,\n        recipientName: recipientUser?.name || 'Unknown',\n        senderName: currentUser?.name || 'You',\n        status: 'confirmed'\n      };\n\n      if (onTransactionSent) {\n        onTransactionSent(transactionData);\n      }\n\n      // Auto-close after success\n      setTimeout(() => {\n        onClose();\n      }, 3000);\n    }\n  }, [isConfirmed, hash, recipientAddress, amount, chainId, address, recipientUser, currentUser, onTransactionSent, onClose]);\n\n  useEffect(() => {\n    if (sendError || isConfirmError) {\n      setStep('error');\n      const errorMessage = sendError?.message || confirmError?.message || 'Transaction failed';\n      \n      // Parse common error messages\n      if (errorMessage.includes('insufficient funds')) {\n        setError('Insufficient funds for this transaction');\n      } else if (errorMessage.includes('user rejected')) {\n        setError('Transaction was cancelled');\n      } else if (errorMessage.includes('gas')) {\n        setError('Transaction failed due to gas issues');\n      } else {\n        setError(errorMessage);\n      }\n    }\n  }, [sendError, isConfirmError, confirmError]);\n\n  // Network information\n  const getNetworkInfo = (chainId: number) => {\n    switch (chainId) {\n      case 1: return { \n        name: 'Ethereum Mainnet', \n        symbol: 'ETH', \n        color: '#627EEA',\n        explorerUrl: 'https://etherscan.io'\n      };\n      case 56: return { \n        name: 'BNB Smart Chain', \n        symbol: 'BNB', \n        color: '#F3BA2F',\n        explorerUrl: 'https://bscscan.com'\n      };\n      case 137: return { \n        name: 'Polygon', \n        symbol: 'MATIC', \n        color: '#8247E5',\n        explorerUrl: 'https://polygonscan.com'\n      };\n      case 42161: return { \n        name: 'Arbitrum One', \n        symbol: 'ETH', \n        color: '#28A0F0',\n        explorerUrl: 'https://arbiscan.io'\n      };\n      case 10: return { \n        name: 'Optimism', \n        symbol: 'ETH', \n        color: '#FF0420',\n        explorerUrl: 'https://optimistic.etherscan.io'\n      };\n      case 8453: return { \n        name: 'Base', \n        symbol: 'ETH', \n        color: '#0052FF',\n        explorerUrl: 'https://basescan.org'\n      };\n      case 43114: return { \n        name: 'Avalanche C-Chain', \n        symbol: 'AVAX', \n        color: '#E84142',\n        explorerUrl: 'https://snowtrace.io'\n      };\n      case 250: return { \n        name: 'Fantom Opera', \n        symbol: 'FTM', \n        color: '#1969FF',\n        explorerUrl: 'https://ftmscan.com'\n      };\n      default: return { \n        name: `Chain ${chainId}`, \n        symbol: 'ETH', \n        color: '#666',\n        explorerUrl: null\n      };\n    }\n  };\n\n  const networkInfo = getNetworkInfo(chainId);\n\n  // Validation\n  const isValidAmount = () => {\n    try {\n      const parsedAmount = parseFloat(amount);\n      if (parsedAmount <= 0) return false;\n      if (!balance) return false;\n      return parsedAmount <= parseFloat(balance.formatted);\n    } catch {\n      return false;\n    }\n  };\n\n  const isValidAddress = () => {\n    return isAddress(recipientAddress);\n  };\n\n  const canSubmit = () => {\n    return isValidAmount() && isValidAddress() && !isSending && !balanceLoading;\n  };\n\n  // Handle form submission\n  const handleSend = async () => {\n    if (!canSubmit()) return;\n\n    try {\n      setError(null);\n      sendTransaction({\n        to: recipientAddress as `0x${string}`,\n        value: parseEther(amount),\n      });\n    } catch (err) {\n      console.error('Transaction error:', err);\n      setError('Failed to send transaction');\n      setStep('error');\n    }\n  };\n\n  // Quick amount buttons\n  const quickAmounts = ['0.001', '0.01', '0.1'];\n\n  const handleQuickAmount = (quickAmount: string) => {\n    setAmount(quickAmount);\n  };\n\n  // Handle max amount\n  const handleMaxAmount = () => {\n    if (balance) {\n      // Leave some gas for the transaction (approximate)\n      const maxAmount = Math.max(0, parseFloat(balance.formatted) - 0.001);\n      setAmount(maxAmount.toString());\n    }\n  };\n\n  // Create block explorer URL\n  const getExplorerUrl = () => {\n    if (!hash || !networkInfo.explorerUrl) return null;\n    return `${networkInfo.explorerUrl}/tx/${hash}`;\n  };\n\n  // Handle close with confirmation if transaction is in progress\n  const handleClose = () => {\n    if (step === 'confirming' || step === 'pending') {\n      const shouldClose = window.confirm(\n        'Transaction is in progress. Are you sure you want to close this window? You can check the transaction status in your wallet.'\n      );\n      if (!shouldClose) return;\n    }\n    onClose();\n  };\n\n  // Render different steps\n  const renderContent = () => {\n    switch (step) {\n      case 'form':\n        return (\n          <>\n            <div className=\"transaction-form\">\n              {/* Recipient Info */}\n              {recipientUser && (\n                <div className=\"recipient-info\">\n                  <EthProfilePic eth={recipientUser.wallet} />\n                  <div className=\"recipient-details\">\n                    <h4>{recipientUser.name}</h4>\n                    <p className=\"recipient-address\">\n                      {recipientUser.wallet.slice(0, 6)}...{recipientUser.wallet.slice(-4)}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* Balance Error */}\n              {balanceError && (\n                <div className=\"error-message\">\n                  Failed to load balance. Please check your network connection.\n                </div>\n              )}\n\n              {/* Amount Input */}\n              <div className=\"form-group\">\n                <label>Amount ({networkInfo.symbol})</label>\n                <div className=\"amount-input-group\">\n                  <input\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"0.0\"\n                    step=\"0.0001\"\n                    min=\"0\"\n                    max={balance?.formatted || '0'}\n                    className={amount && !isValidAmount() ? 'error' : ''}\n                  />\n                  <div className=\"quick-amounts\">\n                    {quickAmounts.map((quickAmount) => (\n                      <button\n                        key={quickAmount}\n                        type=\"button\"\n                        className=\"quick-amount-btn\"\n                        onClick={() => handleQuickAmount(quickAmount)}\n                      >\n                        {quickAmount}\n                      </button>\n                    ))}\n                    <button\n                      type=\"button\"\n                      className=\"quick-amount-btn\"\n                      onClick={handleMaxAmount}\n                      disabled={!balance}\n                    >\n                      Max\n                    </button>\n                  </div>\n                </div>\n                <div className=\"balance-info\">\n                  {balanceLoading ? (\n                    <span>Loading balance...</span>\n                  ) : balance ? (\n                    <span>\n                      Balance: {parseFloat(balance.formatted).toFixed(6)} {balance.symbol}\n                    </span>\n                  ) : (\n                    <span>Balance unavailable</span>\n                  )}\n                </div>\n                {amount && !isValidAmount() && (\n                  <span className=\"error-text\">\n                    {parseFloat(amount) <= 0 ? 'Amount must be greater than 0' : 'Insufficient balance'}\n                  </span>\n                )}\n              </div>\n\n              {/* Recipient Address (if not pre-filled) */}\n              {!recipientUser && (\n                <div className=\"form-group\">\n                  <label>Recipient Address</label>\n                  <input\n                    type=\"text\"\n                    value={recipientAddress}\n                    onChange={(e) => setRecipientAddress(e.target.value)}\n                    placeholder=\"0x...\"\n                    className={!isValidAddress() && recipientAddress ? 'error' : ''}\n                  />\n                  {recipientAddress && !isValidAddress() && (\n                    <span className=\"error-text\">Invalid address</span>\n                  )}\n                </div>\n              )}\n\n              {/* Message (optional) */}\n              <div className=\"form-group\">\n                <label>Message (optional)</label>\n                <textarea\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  placeholder=\"What's this for?\"\n                  maxLength={200}\n                  rows={3}\n                />\n              </div>\n\n              {/* Network Info */}\n              <div className=\"network-info\">\n                <span>Sending on {networkInfo.name}</span>\n              </div>\n            </div>\n\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={handleClose}>\n                Cancel\n              </button>\n              <button \n                className=\"send-btn\"\n                onClick={handleSend}\n                disabled={!canSubmit()}\n              >\n                <IoSend size={18} />\n                Send {amount || '0'} {networkInfo.symbol}\n              </button>\n            </div>\n          </>\n        );\n\n      case 'confirming':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon confirming\">\n              <div className=\"spinner\" />\n            </div>\n            <h3>Confirm in Wallet</h3>\n            <p>Please confirm the transaction in your wallet to continue.</p>\n            <p>Network: {networkInfo.name}</p>\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={handleClose}>\n                Cancel\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'pending':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon pending\">\n              <div className=\"spinner\" />\n            </div>\n            <h3>Transaction Pending</h3>\n            <p>Your transaction is being processed on {networkInfo.name}.</p>\n            {hash && (\n              <div className=\"transaction-hash\">\n                <p>Transaction Hash:</p>\n                <code>{hash.slice(0, 10)}...{hash.slice(-8)}</code>\n              </div>\n            )}\n            {getExplorerUrl() && (\n              <div className=\"transaction-explorer\">\n                <a \n                  href={getExplorerUrl()!} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"explorer-link\"\n                >\n                  View on {networkInfo.name} Explorer →\n                </a>\n              </div>\n            )}\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={handleClose}>\n                Close\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'success':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon success\">\n              ✓\n            </div>\n            <h3>Transaction Sent!</h3>\n            <p>\n              Successfully sent {amount} {networkInfo.symbol} to {recipientUser?.name || 'recipient'}\n            </p>\n            {hash && (\n              <div className=\"transaction-hash\">\n                <p>Transaction Hash:</p>\n                <code>{hash.slice(0, 10)}...{hash.slice(-8)}</code>\n              </div>\n            )}\n            {getExplorerUrl() && (\n              <div className=\"transaction-explorer\">\n                <a \n                  href={getExplorerUrl()!} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"explorer-link\"\n                >\n                  View on {networkInfo.name} Explorer →\n                </a>\n              </div>\n            )}\n            <p className=\"auto-close\">This window will close automatically...</p>\n          </div>\n        );\n\n      case 'error':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon error\">\n              ✕\n            </div>\n            <h3>Transaction Failed</h3>\n            <div className=\"error-message\">{error}</div>\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={onClose}>\n                Close\n              </button>\n              <button className=\"retry-btn\" onClick={() => {\n                setStep('form');\n                setError(null);\n                resetSendTransaction();\n              }}>\n                Try Again\n              </button>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"modalOverlay\">\n      <div className=\"modalContent transaction-modal\">\n        <div className=\"modal-header\">\n          <h2>Send {networkInfo.symbol}</h2>\n          {(step === 'form' || step === 'error') && (\n            <button \n              className=\"closeButton\" \n              onClick={handleClose}\n            >\n              <SlClose size={20} />\n            </button>\n          )}\n        </div>\n\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default SendTransactionModal;","import { useState, useEffect } from 'react';\n\ninterface ResponsiveState {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  windowSize: { width: number; height: number };\n}\n\nexport const useResponsive = (): ResponsiveState => {\n  const [windowSize, setWindowSize] = useState({\n    width: typeof window !== 'undefined' ? window.innerWidth : 0,\n    height: typeof window !== 'undefined' ? window.innerHeight : 0,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const isMobile = windowSize.width <= 768;\n  const isTablet = windowSize.width > 768 && windowSize.width <= 1024;\n  const isDesktop = windowSize.width > 1024;\n\n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    windowSize,\n  };\n};","import React, { useState, useEffect } from \"react\";\nimport { useAccount } from \"wagmi\";\nimport \"../styles.css\";\nimport ChatSelector from \"./ChatSelector\";\nimport ChatWindow from \"./ChatWindow\";\nimport ChatContent from \"./ChatContent\";\nimport ChatHeader from \"./ChatHeader\";\nimport { collection, getDocs, doc, getDoc } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport NewChatModal from \"./NewChatModal\";\nimport SendTransactionModal, { TransactionData } from \"./SendTransactionModal\";\nimport { SendTransactionMessage } from \"./ChatBottomBar\";\nimport { LuMessageCirclePlus } from \"react-icons/lu\";\nimport { IoArrowBack } from \"react-icons/io5\";\nimport { useResponsive } from \"./useResponsive\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatData {\n  pid: string[];\n  createdAt?: any;\n  lastActivity?: any;\n}\n\nfunction Chat() {\n  const { address } = useAccount();\n  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const { setCurrentUser, currentUser } = useUser();\n  const [showNewChatModal, setShowNewChatModal] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [transactionRecipient, setTransactionRecipient] = useState<User | null>(null);\n  const [currentChatData, setCurrentChatData] = useState<ChatData | null>(null);\n  const { isMobile } = useResponsive();\n  \n  // Mobile-specific state for view management\n  const [mobileView, setMobileView] = useState<'list' | 'chat'>('list');\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const usersRef = collection(firestore, \"users\");\n        const usersSnapshot = await getDocs(usersRef);\n        const usersData = usersSnapshot.docs.map((doc) => ({\n          id: doc.id,\n          name: doc.data().name,\n          wallet: doc.data().wallet,\n        }));\n        setUsers(usersData);\n        console.log(\"Fetched users:\", usersData);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n      }\n    };\n    fetchUsers();\n  }, []);\n\n  // Fetch chat data when selectedChatId changes\n  useEffect(() => {\n    const fetchChatData = async () => {\n      if (!selectedChatId) {\n        setCurrentChatData(null);\n        return;\n      }\n\n      try {\n        const chatDoc = await getDoc(doc(firestore, \"privateChats\", selectedChatId));\n        if (chatDoc.exists()) {\n          const chatData = chatDoc.data() as ChatData;\n          setCurrentChatData(chatData);\n          console.log(\"Fetched chat data:\", chatData);\n        } else {\n          console.error(\"Chat document not found:\", selectedChatId);\n          setCurrentChatData(null);\n        }\n      } catch (error) {\n        console.error(\"Error fetching chat data:\", error);\n        setCurrentChatData(null);\n      }\n    };\n\n    fetchChatData();\n  }, [selectedChatId]);\n\n  // Update currentUser in context whenever users or address changes\n  useEffect(() => {\n    if (users.length > 0 && address) {\n      const foundCurrentUser = users.find(user => user.wallet === address);\n      console.log(\"Current User:\", foundCurrentUser);\n      setCurrentUser(foundCurrentUser);\n    }\n  }, [users, address, setCurrentUser]);\n\n  // Handler for selecting a chat room\n  const handleChatSelect = (chatId: string) => {\n    setSelectedChatId(chatId);\n    // On mobile, switch to chat view when a chat is selected\n    if (isMobile) {\n      setMobileView('chat');\n    }\n  };\n\n  // Handler for going back to chat list on mobile\n  const handleBackToList = () => {\n    if (isMobile) {\n      setMobileView('list');\n      setSelectedChatId(null);\n    }\n  };\n\n  // Handler for when a new chat is created\n  const handleChatCreated = (chatId: string) => {\n    console.log(\"New chat created with ID:\", chatId);\n    setSelectedChatId(chatId);\n    if (isMobile) {\n      setMobileView('chat');\n    }\n  };\n\n  // Helper function to get wallet by user ID\n  const getWalletById = (id: string) => {\n    const user = users.find((user) => user.id === id);\n    return user ? user.wallet : \"\";\n  };\n\n  // Get the name of the currently selected chat participant\n  const getCurrentChatName = () => {\n    const recipientUser = getRecipientUser();\n    return recipientUser ? recipientUser.name : \"Chat\";\n  };\n\n  // Get recipient user for the current chat\n  const getRecipientUser = (): User | null => {\n    console.log(\"Getting recipient user...\");\n    console.log(\"Selected chat ID:\", selectedChatId);\n    console.log(\"Current chat data:\", currentChatData);\n    console.log(\"Current address:\", address);\n    console.log(\"Available users:\", users);\n\n    if (!selectedChatId || !currentChatData || !address || users.length === 0) {\n      console.log(\"Missing required data for recipient detection\");\n      return null;\n    }\n\n    // Find the current user\n    const foundCurrentUser = users.find(user => user.wallet === address);\n    if (!foundCurrentUser) {\n      console.log(\"Current user not found in users list\");\n      return null;\n    }\n\n    console.log(\"Current user found:\", foundCurrentUser);\n\n    // Get the other participant from the chat's pid array\n    const otherParticipantId = currentChatData.pid.find(id => id !== foundCurrentUser.id);\n    if (!otherParticipantId) {\n      console.log(\"Other participant ID not found in chat data\");\n      return null;\n    }\n\n    console.log(\"Other participant ID:\", otherParticipantId);\n\n    // Find the other participant in the users list\n    const recipientUser = users.find(user => user.id === otherParticipantId);\n    console.log(\"Recipient user found:\", recipientUser);\n\n    return recipientUser || null;\n  };\n\n  // Handle sending transactions\n  const handleSendTransaction = (recipientUser: User) => {\n    console.log(\"Handle send transaction called with:\", recipientUser);\n    \n    // Validate input\n    if (!recipientUser || !recipientUser.wallet || !recipientUser.name) {\n      console.error(\"Invalid recipient user:\", recipientUser);\n      return;\n    }\n    \n    // Use functional updates for better state management\n    setTransactionRecipient(prev => {\n      console.log(\"Setting recipient from\", prev, \"to\", recipientUser);\n      return recipientUser;\n    });\n    \n    setShowTransactionModal(prev => {\n      console.log(\"Setting modal visibility from\", prev, \"to true\");\n      return true;\n    });\n  };\n\n  // Handle successful transaction\n  const handleTransactionSent = async (transactionData: TransactionData) => {\n    console.log(\"Transaction sent:\", transactionData);\n    \n    // Close the transaction modal\n    setShowTransactionModal(false);\n    setTransactionRecipient(null);\n    \n    // Send transaction message to the chat\n    if (selectedChatId && currentUser) {\n      try {\n        await SendTransactionMessage(transactionData, selectedChatId, currentUser.id);\n        console.log(\"Transaction message added to chat\");\n      } catch (error) {\n        console.error(\"Failed to add transaction message to chat:\", error);\n        // The transaction was successful but we couldn't add it to chat\n        // Could show a toast notification to the user about this\n      }\n    } else {\n      console.error(\"Missing chat ID or current user for transaction message\");\n    }\n  };\n\n  // Handle closing transaction modal\n  const handleCloseTransactionModal = () => {\n    setShowTransactionModal(false);\n    setTransactionRecipient(null);\n  };\n\n  // Log recipient user whenever it changes\n  useEffect(() => {\n    const recipient = getRecipientUser();\n    console.log(\"Recipient user updated:\", recipient);\n  }, [selectedChatId, currentChatData, users, address]);\n\n  // Desktop Layout\n  if (!isMobile) {\n    return (\n      <div className=\"chat desktop-chat\">\n        <ChatSelector\n          setSelectedChatId={handleChatSelect}\n          users={users}\n          getWalletById={getWalletById}\n          selectedChatId={selectedChatId}\n        />\n        <div className=\"desktop-chat-area\">\n          {selectedChatId ? (\n            <>\n              <ChatHeader \n                chatName={getCurrentChatName()}\n                onBack={handleBackToList}\n                showBackButton={false}\n              />\n              <ChatWindow \n                selectedChatId={selectedChatId}\n                onSendTransaction={handleSendTransaction}\n                recipientUser={getRecipientUser()}\n              >\n                <ChatContent\n                  selectedChatId={selectedChatId}\n                  users={users}\n                  getWalletById={getWalletById}\n                  onSendTransaction={handleSendTransaction}\n                  recipientUser={getRecipientUser()}\n                />\n              </ChatWindow>\n            </>\n          ) : (\n            <div className=\"desktop-chat-placeholder\">\n              <h2>Select a chat to start messaging</h2>\n              <p>Choose a conversation from the sidebar or create a new one</p>\n            </div>\n          )}\n        </div>\n        <button \n          className=\"createChatButton desktop-create-chat\" \n          onClick={() => setShowNewChatModal(true)}\n          title=\"Start new chat\"\n        >\n          <LuMessageCirclePlus size={24} />\n        </button>\n\n        {showNewChatModal && (\n          <NewChatModal \n            onClose={() => setShowNewChatModal(false)} \n            onChatCreated={handleChatCreated}\n          />\n        )}\n\n        {showTransactionModal && transactionRecipient && (\n          <SendTransactionModal\n            onClose={handleCloseTransactionModal}\n            recipientUser={transactionRecipient}\n            onTransactionSent={handleTransactionSent}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // Mobile Layout\n  return (\n    <div className=\"chat mobile-chat\">\n      {mobileView === 'list' ? (\n        // Mobile Chat List View\n        <div className=\"mobile-chat-list\">\n          <ChatHeader \n            chatName=\"Chats\"\n            onBack={handleBackToList}\n            showBackButton={false}\n            showProfilePic={true}\n          />\n          <div className=\"mobile-chat-selector\">\n            <ChatSelector\n              setSelectedChatId={handleChatSelect}\n              users={users}\n              getWalletById={getWalletById}\n              selectedChatId={selectedChatId}\n            />\n          </div>\n          <button \n            className=\"createChatButton mobile-create-chat\" \n            onClick={() => setShowNewChatModal(true)}\n            title=\"Start new chat\"\n          >\n            <LuMessageCirclePlus size={28} />\n          </button>\n        </div>\n      ) : (\n        // Mobile Chat View\n        <div className=\"mobile-chat-window\">\n          <ChatHeader \n            chatName={getCurrentChatName()}\n            onBack={handleBackToList}\n            showBackButton={true}\n          />\n          {selectedChatId && (\n            <ChatWindow \n              selectedChatId={selectedChatId}\n              onSendTransaction={handleSendTransaction}\n              recipientUser={getRecipientUser()}\n            >\n              <ChatContent\n                selectedChatId={selectedChatId}\n                users={users}\n                getWalletById={getWalletById}\n                onSendTransaction={handleSendTransaction}\n                recipientUser={getRecipientUser()}\n              />\n            </ChatWindow>\n          )}\n        </div>\n      )}\n      \n      {showNewChatModal && (\n        <NewChatModal \n          onClose={() => setShowNewChatModal(false)} \n          onChatCreated={handleChatCreated}\n        />\n      )}\n\n      {showTransactionModal && transactionRecipient && (\n        <SendTransactionModal\n          onClose={handleCloseTransactionModal}\n          recipientUser={transactionRecipient}\n          onTransactionSent={handleTransactionSent}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chat;","import React, { useState } from 'react';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { useAccount } from 'wagmi';\nimport { SlLogin } from \"react-icons/sl\";\nimport { firestore } from './Firebase'; \nimport { useNavigate } from 'react-router-dom';\n\nfunction ProceedButton() {\n  const { address } = useAccount();\n  const [userExists, setUserExists] = useState<boolean | null>(null);\n  const navigate = useNavigate();\n\n  const checkUser = async (walletAddress: string) => {\n    const usersCollection = collection(firestore, 'users');\n    const q = query(usersCollection, where('wallet', '==', walletAddress));\n\n    try {\n      const querySnapshot = await getDocs(q);\n      const userFound = !querySnapshot.empty;\n      console.log(\"User found:\", userFound);\n      setUserExists(userFound);\n\n      if (userFound) {\n        navigate('/chat'); // Redirect to Chat page if user is found\n      } else {\n        navigate('/signup'); // Redirect to Signup page if user is not found\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      setUserExists(false);\n      navigate('/signup'); // Redirect to Signup page on error\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className=\"proceedButton\"\n        onClick={() => {\n          if (address) {\n            checkUser(address);\n          } else {\n            console.error(\"Address is undefined\");\n          }\n        }}\n      >\n        <SlLogin size={28} />\n        <span>Proceed</span>\n      </button>\n      {userExists !== null && (\n        <p>{userExists ? 'User exists' : 'User does not exist'}</p>\n      )}\n    </div>\n  );\n}\n\nexport default ProceedButton;\n","import React from 'react';\nimport { SlClose } from 'react-icons/sl';\nimport { useAccount, useDisconnect } from 'wagmi';\n\nfunction WalletMenu() {\n  const { address, isConnected } = useAccount();\n  const { disconnect } = useDisconnect();\n  \n  const handleDisconnect = async () => {\n    // Clean up localStorage\n    localStorage.removeItem('walletconnect');\n    localStorage.removeItem('walletConnected');\n    localStorage.removeItem('connectorId');\n    \n    // Wagmi disconnect\n    disconnect();\n  }\n  \n  return (\n    <div className=\"wallet-button\">\n      {isConnected && address ? (\n        <div className='walletBubble'>\n          <div className=\"address\">\n            {address.slice(0, 6)}...{address.slice(-4)}\n          </div>\n          <button onClick={handleDisconnect}><SlClose size={25} /></button>\n        </div>\n      ) : (\n        // Directly use the web3modal button\n        <w3m-connect-button />\n      )}\n    </div>\n  );\n}\n\nexport default WalletMenu;\n","import React, { useState, useEffect } from \"react\";\nimport ConnectButton from \"./ConnectButton\";\nimport \"../styles.css\";\nimport { useAccount, useConnect, useDisconnect } from \"wagmi\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProceedButton from \"./ProceedButton\";\nimport WalletMenu from \"./WalletMenu\";\nimport { useResponsive } from \"./useResponsive\";\n\nfunction HomePage() {\n  const { address, isConnected, connector } = useAccount();\n  const { connect, connectors } = useConnect();\n  const { disconnect } = useDisconnect();\n  const [connected, setConnected] = useState(isConnected);\n  const navigate = useNavigate();\n  const { isMobile } = useResponsive();\n\n  // Try to automatically reconnect on page load\n  useEffect(() => {\n    const wasConnected = localStorage.getItem('walletConnected') === 'true';\n    if (wasConnected && !isConnected) {\n      console.log(\"Attempting to reconnect wallet automatically...\");\n      \n      // Find the right connector\n      const savedConnectorId = localStorage.getItem('connectorId');\n      console.log(\"Last used connector:\", savedConnectorId);\n      \n      if (savedConnectorId) {\n        const matchingConnector = connectors.find(c => c.id === savedConnectorId);\n        if (matchingConnector) {\n          console.log(\"Reconnecting with saved connector:\", savedConnectorId);\n          connect({ connector: matchingConnector });\n        }\n      } else {\n        // Fallback to injected\n        const injectedConnector = connectors.find(c => c.id === 'injected');\n        if (injectedConnector) {\n          console.log(\"No saved connector, trying injected...\");\n          connect({ connector: injectedConnector });\n        }\n      }\n    }\n  }, [connect, connectors, isConnected]);\n\n  // Listen for connection changes\n  useEffect(() => {\n    console.log(\"Connection state changed:\", isConnected ? \"connected\" : \"disconnected\");\n    console.log(\"Current connector:\", connector?.id);\n    setConnected(isConnected);\n    \n    // If connection is established and was previously not connected\n    if (isConnected && !connected) {\n      console.log(\"Wallet newly connected:\", address);\n    }\n    \n    // If disconnected and was previously connected\n    if (!isConnected && connected) {\n      console.log(\"Wallet disconnected\");\n    }\n  }, [isConnected, address, connected, connector]);\n\n  // Handle wallet connection events more robustly\n  useEffect(() => {\n    // This helps handle disconnection events - we check state on focus\n    const handleFocus = () => {\n      // Force check connection status when tab gets focus\n      if (connected && !isConnected) {\n        console.log(\"Connection lost while page was inactive, updating UI\");\n        setConnected(false);\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    \n    return () => {\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, [connected, isConnected]);\n\n  const handleDisconnect = () => {\n    try {\n      // First update our app state to show disconnected UI immediately\n      setConnected(false);\n      \n      // Clear localStorage on manual disconnect\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('lastConnectedAddress');\n      localStorage.removeItem('connectorId');\n      \n      console.log(\"Manual disconnect triggered, state cleared\");\n      \n      // Then try to disconnect via wagmi\n      disconnect();\n    } catch (error) {\n      console.error(\"Error during disconnect:\", error);\n    }\n  };\n\n  return (\n    <div className={`homepage ${isMobile ? 'mobile-homepage' : 'desktop-homepage'}`}>\n      <div className=\"title\">\n        <h1>Chat 3.0 is here.</h1>\n        <h2>Your personal web3 companion.</h2>\n      </div>\n      <div>\n        <div className=\"login\">\n          <h3>\n            {connected \n              ? `Connected ${connector?.id ? `(${connector.id})` : \"\"}` \n              : \"Connect your wallet\"}\n          </h3>\n          <WalletMenu />\n          {connected && <ProceedButton />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;","import React, { useState, useEffect } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { \n  getFirestore, \n  getDocs, \n  collection, \n  addDoc, \n  query, \n  orderBy, \n  limit, \n  where,\n  onSnapshot,\n  Unsubscribe\n} from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles.css\";\n\nfunction Signup() {\n  const { address } = useAccount();\n  const navigate = useNavigate();\n  const [name, setName] = useState(\"\");\n  const [data, setData] = useState<any>(null);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const [checkingUser, setCheckingUser] = useState(true);\n\n  // Check if user already exists when component mounts or address changes\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (!address) return;\n      \n      setCheckingUser(true);\n      try {\n        const usersCollection = collection(firestore, 'users');\n        const q = query(usersCollection, where('wallet', '==', address));\n        const querySnapshot = await getDocs(q);\n        \n        const exists = !querySnapshot.empty;\n        setUserExists(exists);\n        \n        // If user already exists, redirect to chat\n        if (exists) {\n          console.log(\"User already exists, redirecting to chat\");\n          navigate('/chat');\n        }\n      } catch (error) {\n        console.error(\"Error checking if user exists:\", error);\n      } finally {\n        setCheckingUser(false);\n      }\n    };\n\n    checkUserExists();\n  }, [address, navigate]);\n\n  const fetchData = async () => {\n    const usersCollection = collection(firestore, 'users');\n    const q = query(usersCollection, orderBy('name'), limit(10));\n    const querySnapshot = await getDocs(q);\n\n    const usersData = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    setData({ users: usersData });\n    console.log(\"Fetched data:\", usersData);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const writeData = async () => {\n    if (!address || !name.trim()) {\n      console.error(\"Missing required data: address or name\");\n      return;\n    }\n\n    if (userExists) {\n      console.log(\"User already exists, cannot register again\");\n      return;\n    }\n\n    setIsRegistering(true);\n    console.log(\"Writing data:\", address, name);\n\n    try {\n      // Double-check user doesn't exist before writing\n      const usersCollection = collection(firestore, 'users');\n      const existingUserQuery = query(usersCollection, where('wallet', '==', address));\n      const existingUserSnapshot = await getDocs(existingUserQuery);\n      \n      if (!existingUserSnapshot.empty) {\n        console.log(\"User already exists, cannot register\");\n        setUserExists(true);\n        setIsRegistering(false);\n        navigate('/chat');\n        return;\n      }\n\n      // Set up onSnapshot listener before adding the document\n      const unsubscribe: Unsubscribe = onSnapshot(\n        query(usersCollection, where('wallet', '==', address)),\n        (snapshot) => {\n          if (!snapshot.empty) {\n            // User has been successfully created\n            console.log(\"User successfully registered, redirecting to chat\");\n            unsubscribe(); // Clean up the listener\n            navigate('/chat');\n          }\n        },\n        (error) => {\n          console.error(\"Error in onSnapshot listener:\", error);\n          setIsRegistering(false);\n        }\n      );\n\n      // Add the new user document\n      await addDoc(usersCollection, {\n        wallet: address,\n        name: name.trim()\n      });\n      \n      console.log(\"Data written successfully\");\n      \n      // Set a timeout to clean up the listener if something goes wrong\n      setTimeout(() => {\n        unsubscribe();\n        if (isRegistering) {\n          setIsRegistering(false);\n          console.log(\"Registration timeout, stopped listening\");\n        }\n      }, 10000); // 10 second timeout\n\n    } catch (error) {\n      console.error(\"Error writing data:\", error);\n      setIsRegistering(false);\n    }\n  };\n\n  // Handle Enter key press in input field\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && !isRegistering && !userExists && name.trim()) {\n      writeData();\n    }\n  };\n\n  // Show loading state while checking if user exists\n  if (checkingUser) {\n    return (\n      <div className=\"centered-signup\">\n        <div className=\"welcomeText\">\n          <h1>Checking registration status...</h1>\n          <h2>Please wait</h2>\n        </div>\n      </div>\n    );\n  }\n\n  // Show message if user already exists\n  if (userExists) {\n    return (\n      <div className=\"centered-signup\">\n        <div className=\"welcomeText\">\n          <h1>Already Registered</h1>\n          <h2>You're already signed up! Redirecting to chat...</h2>\n        </div>\n        <p>Wallet Address: {address}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"centered-signup\">\n      <div className=\"welcomeText\">\n        <h1>Welcome to Chat 3.0</h1>\n        <h2>One last step to start chatting</h2>\n      </div>\n      <p>Wallet Address: {address}</p>\n      <div className=\"signupBox\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          onKeyPress={handleKeyPress}\n          disabled={isRegistering}\n          maxLength={50} // Add reasonable limit\n        />\n        <button \n          onClick={writeData}\n          disabled={isRegistering || !name.trim()}\n        >\n          {isRegistering ? \"Registering...\" : \"Register\"}\n        </button>\n      </div>\n      \n      {isRegistering && (\n        <p style={{ color: '#50b458', marginTop: '10px' }}>\n          Creating your account, please wait...\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default Signup;","import React, { ReactNode, useEffect } from 'react';\nimport { createWeb3Modal } from '@web3modal/wagmi/react';\nimport { useAccount } from 'wagmi';\nimport { mainnet, arbitrum, bsc, polygon, optimism, base } from 'viem/chains';\nimport { WagmiProvider, createConfig, http } from 'wagmi';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { walletConnect, injected, coinbaseWallet } from 'wagmi/connectors';\nimport { authConnector } from '@web3modal/wagmi';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Chat from \"./components/Chat\";\nimport HomePage from \"./components/HomePage\";\nimport { UserProvider } from \"./components/UserContext\";\nimport Signup from \"./components/Signup\";\n\nconst queryClient = new QueryClient();\nconst projectId = import.meta.env.VITE_WAGMI_PROJECTID;\n\nif (!projectId) throw new Error(\"Project ID is undefined\");\n\nconst metadata = {\n  name: \"TokenChat\",\n  description: \"Web3 Chat Application\",\n  url: \"https://c4ctus96.github.io/tokenchat\",\n  icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n};\n\n// Include more chains including BSC\nconst chains = [mainnet, bsc, polygon, arbitrum, optimism, base] as const;\n\n// Create the wagmi config first\nconst wagmiConfig = createConfig({\n  chains,\n  transports: {\n    [mainnet.id]: http('https://eth-mainnet.g.alchemy.com/v2/demo'),\n    [bsc.id]: http('https://bsc-dataseed1.binance.org'),\n    [polygon.id]: http('https://polygon-rpc.com'),\n    [arbitrum.id]: http('https://arb-mainnet.g.alchemy.com/v2/demo'),\n    [optimism.id]: http('https://mainnet.optimism.io'),\n    [base.id]: http('https://mainnet.base.org'),\n  },\n  connectors: [\n    walletConnect({\n      projectId,\n      metadata,\n      showQrModal: false\n    }),\n    injected({ shimDisconnect: true }),\n    coinbaseWallet({\n      appName: metadata.name,\n      appLogoUrl: metadata.icons[0],\n    }),\n    authConnector({\n      options: { projectId },\n      socials: ['google', 'x', 'github', 'discord', 'apple'],\n      showWallets: true,\n      email: true,\n      walletFeatures: false,\n    }),\n  ],\n});\n\n// Initialize Web3Modal with the wagmi config\ncreateWeb3Modal({\n  wagmiConfig,\n  projectId,\n  defaultChain: mainnet,\n  themeMode: 'dark',\n  enableAnalytics: true,\n  enableOnramp: false,\n  themeVariables: {\n    '--w3m-accent': '#50b458',\n    '--w3m-color-mix': '#210059',\n    '--w3m-color-mix-strength': 30\n    // Do not add --w3m-background\n  }\n});\n\nfunction PrivateRoute({ children }: { children: ReactNode }) {\n  const { isConnected } = useAccount();\n  return isConnected ? <>{children}</> : <Navigate to=\"/\" />;\n}\n\n// Component to handle initial connection check\nfunction ConnectionManager() {\n  const { isConnected } = useAccount();\n  \n  useEffect(() => {\n    console.log(\"App initialized, connection status:\", isConnected);\n    // Add error handling for MetaMask detection\n    if (typeof window.ethereum === 'undefined') {\n      console.log(\"MetaMask not detected, but WalletConnect can still be used\");\n    }\n  }, [isConnected]);\n  \n  return null;\n}\n\n// Main App component\nfunction App() {\n  return (\n    <WagmiProvider config={wagmiConfig}>\n      <QueryClientProvider client={queryClient}>\n        <UserProvider>\n          <Router basename=\"/tokenchat\">\n            <ConnectionManager />\n            <Routes>\n              <Route path=\"/\" element={<HomePage />} />\n              <Route\n                path=\"/chat\"\n                element={\n                  <PrivateRoute>\n                    <Chat />\n                  </PrivateRoute>\n                }\n              />\n              <Route path=\"/signup\" element={ <Signup /> } />\n            </Routes>\n          </Router>\n        </UserProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n\n// Export the App component as default\nexport default App;","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root') as HTMLElement;\nconst root = createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"names":["firebaseConfig","app","initializeApp","getAnalytics","firestore","getFirestore","EthProfilePic","eth","jsx","ChatSelector","setSelectedChatId","users","getWalletById","selectedChatId","address","useAccount","chatrooms","setChatrooms","useState","error","setError","useEffect","privateChatsRef","collection","unsubscribe","onSnapshot","snapshot","privateChatsData","doc","data","chatroom","messagesRef","messagesQuery","query","orderBy","limit","messagesSnapshot","getDocs","latestMessage","_a","msgError","a","b","timeA","_b","err","permission","currentUser","user","unsubscribers","senderName","getUserNameById","showNotification","messageText","truncatedText","filteredChatrooms","chat","id","getOtherParticipantId","pid","getOtherParticipantName","otherParticipantId","truncateMessage","text","maxLength","handleChatClick","jsxs","UserContext","createContext","UserProvider","children","setCurrentUser","useUser","context","useContext","SendMessage","txt","from","chatId","messageType","transactionData","chatMessagesCollectionRef","messageData","addDoc","ChatBottomBar","onSendTransaction","recipientUser","inputValue","setInputValue","React","handleChange","e","handleSend","handleSendTransaction","handleKeyDown","IoCard","IoSend","SendTransactionMessage","senderId","getTokenSymbol","chainId","ChatWindow","Message","timeStamp","own","TransactionMessage","transaction","networkInfo","statusInfo","IoTime","IoCheckmark","IoClose","formatAmount","amount","num","explorerUrl","ChatContent","messages","setMessages","messagesEndRef","useRef","scrollToBottom","fetchedMessages","message","index","isOwnMessage","ChatHeader","chatName","onBack","showBackButton","showProfilePic","IoArrowBack","NewChatModal","onClose","onChatCreated","setUsers","loading","setLoading","creatingChat","setCreatingChat","usersRef","allUsers","filteredUsers","checkExistingChat","targetUserId","q","participants","createChat","targetUser","existingChatId","newChatDoc","currentUserRef","targetUserRef","updateDoc","arrayUnion","SlClose","SlPlus","SendTransactionModal","onTransactionSent","useChainId","useSwitchChain","setAmount","recipientAddress","setRecipientAddress","setMessage","step","setStep","balance","balanceLoading","balanceError","useBalance","sendTransaction","hash","sendError","isSending","resetSendTransaction","useSendTransaction","isConfirming","isConfirmed","isConfirmError","confirmError","useWaitForTransactionReceipt","errorMessage","isValidAmount","parsedAmount","isValidAddress","isAddress","canSubmit","parseEther","quickAmounts","handleQuickAmount","quickAmount","handleMaxAmount","maxAmount","getExplorerUrl","handleClose","renderContent","Fragment","useResponsive","windowSize","setWindowSize","handleResize","isMobile","isTablet","isDesktop","Chat","showNewChatModal","setShowNewChatModal","showTransactionModal","setShowTransactionModal","transactionRecipient","setTransactionRecipient","currentChatData","setCurrentChatData","mobileView","setMobileView","usersData","chatDoc","getDoc","chatData","foundCurrentUser","handleChatSelect","handleBackToList","handleChatCreated","getCurrentChatName","getRecipientUser","prev","handleTransactionSent","handleCloseTransactionModal","recipient","LuMessageCirclePlus","ProceedButton","userExists","setUserExists","navigate","useNavigate","checkUser","walletAddress","usersCollection","where","userFound","SlLogin","WalletMenu","isConnected","disconnect","useDisconnect","handleDisconnect","HomePage","connector","connect","connectors","useConnect","connected","setConnected","savedConnectorId","matchingConnector","c","injectedConnector","handleFocus","Signup","name","setName","setData","isRegistering","setIsRegistering","checkingUser","setCheckingUser","exists","fetchData","writeData","existingUserQuery","handleKeyPress","queryClient","QueryClient","projectId","metadata","chains","mainnet","bsc","polygon","arbitrum","optimism","base","wagmiConfig","createConfig","http","walletConnect","injected","coinbaseWallet","authConnector","createWeb3Modal","PrivateRoute","Navigate","ConnectionManager","App","WagmiProvider","QueryClientProvider","Router","Routes","Route","rootElement","root","createRoot"],"mappings":"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"}