{"version":3,"file":"index-zSRL9l6h.js","sources":["../../src/components/Firebase.tsx","../../src/components/EthProfilePic.tsx","../../src/components/ChatSelector.tsx","../../src/components/UserContext.tsx","../../src/components/ChatBottomBar.tsx","../../src/components/ChatWindow.tsx","../../src/components/Message.tsx","../../src/utils/networks.ts","../../src/components/TransactionMessage.tsx","../../src/components/ChatContent.tsx","../../src/components/ChatHeader.tsx","../../src/components/NewChatModal.tsx","../../src/hooks/useChainListener.tsx","../../src/components/SendTransactionModal.tsx","../../src/components/useResponsive.tsx","../../src/components/Chat.tsx","../../src/components/ProceedButton.tsx","../../src/components/WalletMenu.tsx","../../src/components/HomePage.tsx","../../src/components/Signup.tsx","../../src/components/ConnectionListener.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from \"firebase/firestore\";  // Import Firestore\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_APIKEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTHDOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECTID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGEBUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APPID,\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENTID,\n  // .env gitignored\n};\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst firestore = getFirestore(app);  // Initialize Firestore\n\nexport { firebaseConfig, firestore };\n","import React from \"react\";\n\ntype EthProfilePicProps = {\n    eth: string;\n};\n\nconst EthProfilePic: React.FC<EthProfilePicProps> = ({ eth }) => {\n    return (\n        <div>\n            <img src={`https://effigy.im/a/${eth}.svg`} alt=\"Profile picture\" className=\"profilePic\" />\n        </div>\n    );\n};\n\nexport default EthProfilePic;","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, onSnapshot, query, orderBy, limit, getDocs, Unsubscribe } from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport EthProfilePic from \"./EthProfilePic\";\n\ninterface Chatroom {\n  id: string;\n  pid: string[];\n  lastMessage?: string;\n  lastMessageTime?: Date;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatSelectorProps {\n  setSelectedChatId: (id: string) => void;\n  users: User[];\n  getWalletById: (id: string) => string;\n  selectedChatId?: string | null;\n}\n\nfunction ChatSelector({ setSelectedChatId, users, getWalletById, selectedChatId }: ChatSelectorProps) {\n  const { address } = useAccount();\n  const [chatrooms, setChatrooms] = useState<Chatroom[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Refs for managing listeners and state\n  const unsubscribeRef = useRef<Unsubscribe | null>(null);\n  const messageUnsubscribersRef = useRef<Map<string, Unsubscribe>>(new Map());\n  const isPageVisibleRef = useRef(true);\n  const reconnectTimeoutRef = useRef<number | null>(null);\n  const lastUpdateTimeRef = useRef<number>(0);\n\n  // Cleanup function to remove all listeners\n  const cleanupListeners = useCallback(() => {\n    console.log(\"Cleaning up ChatSelector listeners\");\n    \n    // Clean up main chat listener\n    if (unsubscribeRef.current) {\n      unsubscribeRef.current();\n      unsubscribeRef.current = null;\n    }\n    \n    // Clean up message listeners\n    messageUnsubscribersRef.current.forEach((unsubscribe, chatId) => {\n      try {\n        unsubscribe();\n      } catch (error) {\n        console.warn(`Error unsubscribing from chat ${chatId}:`, error);\n      }\n    });\n    messageUnsubscribersRef.current.clear();\n    \n    // Clear reconnect timeout\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n  }, []);\n\n  // Function to set up chat listeners\n  const setupChatListeners = useCallback(async () => {\n    if (!address) {\n      console.log(\"No address available, skipping chat listener setup\");\n      return;\n    }\n\n    try {\n      console.log(\"Setting up chat listeners for address:\", address);\n      \n      // Clean up existing listeners first\n      cleanupListeners();\n\n      // Set up real-time listener for privateChats collection\n      const privateChatsRef = collection(firestore, \"privateChats\");\n      \n      const unsubscribe = onSnapshot(\n        privateChatsRef,\n        async (snapshot) => {\n          try {\n            console.log(\"Chat snapshot received, processing...\");\n            lastUpdateTimeRef.current = Date.now();\n            \n            const privateChatsData: Chatroom[] = [];\n            \n            // Clean up existing message listeners\n            messageUnsubscribersRef.current.forEach((unsub) => {\n              try {\n                unsub();\n              } catch (error) {\n                console.warn(\"Error cleaning up message listener:\", error);\n              }\n            });\n            messageUnsubscribersRef.current.clear();\n            \n            // Process each chat document\n            for (const doc of snapshot.docs) {\n              const data = doc.data();\n              const chatroom: Chatroom = {\n                id: doc.id,\n                pid: data.pid || []\n              };\n              \n              // Set up real-time listener for this chat's messages\n              try {\n                const messagesRef = collection(firestore, \"privateChats\", doc.id, \"msg\");\n                const messagesQuery = query(messagesRef, orderBy(\"ts\", \"desc\"), limit(1));\n                \n                const messageUnsubscribe = onSnapshot(messagesQuery, (messagesSnapshot) => {\n                  try {\n                    if (!messagesSnapshot.empty) {\n                      const latestMessage = messagesSnapshot.docs[0].data();\n                      \n                      // Update the chatroom in the state\n                      setChatrooms(prevChatrooms => {\n                        const updatedChatrooms = prevChatrooms.map(room => {\n                          if (room.id === doc.id) {\n                            return {\n                              ...room,\n                              lastMessage: latestMessage.txt || \"\",\n                              lastMessageTime: latestMessage.ts?.toDate() || new Date()\n                            };\n                          }\n                          return room;\n                        });\n                        \n                        // Sort by last message time\n                        return updatedChatrooms.sort((a, b) => {\n                          const timeA = a.lastMessageTime?.getTime() || 0;\n                          const timeB = b.lastMessageTime?.getTime() || 0;\n                          return timeB - timeA;\n                        });\n                      });\n                      \n                      // Show notification if this is a new message from someone else\n                      const currentUser = users.find(user => user.wallet === address);\n                      if (currentUser && \n                          latestMessage.from !== currentUser.id && \n                          doc.id !== selectedChatId &&\n                          isPageVisibleRef.current === false) {\n                        \n                        const senderName = getUserNameById(latestMessage.from);\n                        showNotification(senderName, latestMessage.txt);\n                      }\n                    } else {\n                      // No messages yet\n                      setChatrooms(prevChatrooms => {\n                        const updatedChatrooms = prevChatrooms.map(room => {\n                          if (room.id === doc.id) {\n                            return {\n                              ...room,\n                              lastMessage: \"No messages yet\",\n                              lastMessageTime: new Date(0)\n                            };\n                          }\n                          return room;\n                        });\n                        \n                        return updatedChatrooms.sort((a, b) => {\n                          const timeA = a.lastMessageTime?.getTime() || 0;\n                          const timeB = b.lastMessageTime?.getTime() || 0;\n                          return timeB - timeA;\n                        });\n                      });\n                    }\n                  } catch (msgError) {\n                    console.error(`Error processing message snapshot for chat ${doc.id}:`, msgError);\n                  }\n                }, (error) => {\n                  console.error(`Error in message listener for chat ${doc.id}:`, error);\n                });\n                \n                messageUnsubscribersRef.current.set(doc.id, messageUnsubscribe);\n              } catch (msgError) {\n                console.error(`Error setting up message listener for chat ${doc.id}:`, msgError);\n                chatroom.lastMessage = \"Failed to load\";\n                chatroom.lastMessageTime = new Date(0);\n              }\n              \n              privateChatsData.push(chatroom);\n            }\n            \n            // Initial sort by creation time or ID\n            privateChatsData.sort((a, b) => a.id.localeCompare(b.id));\n            \n            console.log(\"Real-time chatrooms update:\", privateChatsData);\n            setChatrooms(privateChatsData);\n            setError(null);\n          } catch (err) {\n            setError(\"Failed to fetch chat data. Please check your internet connection.\");\n            console.error(\"Snapshot processing error:\", err);\n          }\n        },\n        (error) => {\n          setError(\"Failed to fetch data. Please check your internet connection.\");\n          console.error(\"Chat listener error:\", error);\n          \n          // Attempt to reconnect after a delay\n          if (isPageVisibleRef.current) {\n            console.log(\"Attempting to reconnect chat listeners in 5 seconds...\");\n            reconnectTimeoutRef.current = window.setTimeout(() => {\n              setupChatListeners();\n            }, 5000);\n          }\n        }\n      );\n      \n      unsubscribeRef.current = unsubscribe;\n      \n    } catch (error) {\n      console.error(\"Error setting up chat listeners:\", error);\n      setError(\"Failed to initialize chat data.\");\n    }\n  }, [address, users, selectedChatId]);\n\n  // Initial setup\n  useEffect(() => {\n    if (address) {\n      setupChatListeners();\n    } else {\n      cleanupListeners();\n      setChatrooms([]);\n    }\n    \n    return cleanupListeners;\n  }, [address, setupChatListeners]);\n\n  // Handle page visibility changes to restart listeners when page becomes visible\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const isVisible = document.visibilityState === 'visible';\n      isPageVisibleRef.current = isVisible;\n      \n      console.log(`Page visibility changed: ${isVisible ? 'visible' : 'hidden'}`);\n      \n      if (isVisible && address) {\n        // Check if listeners might have stopped working\n        const timeSinceLastUpdate = Date.now() - lastUpdateTimeRef.current;\n        const shouldReconnect = timeSinceLastUpdate > 30000; // 30 seconds\n        \n        if (shouldReconnect) {\n          console.log(\"Page became visible and listeners may be stale, reconnecting...\");\n          setTimeout(() => {\n            setupChatListeners();\n          }, 1000); // Small delay to ensure page is fully active\n        }\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [address, setupChatListeners]);\n\n  // Request notification permission when component mounts\n  useEffect(() => {\n    const requestNotificationPermission = async () => {\n      if (\"Notification\" in window && Notification.permission === \"default\") {\n        try {\n          const permission = await Notification.requestPermission();\n          console.log(\"Notification permission:\", permission);\n        } catch (error) {\n          console.warn(\"Error requesting notification permission:\", error);\n        }\n      }\n    };\n    \n    requestNotificationPermission();\n  }, []);\n\n  // Show notification for new messages\n  const showNotification = useCallback((senderName: string, messageText: string) => {\n    if (\"Notification\" in window && Notification.permission === \"granted\") {\n      try {\n        const truncatedText = messageText.length > 50 \n          ? messageText.substring(0, 50) + \"...\" \n          : messageText;\n        \n        const notification = new Notification(`New message from ${senderName}`, {\n          body: truncatedText,\n          icon: \"/favicon.ico\",\n          badge: \"/favicon.ico\",\n          tag: \"new-message\",\n          requireInteraction: false,\n        });\n\n        // Auto-close notification after 5 seconds\n        setTimeout(() => {\n          notification.close();\n        }, 5000);\n        \n      } catch (error) {\n        console.warn(\"Error showing notification:\", error);\n      }\n    }\n  }, []);\n\n  // Determine the current user based on wallet address\n  const currentUser = users.find(user => user.wallet === address);\n\n  // Filter chatrooms to only those that the current user participates in\n  const filteredChatrooms = currentUser\n    ? chatrooms.filter(chat => chat.pid.includes(currentUser.id))\n    : [];\n\n  const getUserNameById = useCallback((id: string) => {\n    const user = users.find(user => user.id === id);\n    return user ? user.name : id;\n  }, [users]);\n\n  // For a valid chatroom, return the participant's id that doesn't match the current user\n  const getOtherParticipantId = useCallback((pid: string[]) => {\n    return currentUser ? pid.find(id => id !== currentUser.id) || '' : '';\n  }, [currentUser]);\n\n  const getOtherParticipantName = useCallback((pid: string[]) => {\n    const otherParticipantId = getOtherParticipantId(pid);\n    return getUserNameById(otherParticipantId);\n  }, [getOtherParticipantId, getUserNameById]);\n\n  // Truncate message text for display\n  const truncateMessage = useCallback((text: string, maxLength: number = 40) => {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + \"...\";\n  }, []);\n\n  const handleChatClick = useCallback((id: string) => {\n    setSelectedChatId(id);\n  }, [setSelectedChatId]);\n\n  return (\n    <div className=\"chatSelector\">\n      {error && <p className=\"error\">{error}</p>}\n      {filteredChatrooms.length > 0 ? (\n        filteredChatrooms.map((chatroom) => (\n          <div\n            className=\"contactBox\"\n            key={chatroom.id}\n            onClick={() => handleChatClick(chatroom.id)}\n            style={{\n              backgroundColor: chatroom.id === selectedChatId ? '#003344' : '#002233',\n              cursor: 'pointer'\n            }}\n          >\n            <EthProfilePic eth={getWalletById(getOtherParticipantId(chatroom.pid))} />\n            <div className=\"contactTextBox\">\n              <h3 style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                {getOtherParticipantName(chatroom.pid)}\n              </h3>\n              <p style={{ \n                margin: 0, \n                fontSize: '14px', \n                color: '#ccc',\n                opacity: 0.8,\n                lineHeight: '1.2'\n              }}>\n                {truncateMessage(chatroom.lastMessage || \"No messages yet\")}\n              </p>\n            </div>\n          </div>\n        ))\n      ) : (\n        <div style={{ padding: '20px', textAlign: 'center', color: '#ccc' }}>\n          <p>No chats yet</p>\n          <p style={{ fontSize: '14px', marginTop: '10px' }}>\n            Click the + button to start a new conversation\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ChatSelector;","import React, { createContext, useState, useContext, ReactNode } from \"react\";\n\nexport interface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface UserContextType {\n  currentUser?: User;\n  setCurrentUser: (user?: User) => void;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n  const [currentUser, setCurrentUser] = useState<User | undefined>(undefined);\n\n  return (\n    <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n  return context;\n};\n","import React from \"react\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport { IoSend, IoCard } from \"react-icons/io5\";\nimport { TransactionData } from \"./SendTransactionModal\";\n\ninterface ChatBottomBarProps {\n  selectedChatId?: string;\n  onSendTransaction?: (recipientUser: { id: string; name: string; wallet: string }) => void;\n  recipientUser?: { id: string; name: string; wallet: string };\n}\n\nconst SendMessage = async (\n  txt: string, \n  from: string, \n  chatId: string, \n  messageType: 'text' | 'transaction' = 'text', \n  transactionData?: TransactionData\n) => {\n  try {\n    const chatMessagesCollectionRef = collection(\n      firestore,\n      \"privateChats\",\n      chatId,\n      \"msg\"\n    );\n    \n    const messageData: any = {\n      txt: txt,\n      from: from,\n      ts: new Date(),\n      type: messageType,\n    };\n\n    // Add transaction data if it's a transaction message\n    if (messageType === 'transaction' && transactionData) {\n      messageData.transactionData = transactionData;\n    }\n\n    await addDoc(chatMessagesCollectionRef, messageData);\n    console.log(\"Message sent successfully\");\n  } catch (error) {\n    console.error(\"Error sending message:\", error);\n    throw error;\n  }\n};\n\nconst ChatBottomBar: React.FC<ChatBottomBarProps> = ({ \n  selectedChatId, \n  onSendTransaction,\n  recipientUser \n}) => {\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const { currentUser } = useUser();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSend = async () => {\n    if (!selectedChatId || !currentUser || !inputValue.trim()) {\n      console.error(\"Missing required data:\", { selectedChatId, currentUser, inputValue });\n      return;\n    }\n\n    try {\n      await SendMessage(inputValue.trim(), currentUser.id, selectedChatId);\n      setInputValue(\"\"); // Clear input after sending\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n      // Optionally show error to user\n    }\n  };\n\n  const handleSendTransaction = () => {\n    if (!recipientUser || !onSendTransaction) {\n      console.error(\"Missing recipient data for transaction\");\n      return;\n    }\n    onSendTransaction(recipientUser);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"chatBottomBar\">\n      <input\n        type=\"text\"\n        className=\"messageInput\"\n        placeholder=\"Type your message...\"\n        value={inputValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      \n      {/* Transaction Button */}\n      <button\n        className=\"transactionButton\"\n        onClick={handleSendTransaction}\n        disabled={!selectedChatId || !currentUser || !recipientUser}\n        title=\"Send crypto\"\n      >\n        <IoCard size={20} />\n      </button>\n\n      {/* Send Message Button */}\n      <button\n        className=\"sendMessageButton\"\n        onClick={handleSend}\n        disabled={!selectedChatId || !currentUser || !inputValue.trim()}\n        title=\"Send message\"\n      >\n        <IoSend size={20} />\n      </button>\n    </div>\n  );\n};\n\n// Helper function to send transaction messages to chat\nexport const SendTransactionMessage = async (\n  transactionData: TransactionData,\n  chatId: string,\n  senderId: string\n) => {\n  try {\n    // Create a descriptive message text with comment if available\n    let messageText = `Sent ${transactionData.amount} ${getTokenSymbol(transactionData.chainId)} to ${transactionData.recipientName}`;\n    \n    if (transactionData.comment) {\n      messageText += ` - ${transactionData.comment}`;\n    }\n    \n    await SendMessage(\n      messageText,\n      senderId,\n      chatId,\n      'transaction',\n      transactionData\n    );\n    \n    console.log(\"Transaction message sent to chat\");\n  } catch (error) {\n    console.error(\"Failed to send transaction message:\", error);\n    throw error;\n  }\n};\n\n// Helper function to get token symbol based on chain\nconst getTokenSymbol = (chainId: number): string => {\n  switch (chainId) {\n    case 1: return 'ETH';\n    case 56: return 'BNB';\n    case 137: return 'MATIC';\n    case 42161: return 'ETH';\n    case 10: return 'ETH';\n    case 8453: return 'ETH';\n    case 43114: return 'AVAX';\n    case 250: return 'FTM';\n    default: return 'ETH';\n  }\n};\n\n// Export both the component and the helper functions for external use\nexport { SendMessage };\nexport default ChatBottomBar;","import React, { ReactNode } from \"react\";\nimport \"../styles.css\";\nimport ChatBottomBar from \"./ChatBottomBar\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatWindowProps {\n  children?: ReactNode;\n  selectedChatId?: string;\n  onSendTransaction?: (recipientUser: User) => void;\n  recipientUser?: User | null;\n}\n\nfunction ChatWindow({ \n  children, \n  selectedChatId, \n  onSendTransaction,\n  recipientUser \n}: ChatWindowProps) {\n  return (\n    <div className=\"chatWindow\">\n      <div className=\"chatContent\">{children}</div>\n      <ChatBottomBar \n        selectedChatId={selectedChatId} \n        onSendTransaction={onSendTransaction}\n        recipientUser={recipientUser || undefined}\n      />\n    </div>\n  );\n}\n\nexport default ChatWindow;","import React from \"react\";\n\ninterface MessageProps {\n  text: string;\n  timeStamp: number; // Expecting timeStamp as a number in milliseconds\n  from: string;\n  own: boolean;\n}\n\nconst Message: React.FC<MessageProps> = ({ text, timeStamp, from, own }) => {\n  return (\n    <div className=\"messageBox\">\n      <div className={`message ${own ? 'own' : ''}`}>\n        <p className=\"message-text\">{text}</p>\n        <p className=\"message-timestamp\">{new Date(timeStamp).toLocaleString()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","// Network utility functions with comprehensive chain support\n\nexport interface NetworkInfo {\n  name: string;\n  symbol: string;\n  color: string;\n  explorerUrl: string | null;\n  rpcUrl?: string;\n  decimals: number;\n}\n\n// Comprehensive network data - covers most major chains\nconst NETWORK_DATA: Record<number, NetworkInfo> = {\n  // Ethereum Mainnet\n  1: {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    color: '#627EEA',\n    explorerUrl: 'https://etherscan.io',\n    decimals: 18\n  },\n  \n  // Binance Smart Chain\n  56: {\n    name: 'BNB Smart Chain',\n    symbol: 'BNB',\n    color: '#F3BA2F',\n    explorerUrl: 'https://bscscan.com',\n    decimals: 18\n  },\n  \n  // Polygon\n  137: {\n    name: 'Polygon',\n    symbol: 'MATIC',\n    color: '#8247E5',\n    explorerUrl: 'https://polygonscan.com',\n    decimals: 18\n  },\n  \n  // Arbitrum One\n  42161: {\n    name: 'Arbitrum One',\n    symbol: 'ETH',\n    color: '#28A0F0',\n    explorerUrl: 'https://arbiscan.io',\n    decimals: 18\n  },\n  \n  // Optimism\n  10: {\n    name: 'Optimism',\n    symbol: 'ETH',\n    color: '#FF0420',\n    explorerUrl: 'https://optimistic.etherscan.io',\n    decimals: 18\n  },\n  \n  // Base\n  8453: {\n    name: 'Base',\n    symbol: 'ETH',\n    color: '#0052FF',\n    explorerUrl: 'https://basescan.org',\n    decimals: 18\n  },\n  \n  // Avalanche C-Chain - Fixed configuration\n  43114: {\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    color: '#E84142',\n    explorerUrl: 'https://snowscan.xyz',\n    decimals: 18\n  },\n  \n  // Fantom Opera\n  250: {\n    name: 'Fantom',\n    symbol: 'FTM',\n    color: '#1969FF',\n    explorerUrl: 'https://ftmscan.com',\n    decimals: 18\n  },\n  \n  // Cronos\n  25: {\n    name: 'Cronos',\n    symbol: 'CRO',\n    color: '#002D74',\n    explorerUrl: 'https://cronoscan.com',\n    decimals: 18\n  },\n  \n  // Gnosis Chain\n  100: {\n    name: 'Gnosis',\n    symbol: 'xDAI',\n    color: '#04795B',\n    explorerUrl: 'https://gnosisscan.io',\n    decimals: 18\n  },\n  \n  // Moonbeam\n  1284: {\n    name: 'Moonbeam',\n    symbol: 'GLMR',\n    color: '#53CBC9',\n    explorerUrl: 'https://moonscan.io',\n    decimals: 18\n  },\n  \n  // Moonriver\n  1285: {\n    name: 'Moonriver',\n    symbol: 'MOVR',\n    color: '#53CBC9',\n    explorerUrl: 'https://moonriver.moonscan.io',\n    decimals: 18\n  },\n  \n  // Harmony\n  1666600000: {\n    name: 'Harmony',\n    symbol: 'ONE',\n    color: '#00AEE9',\n    explorerUrl: 'https://explorer.harmony.one',\n    decimals: 18\n  },\n  \n  // Celo\n  42220: {\n    name: 'Celo',\n    symbol: 'CELO',\n    color: '#35D07F',\n    explorerUrl: 'https://celoscan.io',\n    decimals: 18\n  },\n  \n  // Aurora\n  1313161554: {\n    name: 'Aurora',\n    symbol: 'ETH',\n    color: '#70D44B',\n    explorerUrl: 'https://aurorascan.dev',\n    decimals: 18\n  },\n  \n  // Metis Andromeda\n  1088: {\n    name: 'Metis',\n    symbol: 'METIS',\n    color: '#00DACC',\n    explorerUrl: 'https://andromeda-explorer.metis.io',\n    decimals: 18\n  },\n  \n  // Boba Network\n  288: {\n    name: 'Boba',\n    symbol: 'ETH',\n    color: '#CBFF00',\n    explorerUrl: 'https://bobascan.com',\n    decimals: 18\n  },\n  \n  // Milkomeda C1\n  2001: {\n    name: 'Milkomeda',\n    symbol: 'milkADA',\n    color: '#4E6FF1',\n    explorerUrl: 'https://explorer-mainnet-cardano-evm.c1.milkomeda.com',\n    decimals: 18\n  },\n  \n  // KCC\n  321: {\n    name: 'KuCoin',\n    symbol: 'KCS',\n    color: '#049C85',\n    explorerUrl: 'https://explorer.kcc.io',\n    decimals: 18\n  },\n  \n  // Huobi ECO Chain\n  128: {\n    name: 'HECO',\n    symbol: 'HT',\n    color: '#1253FC',\n    explorerUrl: 'https://hecoinfo.com',\n    decimals: 18\n  },\n  \n  // OKExChain\n  66: {\n    name: 'OKC',\n    symbol: 'OKT',\n    color: '#000000',\n    explorerUrl: 'https://www.oklink.com/en/okc',\n    decimals: 18\n  },\n  \n  // Velas EVM\n  106: {\n    name: 'Velas',\n    symbol: 'VLX',\n    color: '#0088FF',\n    explorerUrl: 'https://evmexplorer.velas.com',\n    decimals: 18\n  },\n  \n  // Fuse\n  122: {\n    name: 'Fuse',\n    symbol: 'FUSE',\n    color: '#D2FF52',\n    explorerUrl: 'https://explorer.fuse.io',\n    decimals: 18\n  },\n  \n  // NEAR Aurora Testnet\n  1313161555: {\n    name: 'Aurora Testnet',\n    symbol: 'ETH',\n    color: '#70D44B',\n    explorerUrl: 'https://testnet.aurorascan.dev',\n    decimals: 18\n  },\n  \n  // Testnets\n  3: {\n    name: 'Ethereum Ropsten',\n    symbol: 'ETH',\n    color: '#627EEA',\n    explorerUrl: 'https://ropsten.etherscan.io',\n    decimals: 18\n  },\n  \n  4: {\n    name: 'Ethereum Rinkeby',\n    symbol: 'ETH',\n    color: '#627EEA',\n    explorerUrl: 'https://rinkeby.etherscan.io',\n    decimals: 18\n  },\n  \n  5: {\n    name: 'Ethereum Goerli',\n    symbol: 'ETH',\n    color: '#627EEA',\n    explorerUrl: 'https://goerli.etherscan.io',\n    decimals: 18\n  },\n  \n  11155111: {\n    name: 'Ethereum Sepolia',\n    symbol: 'ETH',\n    color: '#627EEA',\n    explorerUrl: 'https://sepolia.etherscan.io',\n    decimals: 18\n  },\n  \n  97: {\n    name: 'BSC Testnet',\n    symbol: 'BNB',\n    color: '#F3BA2F',\n    explorerUrl: 'https://testnet.bscscan.com',\n    decimals: 18\n  },\n  \n  80001: {\n    name: 'Polygon Mumbai',\n    symbol: 'MATIC',\n    color: '#8247E5',\n    explorerUrl: 'https://mumbai.polygonscan.com',\n    decimals: 18\n  },\n  \n  421613: {\n    name: 'Arbitrum Goerli',\n    symbol: 'ETH',\n    color: '#28A0F0',\n    explorerUrl: 'https://goerli.arbiscan.io',\n    decimals: 18\n  },\n  \n  420: {\n    name: 'Optimism Goerli',\n    symbol: 'ETH',\n    color: '#FF0420',\n    explorerUrl: 'https://goerli-optimism.etherscan.io',\n    decimals: 18\n  },\n  \n  84531: {\n    name: 'Base Goerli',\n    symbol: 'ETH',\n    color: '#0052FF',\n    explorerUrl: 'https://goerli.basescan.org',\n    decimals: 18\n  },\n  \n  43113: {\n    name: 'Avalanche Fuji',\n    symbol: 'AVAX',\n    color: '#E84142',\n    explorerUrl: 'https://testnet.snowscan.xyz',\n    decimals: 18\n  },\n  \n  4002: {\n    name: 'Fantom Testnet',\n    symbol: 'FTM',\n    color: '#1969FF',\n    explorerUrl: 'https://testnet.ftmscan.com',\n    decimals: 18\n  }\n};\n\n// Enhanced cache for external API results with better debugging\nconst networkCache = new Map<number, NetworkInfo>();\nconst cacheExpiration = new Map<number, number>();\nconst CACHE_DURATION = 60 * 60 * 1000; // 1 hour\n\n// Track API failures to avoid repeated failures\nconst failedFetches = new Map<number, number>();\nconst FAILURE_RETRY_DELAY = 5 * 60 * 1000; // 5 minutes\n\n/**\n * Get network information by chain ID\n * First checks local data, then falls back to external API\n */\nexport async function getNetworkInfo(chainId: number): Promise<NetworkInfo> {\n  console.log(`Getting network info for chain ID: ${chainId}`);\n  \n  // Check if we have local data for this chain\n  if (NETWORK_DATA[chainId]) {\n    console.log(`Found local network data for chain ${chainId}:`, NETWORK_DATA[chainId]);\n    return NETWORK_DATA[chainId];\n  }\n  \n  // Check cache first\n  const cachedData = networkCache.get(chainId);\n  const cacheTime = cacheExpiration.get(chainId);\n  \n  if (cachedData && cacheTime && Date.now() < cacheTime) {\n    console.log(`Found cached network data for chain ${chainId}:`, cachedData);\n    return cachedData;\n  }\n  \n  // Check if we recently failed to fetch this chain\n  const lastFailure = failedFetches.get(chainId);\n  if (lastFailure && Date.now() - lastFailure < FAILURE_RETRY_DELAY) {\n    console.log(`Recently failed to fetch chain ${chainId}, using fallback`);\n    return getFallbackNetworkInfo(chainId);\n  }\n  \n  // Try to fetch from external API\n  try {\n    console.log(`Fetching network info from API for chain ${chainId}`);\n    const networkInfo = await fetchNetworkFromAPI(chainId);\n    \n    // Cache the result\n    networkCache.set(chainId, networkInfo);\n    cacheExpiration.set(chainId, Date.now() + CACHE_DURATION);\n    \n    // Clear any failure record\n    failedFetches.delete(chainId);\n    \n    console.log(`Successfully fetched and cached network info for chain ${chainId}:`, networkInfo);\n    return networkInfo;\n  } catch (error) {\n    console.warn(`Failed to fetch network info for chain ${chainId}:`, error);\n    \n    // Record the failure\n    failedFetches.set(chainId, Date.now());\n    \n    // Return fallback data\n    return getFallbackNetworkInfo(chainId);\n  }\n}\n\n/**\n * Get fallback network information for unknown chains\n */\nfunction getFallbackNetworkInfo(chainId: number): NetworkInfo {\n  console.log(`Using fallback network info for chain ${chainId}`);\n  \n  // Special cases for known chains that might fail API lookup\n  const specialCases: Record<number, NetworkInfo> = {\n    43114: {\n      name: 'Avalanche',\n      symbol: 'AVAX',\n      color: '#E84142',\n      explorerUrl: 'https://snowscan.xyz',\n      decimals: 18\n    },\n    56: {\n      name: 'BNB Smart Chain',\n      symbol: 'BNB',\n      color: '#F3BA2F',\n      explorerUrl: 'https://bscscan.com',\n      decimals: 18\n    },\n    137: {\n      name: 'Polygon',\n      symbol: 'MATIC',\n      color: '#8247E5',\n      explorerUrl: 'https://polygonscan.com',\n      decimals: 18\n    }\n  };\n  \n  if (specialCases[chainId]) {\n    return specialCases[chainId];\n  }\n  \n  // Generic fallback\n  return {\n    name: `Chain ${chainId}`,\n    symbol: 'ETH',\n    color: '#666666',\n    explorerUrl: null,\n    decimals: 18\n  };\n}\n\n/**\n * Fetch network information from chainlist.org API with timeout\n */\nasync function fetchNetworkFromAPI(chainId: number): Promise<NetworkInfo> {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n  \n  try {\n    const response = await fetch(`https://chainid.network/chains.json`, {\n      signal: controller.signal,\n      headers: {\n        'Accept': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const chains = await response.json();\n    const chain = chains.find((c: any) => c.chainId === chainId);\n    \n    if (!chain) {\n      throw new Error(`Chain ${chainId} not found in API response`);\n    }\n    \n    // Extract relevant information\n    const networkInfo: NetworkInfo = {\n      name: chain.name || `Chain ${chainId}`,\n      symbol: chain.nativeCurrency?.symbol || 'ETH',\n      color: '#666666', // Default color for unknown networks\n      explorerUrl: chain.explorers?.[0]?.url || null,\n      decimals: chain.nativeCurrency?.decimals || 18\n    };\n    \n    return networkInfo;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    throw error;\n  }\n}\n\n/**\n * Get network symbol by chain ID (synchronous, uses local data only)\n */\nexport function getNetworkSymbol(chainId: number): string {\n  console.log(`Getting network symbol for chain ID: ${chainId}`);\n  \n  const localData = NETWORK_DATA[chainId];\n  if (localData) {\n    console.log(`Found local symbol for chain ${chainId}: ${localData.symbol}`);\n    return localData.symbol;\n  }\n  \n  // Check cache\n  const cachedData = networkCache.get(chainId);\n  if (cachedData) {\n    console.log(`Found cached symbol for chain ${chainId}: ${cachedData.symbol}`);\n    return cachedData.symbol;\n  }\n  \n  // Return default\n  console.log(`No symbol found for chain ${chainId}, using default: ETH`);\n  return 'ETH';\n}\n\n/**\n * Check if a chain ID is a known testnet\n */\nexport function isTestnet(chainId: number): boolean {\n  const testnets = [3, 4, 5, 11155111, 97, 80001, 421613, 420, 84531, 43113, 4002, 1313161555];\n  return testnets.includes(chainId);\n}\n\n/**\n * Get block explorer URL for a transaction\n */\nexport function getExplorerUrl(chainId: number, txHash: string): string | null {\n  const networkInfo = NETWORK_DATA[chainId] || networkCache.get(chainId);\n  \n  if (!networkInfo?.explorerUrl) {\n    return null;\n  }\n  \n  return `${networkInfo.explorerUrl}/tx/${txHash}`;\n}\n\n/**\n * Clear cache for a specific chain (useful for debugging)\n */\nexport function clearNetworkCache(chainId?: number): void {\n  if (chainId) {\n    networkCache.delete(chainId);\n    cacheExpiration.delete(chainId);\n    failedFetches.delete(chainId);\n    console.log(`Cleared cache for chain ${chainId}`);\n  } else {\n    networkCache.clear();\n    cacheExpiration.clear();\n    failedFetches.clear();\n    console.log('Cleared all network cache');\n  }\n}\n\n/**\n * Get cache status for debugging\n */\nexport function getNetworkCacheStatus(): {\n  cached: number[];\n  failed: number[];\n  cacheSize: number;\n} {\n  return {\n    cached: Array.from(networkCache.keys()),\n    failed: Array.from(failedFetches.keys()),\n    cacheSize: networkCache.size\n  };\n}\n\n/**\n * Preload network information for common chains\n */\nexport async function preloadCommonNetworks(): Promise<void> {\n  const commonChains = [1, 56, 137, 42161, 10, 8453, 43114, 250];\n  \n  console.log('Preloading common networks:', commonChains);\n  \n  const results = await Promise.allSettled(\n    commonChains.map(async (chainId) => {\n      try {\n        const info = await getNetworkInfo(chainId);\n        console.log(`Preloaded chain ${chainId}:`, info.name);\n        return info;\n      } catch (error) {\n        console.warn(`Failed to preload chain ${chainId}:`, error);\n        throw error;\n      }\n    })\n  );\n  \n  const successful = results.filter(result => result.status === 'fulfilled').length;\n  const failed = results.filter(result => result.status === 'rejected').length;\n  \n  console.log(`Preloading complete: ${successful} successful, ${failed} failed`);\n}\n\n// Initialize preloading of common networks\nif (typeof window !== 'undefined') {\n  // Small delay to not block initial page load\n  setTimeout(() => {\n    preloadCommonNetworks().catch(console.warn);\n  }, 1000);\n}","import React, { useState, useEffect } from \"react\";\nimport { IoSend, IoCheckmark, IoClose, IoTime } from \"react-icons/io5\";\nimport { TransactionData } from \"./SendTransactionModal\";\nimport { getNetworkInfo, NetworkInfo } from \"../utils/networks\";\nimport \"../styles.css\";\n\ninterface TransactionMessageProps {\n  transaction: TransactionData;\n  own: boolean;\n  timeStamp: number;\n}\n\nconst TransactionMessage: React.FC<TransactionMessageProps> = ({ \n  transaction, \n  own, \n  timeStamp \n}) => {\n  const [networkInfo, setNetworkInfo] = useState<NetworkInfo>({\n    name: 'Loading...',\n    symbol: 'ETH',\n    color: '#666666',\n    explorerUrl: null,\n    decimals: 18\n  });\n  const [networkLoading, setNetworkLoading] = useState(true);\n\n  // Load network information when component mounts or transaction changes\n  useEffect(() => {\n    let isMounted = true;\n    \n    const loadNetworkInfo = async () => {\n      console.log(\"TransactionMessage: Loading network info for chain\", transaction.chainId);\n      setNetworkLoading(true);\n      \n      try {\n        const info = await getNetworkInfo(transaction.chainId);\n        \n        if (isMounted) {\n          console.log(\"TransactionMessage: Network info loaded:\", info);\n          setNetworkInfo(info);\n        }\n      } catch (error) {\n        console.error(\"TransactionMessage: Failed to load network info:\", error);\n        \n        if (isMounted) {\n          // Use fallback based on chainId\n          let fallbackInfo: NetworkInfo = {\n            name: `Chain ${transaction.chainId}`,\n            symbol: 'ETH',\n            color: '#666666',\n            explorerUrl: null,\n            decimals: 18\n          };\n\n          // Enhanced fallback for common chains\n          switch (transaction.chainId) {\n            case 1:\n              fallbackInfo = {\n                name: 'Ethereum',\n                symbol: 'ETH',\n                color: '#627EEA',\n                explorerUrl: 'https://etherscan.io',\n                decimals: 18\n              };\n              break;\n            case 56:\n              fallbackInfo = {\n                name: 'BNB Smart Chain',\n                symbol: 'BNB',\n                color: '#F3BA2F',\n                explorerUrl: 'https://bscscan.com',\n                decimals: 18\n              };\n              break;\n            case 137:\n              fallbackInfo = {\n                name: 'Polygon',\n                symbol: 'MATIC',\n                color: '#8247E5',\n                explorerUrl: 'https://polygonscan.com',\n                decimals: 18\n              };\n              break;\n            case 43114:\n              fallbackInfo = {\n                name: 'Avalanche',\n                symbol: 'AVAX',\n                color: '#E84142',\n                explorerUrl: 'https://snowscan.xyz',\n                decimals: 18\n              };\n              break;\n            case 42161:\n              fallbackInfo = {\n                name: 'Arbitrum One',\n                symbol: 'ETH',\n                color: '#28A0F0',\n                explorerUrl: 'https://arbiscan.io',\n                decimals: 18\n              };\n              break;\n            case 10:\n              fallbackInfo = {\n                name: 'Optimism',\n                symbol: 'ETH',\n                color: '#FF0420',\n                explorerUrl: 'https://optimistic.etherscan.io',\n                decimals: 18\n              };\n              break;\n            case 8453:\n              fallbackInfo = {\n                name: 'Base',\n                symbol: 'ETH',\n                color: '#0052FF',\n                explorerUrl: 'https://basescan.org',\n                decimals: 18\n              };\n              break;\n            case 250:\n              fallbackInfo = {\n                name: 'Fantom',\n                symbol: 'FTM',\n                color: '#1969FF',\n                explorerUrl: 'https://ftmscan.com',\n                decimals: 18\n              };\n              break;\n          }\n          \n          console.log(\"TransactionMessage: Using fallback network info:\", fallbackInfo);\n          setNetworkInfo(fallbackInfo);\n        }\n      } finally {\n        if (isMounted) {\n          setNetworkLoading(false);\n        }\n      }\n    };\n\n    loadNetworkInfo();\n    \n    return () => {\n      isMounted = false;\n    };\n  }, [transaction.chainId]);\n\n  // Status icon and text\n  const getStatusInfo = () => {\n    switch (transaction.status) {\n      case 'pending':\n        return {\n          icon: <IoTime size={16} />,\n          text: 'Pending',\n          className: 'pending'\n        };\n      case 'confirmed':\n        return {\n          icon: <IoCheckmark size={16} />,\n          text: 'Confirmed',\n          className: 'confirmed'\n        };\n      case 'failed':\n        return {\n          icon: <IoClose size={16} />,\n          text: 'Failed',\n          className: 'failed'\n        };\n      default:\n        return {\n          icon: <IoTime size={16} />,\n          text: 'Unknown',\n          className: 'unknown'\n        };\n    }\n  };\n\n  const statusInfo = getStatusInfo();\n\n  // Format amount for display\n  const formatAmount = (amount: string) => {\n    const num = parseFloat(amount);\n    if (num < 0.0001) return num.toExponential(2);\n    if (num < 1) return num.toFixed(6);\n    if (num < 1000) return num.toFixed(4);\n    return num.toFixed(2);\n  };\n\n  // Create block explorer URL\n  const getExplorerUrl = () => {\n    if (!networkInfo.explorerUrl) return null;\n    return `${networkInfo.explorerUrl}/tx/${transaction.hash}`;\n  };\n\n  const explorerUrl = getExplorerUrl();\n\n  return (\n    <div className=\"messageBox\">\n      <div className={`message transaction-message ${own ? 'own' : ''}`}>\n        {/* Transaction Header */}\n        <div className=\"transaction-header\">\n          <div className=\"transaction-icon\">\n            <IoSend size={20} />\n          </div>\n          <div className=\"transaction-title\">\n            <span>\n              {own ? `Sent to ${transaction.recipientName}` : `Received from ${transaction.senderName}`}\n            </span>\n          </div>\n          <div className={`transaction-status ${statusInfo.className}`}>\n            {statusInfo.icon}\n            <span>{statusInfo.text}</span>\n          </div>\n        </div>\n\n        {/* Transaction Amount */}\n        <div className=\"transaction-amount\">\n          <span className=\"amount\">\n            {own ? '-' : '+'}{formatAmount(transaction.amount)}\n          </span>\n          <span className=\"currency\">\n            {networkLoading ? '...' : networkInfo.symbol}\n          </span>\n        </div>\n\n        {/* Comment */}\n        {transaction.comment && transaction.comment.trim() && (\n          <div className=\"transaction-comment\">\n            <div className=\"comment-label\">Comment:</div>\n            {transaction.comment}\n          </div>\n        )}\n\n        {/* Network Badge */}\n        <div className=\"transaction-network\">\n          <div \n            className=\"network-badge\"\n            style={{ backgroundColor: networkInfo.color }}\n          >\n            {networkLoading ? 'Loading...' : networkInfo.name}\n            {transaction.chainId && !networkLoading && (\n              <span style={{ opacity: 0.7, fontSize: '10px', marginLeft: '4px' }}>\n                ({transaction.chainId})\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Transaction Details */}\n        <div className=\"transaction-details\">\n          <div className=\"detail-row\">\n            <span className=\"label\">Hash:</span>\n            <span className=\"value hash\">\n              {transaction.hash.slice(0, 8)}...{transaction.hash.slice(-6)}\n            </span>\n          </div>\n          \n          {transaction.gasFee && parseFloat(transaction.gasFee) > 0 && (\n            <div className=\"detail-row\">\n              <span className=\"label\">Gas Fee:</span>\n              <span className=\"value\">\n                {parseFloat(transaction.gasFee).toFixed(6)} {networkLoading ? '...' : networkInfo.symbol}\n              </span>\n            </div>\n          )}\n          \n          {explorerUrl && !networkLoading && (\n            <div className=\"transaction-explorer\">\n              <a \n                href={explorerUrl} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"explorer-link\"\n              >\n                View on Explorer →\n              </a>\n            </div>\n          )}\n        </div>\n\n        {/* Timestamp */}\n        <div className=\"message-timestamp\">\n          {new Date(timeStamp).toLocaleString()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionMessage;","import React, { useState, useEffect, useRef } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, query, orderBy, onSnapshot, Timestamp } from \"firebase/firestore\";\nimport Message from \"./Message\";\nimport TransactionMessage from \"./TransactionMessage\";\nimport { useAccount } from \"wagmi\";\nimport { useUser } from \"./UserContext\";\nimport { TransactionData } from \"./SendTransactionModal\";\n\ninterface ChatMessage {\n  txt: string;\n  ts: Timestamp;\n  from: string;\n  type?: 'text' | 'transaction';\n  transactionData?: TransactionData;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatContentProps {\n  selectedChatId: string;\n  users: User[];\n  getWalletById: (id: string) => string;\n  onSendTransaction?: (recipientUser: User) => void;\n  recipientUser?: User | null;\n}\n\nfunction ChatContent({ \n  selectedChatId, \n  users, \n  getWalletById, \n  onSendTransaction,\n  recipientUser \n}: ChatContentProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const { address } = useAccount();\n  const { currentUser } = useUser();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to bottom function\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Scroll whenever messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!selectedChatId) return;\n\n    // Create a query with ordering\n    const messagesRef = collection(firestore, \"privateChats\", selectedChatId, \"msg\");\n    const messagesQuery = query(messagesRef, orderBy(\"ts\", \"asc\"));\n\n    // Set up real-time listener\n    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n      const fetchedMessages: ChatMessage[] = [];\n      snapshot.forEach((doc) => {\n        const messageData = doc.data() as ChatMessage;\n        if (messageData.txt && messageData.ts && messageData.from) {\n          fetchedMessages.push(messageData);\n        } else {\n          console.log(\"Missing fields in document:\", doc.id);\n        }\n      });\n      console.log(\"Real-time Messages Update:\", fetchedMessages);\n      setMessages(fetchedMessages);\n    }, (error) => {\n      console.error(\"Error fetching messages:\", error);\n    });\n\n    // Cleanup subscription on unmount or when selectedChatId changes\n    return () => unsubscribe();\n  }, [selectedChatId]);\n\n  return (\n    <div className=\"chatContent\">\n      {messages.map((message, index) => {\n        const isOwnMessage = currentUser?.id ? message.from === currentUser.id : false;\n        \n        // Render transaction messages differently\n        if (message.type === 'transaction' && message.transactionData) {\n          return (\n            <TransactionMessage\n              key={index}\n              transaction={message.transactionData}\n              own={isOwnMessage}\n              timeStamp={message.ts.toMillis()}\n            />\n          );\n        }\n\n        // Render regular text messages\n        return (\n          <Message\n            key={index}\n            text={message.txt}\n            timeStamp={message.ts.toMillis()}\n            from={message.from}\n            own={isOwnMessage}\n          />\n        );\n      })}\n      <div ref={messagesEndRef} /> {/* Invisible element to scroll to */}\n    </div>\n  );\n}\n\nexport default ChatContent;","import React from \"react\";\nimport { useAccount } from \"wagmi\";\nimport { IoArrowBack } from \"react-icons/io5\";\nimport EthProfilePic from \"./EthProfilePic\";\nimport \"../styles.css\";\n\ninterface ChatHeaderProps {\n  chatName: string;\n  onBack: () => void;\n  showBackButton: boolean;\n  showProfilePic?: boolean;\n}\n\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  chatName, \n  onBack, \n  showBackButton,\n  showProfilePic = false \n}) => {\n  const { address } = useAccount();\n\n  return (\n    <div className=\"chat-header\">\n      <div className=\"chat-header-left\">\n        {showBackButton && (\n          <button \n            className=\"back-button\"\n            onClick={onBack}\n            title=\"Go back\"\n          >\n            <IoArrowBack size={24} />\n          </button>\n        )}\n        <div className=\"chat-header-info\">\n          <h2 className=\"chat-header-title\">{chatName}</h2>\n        </div>\n      </div>\n      \n      <div className=\"chat-header-right\">\n        {(showProfilePic || !showBackButton) && address && (\n          <div className=\"header-profile-pic\">\n            <EthProfilePic eth={address} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatHeader;","import React, { useState, useEffect } from \"react\";\nimport { SlClose, SlPlus } from \"react-icons/sl\";\nimport { collection, getDocs, addDoc, doc, updateDoc, arrayUnion, query, where } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport EthProfilePic from \"./EthProfilePic\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n  chats?: string[];\n}\n\ninterface NewChatModalProps {\n  onClose: () => void;\n  onChatCreated?: (chatId: string) => void; // Optional callback when chat is created\n}\n\nconst NewChatModal: React.FC<NewChatModalProps> = ({ onClose, onChatCreated }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [creatingChat, setCreatingChat] = useState<string | null>(null); // Track which user we're creating chat with\n  const [error, setError] = useState<string | null>(null);\n  const { currentUser } = useUser();\n\n  // Fetch all users except the current user\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        setLoading(true);\n        const usersRef = collection(firestore, \"users\");\n        const usersSnapshot = await getDocs(usersRef);\n        \n        const allUsers = usersSnapshot.docs.map(doc => ({\n          id: doc.id,\n          name: doc.data().name,\n          wallet: doc.data().wallet,\n          chats: doc.data().chats || []\n        }));\n\n        // Filter out the current user\n        const filteredUsers = currentUser \n          ? allUsers.filter(user => user.id !== currentUser.id)\n          : allUsers;\n\n        setUsers(filteredUsers);\n      } catch (err) {\n        console.error(\"Error fetching users:\", err);\n        setError(\"Failed to load users. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, [currentUser]);\n\n  // Check if a chat already exists between current user and target user\n  const checkExistingChat = async (targetUserId: string): Promise<string | null> => {\n    if (!currentUser) return null;\n\n    try {\n      const privateChatsRef = collection(firestore, \"privateChats\");\n      const q = query(privateChatsRef);\n      const snapshot = await getDocs(q);\n\n      // Look for existing chat with both users\n      for (const doc of snapshot.docs) {\n        const chatData = doc.data();\n        const participants = chatData.pid || [];\n        \n        if (participants.includes(currentUser.id) && participants.includes(targetUserId)) {\n          return doc.id; // Return existing chat ID\n        }\n      }\n      \n      return null; // No existing chat found\n    } catch (err) {\n      console.error(\"Error checking existing chat:\", err);\n      return null;\n    }\n  };\n\n  // Create a new chat between current user and target user\n  const createChat = async (targetUser: User) => {\n    if (!currentUser) {\n      setError(\"You must be logged in to create a chat\");\n      return;\n    }\n\n    setCreatingChat(targetUser.id);\n    setError(null);\n\n    try {\n      // Check if chat already exists\n      const existingChatId = await checkExistingChat(targetUser.id);\n      if (existingChatId) {\n        console.log(\"Chat already exists:\", existingChatId);\n        if (onChatCreated) {\n          onChatCreated(existingChatId);\n        }\n        onClose();\n        return;\n      }\n\n      // Create new chat in privateChats collection\n      const privateChatsRef = collection(firestore, \"privateChats\");\n      const newChatDoc = await addDoc(privateChatsRef, {\n        pid: [currentUser.id, targetUser.id],\n        createdAt: new Date(),\n        lastActivity: new Date()\n      });\n\n      console.log(\"Created new chat with ID:\", newChatDoc.id);\n\n      // Update both users' chats arrays\n      const currentUserRef = doc(firestore, \"users\", currentUser.id);\n      const targetUserRef = doc(firestore, \"users\", targetUser.id);\n\n      await Promise.all([\n        updateDoc(currentUserRef, {\n          chats: arrayUnion(newChatDoc.id)\n        }),\n        updateDoc(targetUserRef, {\n          chats: arrayUnion(newChatDoc.id)\n        })\n      ]);\n\n      console.log(\"Updated users' chat lists\");\n\n      // Call callback if provided\n      if (onChatCreated) {\n        onChatCreated(newChatDoc.id);\n      }\n\n      // Close modal\n      onClose();\n\n    } catch (err) {\n      console.error(\"Error creating chat:\", err);\n      setError(\"Failed to create chat. Please try again.\");\n    } finally {\n      setCreatingChat(null);\n    }\n  };\n\n  return (\n    <div className=\"modalOverlay\">\n      <div className=\"modalContent\">\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>\n          <h2>Start New Chat</h2>\n          <button \n            className=\"closeButton\" \n            onClick={onClose}\n            style={{\n              background: 'transparent',\n              border: 'none',\n              color: '#fff',\n              cursor: 'pointer',\n              padding: '5px'\n            }}\n          >\n            <SlClose size={20} />\n          </button>\n        </div>\n\n        {error && (\n          <div style={{ \n            color: '#ff4444', \n            marginBottom: '15px', \n            padding: '10px', \n            background: 'rgba(255, 68, 68, 0.1)',\n            borderRadius: '8px'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {loading ? (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <p>Loading users...</p>\n          </div>\n        ) : users.length === 0 ? (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <p>No other users found.</p>\n          </div>\n        ) : (\n          <div style={{ \n            maxHeight: '60vh', \n            overflowY: 'auto',\n            scrollbarWidth: 'thin',\n            scrollbarColor: 'rgba(255, 255, 255, 0.2) transparent',\n            paddingRight: '8px'\n          }}\n          className=\"modal-scroll-area\"\n          >\n            <p style={{ marginBottom: '15px', color: '#ccc' }}>\n              Select a user to start chatting:\n            </p>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n              {users.map((user) => (\n                <div\n                  key={user.id}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    padding: '12px',\n                    background: 'rgba(255, 255, 255, 0.05)',\n                    borderRadius: '8px',\n                    border: '1px solid rgba(255, 255, 255, 0.1)'\n                  }}\n                >\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n                    <EthProfilePic eth={user.wallet} />\n                    <div>\n                      <h4 style={{ margin: 0, fontSize: '16px' }}>{user.name}</h4>\n                      <p style={{ \n                        margin: 0, \n                        fontSize: '12px', \n                        color: '#ccc',\n                        fontFamily: 'monospace'\n                      }}>\n                        {user.wallet.slice(0, 6)}...{user.wallet.slice(-4)}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <button\n                    onClick={() => createChat(user)}\n                    disabled={creatingChat === user.id}\n                    style={{\n                      background: creatingChat === user.id ? '#666' : '#50b458',\n                      border: 'none',\n                      borderRadius: '50%',\n                      width: '40px',\n                      height: '40px',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      cursor: creatingChat === user.id ? 'not-allowed' : 'pointer',\n                      color: '#fff',\n                      transition: 'all 0.2s ease'\n                    }}\n                    onMouseEnter={(e) => {\n                      if (creatingChat !== user.id) {\n                        (e.target as HTMLButtonElement).style.background = '#5bc464';\n                        (e.target as HTMLButtonElement).style.transform = 'scale(1.05)';\n                      }\n                    }}\n                    onMouseLeave={(e) => {\n                      if (creatingChat !== user.id) {\n                        (e.target as HTMLButtonElement).style.background = '#50b458';\n                        (e.target as HTMLButtonElement).style.transform = 'scale(1)';\n                      }\n                    }}\n                  >\n                    {creatingChat === user.id ? (\n                      <div style={{ \n                        width: '16px', \n                        height: '16px', \n                        border: '2px solid #fff',\n                        borderTop: '2px solid transparent',\n                        borderRadius: '50%',\n                        animation: 'spin 1s linear infinite'\n                      }} />\n                    ) : (\n                      <SlPlus size={18} />\n                    )}\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        <style>{`\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar {\n            width: 6px;\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar-track {\n            background: transparent;\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar-thumb {\n            background-color: rgba(255, 255, 255, 0.2);\n            border-radius: 3px;\n          }\n        `}</style>\n      </div>\n    </div>\n  );\n};\n\nexport default NewChatModal;","import { useEffect, useState, useRef } from 'react';\nimport { useChainId } from 'wagmi';\n\n/**\n * Custom hook that combines wagmi's useChainId with direct MetaMask chain change events\n * This ensures we always get the most up-to-date chain ID even when wagmi is slow to update\n */\nexport function useChainListener() {\n  const wagmiChainId = useChainId();\n  const [currentChainId, setCurrentChainId] = useState(wagmiChainId);\n  const lastDirectChainIdRef = useRef<number | null>(null);\n  const lastUpdateTimeRef = useRef<number>(0);\n\n  // Update when wagmi chain ID changes, but only if we haven't received a direct update recently\n  useEffect(() => {\n    const now = Date.now();\n    const timeSinceLastDirectUpdate = now - lastUpdateTimeRef.current;\n    \n    // If we got a direct chain change within the last 2 seconds, ignore wagmi updates\n    if (lastDirectChainIdRef.current !== null && timeSinceLastDirectUpdate < 2000) {\n      console.log('useChainListener: Ignoring wagmi update', wagmiChainId, 'due to recent direct update to', lastDirectChainIdRef.current);\n      return;\n    }\n    \n    setCurrentChainId(wagmiChainId);\n    console.log('useChainListener: wagmi chain ID updated to', wagmiChainId);\n  }, [wagmiChainId]);\n\n  // Listen directly to MetaMask chain changes for immediate updates (PRIORITY)\n  useEffect(() => {\n    const handleChainChanged = (chainIdHex: string) => {\n      const newChainId = parseInt(chainIdHex, 16);\n      console.log('useChainListener: Direct chain change detected:', newChainId, '(PRIORITY UPDATE)');\n      \n      // Store the direct chain ID and timestamp\n      lastDirectChainIdRef.current = newChainId;\n      lastUpdateTimeRef.current = Date.now();\n      \n      // Update immediately, this takes priority over wagmi\n      setCurrentChainId(newChainId);\n    };\n\n    if (typeof window !== 'undefined' && window.ethereum) {\n      window.ethereum.on?.('chainChanged', handleChainChanged);\n      \n      return () => {\n        window.ethereum.removeListener?.('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n\n  // Also get the initial chain ID directly from MetaMask on mount\n  useEffect(() => {\n    const getInitialChainId = async () => {\n      if (typeof window !== 'undefined' && window.ethereum) {\n        try {\n          const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n          const chainIdNumber = parseInt(chainId, 16);\n          console.log('useChainListener: Initial chain ID from MetaMask:', chainIdNumber);\n          \n          // Only update if it's different from wagmi's current value\n          if (chainIdNumber !== wagmiChainId) {\n            console.log('useChainListener: MetaMask chain ID differs from wagmi, using MetaMask value');\n            lastDirectChainIdRef.current = chainIdNumber;\n            lastUpdateTimeRef.current = Date.now();\n            setCurrentChainId(chainIdNumber);\n          }\n        } catch (error) {\n          console.warn('useChainListener: Failed to get initial chain ID:', error);\n        }\n      }\n    };\n\n    getInitialChainId();\n  }, []); // Only run once on mount\n\n  return currentChainId;\n}","import React, { useState, useEffect } from \"react\";\nimport { SlClose } from \"react-icons/sl\";\nimport { IoSend } from \"react-icons/io5\";\nimport { useAccount, useBalance, useSendTransaction, useWaitForTransactionReceipt, useEstimateGas, useGasPrice, usePublicClient } from \"wagmi\";\nimport { parseEther, isAddress, formatEther } from \"viem\";\nimport { useUser } from \"./UserContext\";\nimport EthProfilePic from \"./EthProfilePic\";\nimport { getNetworkInfo, NetworkInfo } from \"../utils/networks\";\nimport { useChainListener } from \"../hooks/useChainListener\";\nimport \"../styles.css\";\n\ninterface SendTransactionModalProps {\n  onClose: () => void;\n  recipientUser?: {\n    id: string;\n    name: string;\n    wallet: string;\n  };\n  onTransactionSent?: (transactionData: TransactionData) => void;\n}\n\nexport interface TransactionData {\n  hash: string;\n  to: string;\n  amount: string;\n  chainId: number;\n  timestamp: Date;\n  from: string;\n  recipientName: string;\n  senderName: string;\n  status: 'pending' | 'confirmed' | 'failed';\n  comment?: string;\n  gasUsed?: string;\n  gasFee?: string;\n}\n\nconst SendTransactionModal: React.FC<SendTransactionModalProps> = ({ \n  onClose, \n  recipientUser,\n  onTransactionSent \n}) => {\n  const { address } = useAccount();\n  const { currentUser } = useUser();\n  const chainId = useChainListener(); // Use our enhanced hook\n  const publicClient = usePublicClient();\n  \n  // Network information state with loading indicator\n  const [networkInfo, setNetworkInfo] = useState<NetworkInfo>({\n    name: 'Loading...',\n    symbol: 'ETH',\n    color: '#666666',\n    explorerUrl: null,\n    decimals: 18\n  });\n  const [networkLoading, setNetworkLoading] = useState(true);\n  \n  // Transaction form state\n  const [amount, setAmount] = useState(\"\");\n  const [recipientAddress, setRecipientAddress] = useState(recipientUser?.wallet || \"\");\n  const [message, setMessage] = useState(\"\");\n  const [step, setStep] = useState<'form' | 'confirming' | 'pending' | 'success' | 'error'>('form');\n  const [error, setError] = useState<string | null>(null);\n  const [timeoutId, setTimeoutId] = useState<number | null>(null);\n\n  // Helper functions (declared early to avoid hoisting issues)\n  const isValidAddress = () => {\n    return isAddress(recipientAddress);\n  };\n\n  const isValidAmount = () => {\n    try {\n      const parsedAmount = parseFloat(amount);\n      if (parsedAmount <= 0) return false;\n      if (!balance) return false;\n      \n      // Check if user has enough balance including gas fees\n      const total = totalCost ? parseFloat(totalCost) : parsedAmount;\n      return total <= parseFloat(balance.formatted);\n    } catch {\n      return false;\n    }\n  };\n\n  // Get user's balance for current chain with forced refresh on chain change\n  const { data: balance, isLoading: balanceLoading, error: balanceError, refetch: refetchBalance } = useBalance({\n    address: address,\n    chainId: chainId, // Use our enhanced chainId\n    query: {\n      retry: 3,\n      retryDelay: 1000,\n    }\n  });\n\n  // Gas estimation with our enhanced chainId\n  const { data: gasEstimate, isLoading: gasLoading, refetch: refetchGasEstimate } = useEstimateGas({\n    to: recipientAddress as `0x${string}`,\n    value: amount ? parseEther(amount) : undefined,\n    chainId: chainId, // Use our enhanced chainId\n    query: {\n      enabled: isValidAddress() && !!amount && parseFloat(amount) > 0,\n      retry: 2,\n    }\n  });\n\n  const { data: gasPrice, refetch: refetchGasPrice } = useGasPrice({\n    chainId: chainId, // Use our enhanced chainId\n    query: {\n      retry: 2,\n    }\n  });\n\n  // Calculate estimated gas fee\n  const estimatedGasFee = gasEstimate && gasPrice \n    ? formatEther(gasEstimate * gasPrice)\n    : null;\n\n  // Calculate total cost (amount + gas fee)\n  const totalCost = amount && estimatedGasFee \n    ? (parseFloat(amount) + parseFloat(estimatedGasFee)).toString()\n    : null;\n\n  // Transaction hooks\n  const { \n    sendTransaction, \n    data: hash, \n    error: sendError, \n    isPending: isSending,\n    reset: resetSendTransaction\n  } = useSendTransaction();\n\n  const { \n    isLoading: isConfirming, \n    isSuccess: isConfirmed,\n    isError: isConfirmError,\n    error: confirmError\n  } = useWaitForTransactionReceipt({\n    hash,\n    timeout: 60000, // 60 second timeout\n    query: {\n      enabled: !!hash,\n      retry: 5,\n      retryDelay: 2000,\n    }\n  });\n\n  // Load network information when chain changes\n  useEffect(() => {\n    let isMounted = true;\n    \n    const loadNetworkInfo = async () => {\n      console.log(\"SendTransactionModal: Loading network info for chain ID:\", chainId);\n      setNetworkLoading(true);\n      \n      try {\n        const info = await getNetworkInfo(chainId);\n        \n        if (isMounted) {\n          console.log(\"SendTransactionModal: Network info loaded:\", info);\n          setNetworkInfo(info);\n        }\n      } catch (error) {\n        console.error(\"SendTransactionModal: Failed to load network info for chain\", chainId, \":\", error);\n        \n        if (isMounted) {\n          // Fallback network info\n          let fallbackInfo: NetworkInfo = {\n            name: `Chain ${chainId}`,\n            symbol: 'ETH',\n            color: '#666666',\n            explorerUrl: null,\n            decimals: 18\n          };\n          \n          // Special handling for known chains that might fail API lookup\n          if (chainId === 43114) {\n            fallbackInfo = {\n              name: 'Avalanche',\n              symbol: 'AVAX',\n              color: '#E84142',\n              explorerUrl: 'https://snowscan.xyz',\n              decimals: 18\n            };\n          } else if (chainId === 56) {\n            fallbackInfo = {\n              name: 'BNB Smart Chain',\n              symbol: 'BNB',\n              color: '#F3BA2F',\n              explorerUrl: 'https://bscscan.com',\n              decimals: 18\n            };\n          } else if (chainId === 137) {\n            fallbackInfo = {\n              name: 'Polygon',\n              symbol: 'MATIC',\n              color: '#8247E5',\n              explorerUrl: 'https://polygonscan.com',\n              decimals: 18\n            };\n          }\n          \n          console.log(\"SendTransactionModal: Using fallback network info:\", fallbackInfo);\n          setNetworkInfo(fallbackInfo);\n        }\n      } finally {\n        if (isMounted) {\n          setNetworkLoading(false);\n        }\n      }\n    };\n\n    loadNetworkInfo();\n    \n    return () => {\n      isMounted = false;\n    };\n  }, [chainId]);\n\n  // Force refresh wagmi hooks when chainId from our hook changes\n  useEffect(() => {\n    console.log(\"SendTransactionModal: chainId changed to\", chainId, \"- refreshing wagmi hooks\");\n    \n    // Force refresh all wagmi hooks when our enhanced chainId changes\n    if (refetchBalance) {\n      console.log(\"SendTransactionModal: Refetching balance for chain\", chainId);\n      refetchBalance().catch(console.warn);\n    }\n    if (refetchGasEstimate) {\n      console.log(\"SendTransactionModal: Refetching gas estimate for chain\", chainId);\n      refetchGasEstimate().catch(console.warn);\n    }\n    if (refetchGasPrice) {\n      console.log(\"SendTransactionModal: Refetching gas price for chain\", chainId);\n      refetchGasPrice().catch(console.warn);\n    }\n  }, [chainId, refetchBalance, refetchGasEstimate, refetchGasPrice]);\n\n  // Listen for network changes and force refresh ALL wagmi hooks\n  useEffect(() => {\n    const handleChainChanged = (newChainId: string) => {\n      const newChainIdNumber = parseInt(newChainId, 16);\n      console.log(\"SendTransactionModal: Chain changed event detected, new chain:\", newChainIdNumber);\n      \n      // Force refresh network info immediately\n      setNetworkLoading(true);\n      \n      // Force refresh ALL wagmi hooks data\n      console.log(\"SendTransactionModal: Refreshing all wagmi hooks for new chain\");\n      \n      // Refresh balance, gas estimate, and gas price\n      if (refetchBalance) {\n        refetchBalance().catch(console.warn);\n      }\n      if (refetchGasEstimate) {\n        refetchGasEstimate().catch(console.warn);\n      }\n      if (refetchGasPrice) {\n        refetchGasPrice().catch(console.warn);\n      }\n      \n      // Clear any cached data for immediate refresh\n      getNetworkInfo(newChainIdNumber).then(info => {\n        console.log(\"SendTransactionModal: Network info refreshed after chain change:\", info);\n        setNetworkInfo(info);\n        setNetworkLoading(false);\n      }).catch(error => {\n        console.error(\"SendTransactionModal: Failed to refresh network info after chain change:\", error);\n        \n        // Enhanced fallback for known chains\n        let fallbackInfo: NetworkInfo = {\n          name: `Chain ${newChainIdNumber}`,\n          symbol: 'ETH',\n          color: '#666666',\n          explorerUrl: null,\n          decimals: 18\n        };\n\n        if (newChainIdNumber === 43114) {\n          fallbackInfo = {\n            name: 'Avalanche',\n            symbol: 'AVAX',\n            color: '#E84142',\n            explorerUrl: 'https://snowscan.xyz',\n            decimals: 18\n          };\n        } else if (newChainIdNumber === 56) {\n          fallbackInfo = {\n            name: 'BNB Smart Chain',\n            symbol: 'BNB',\n            color: '#F3BA2F',\n            explorerUrl: 'https://bscscan.com',\n            decimals: 18\n          };\n        } else if (newChainIdNumber === 137) {\n          fallbackInfo = {\n            name: 'Polygon',\n            symbol: 'MATIC',\n            color: '#8247E5',\n            explorerUrl: 'https://polygonscan.com',\n            decimals: 18\n          };\n        }\n        \n        setNetworkInfo(fallbackInfo);\n        setNetworkLoading(false);\n      });\n    };\n\n    if (typeof window !== 'undefined' && window.ethereum) {\n      window.ethereum.on?.('chainChanged', handleChainChanged);\n      \n      return () => {\n        window.ethereum.removeListener?.('chainChanged', handleChainChanged);\n      };\n    }\n  }, [refetchBalance, refetchGasEstimate, refetchGasPrice]);\n\n  // Reset transaction state when modal opens\n  useEffect(() => {\n    resetSendTransaction();\n    setStep('form');\n    setError(null);\n    \n    // Try to refetch balance when modal opens\n    if (refetchBalance) {\n      refetchBalance();\n    }\n  }, [resetSendTransaction, refetchBalance]);\n\n  // Clear timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [timeoutId]);\n\n  // Handle transaction lifecycle\n  useEffect(() => {\n    if (isSending) {\n      setStep('confirming');\n      setError(null);\n      \n      // Set a timeout for confirming state (in case user never confirms/rejects)\n      const timeout = setTimeout(() => {\n        if (step === 'confirming') {\n          setError('Transaction confirmation timed out. Please try again.');\n          setStep('error');\n        }\n      }, 60000) as number; // 60 seconds\n      \n      setTimeoutId(timeout);\n    }\n  }, [isSending]);\n\n  useEffect(() => {\n    if (hash) {\n      // Clear the confirming timeout since we have a hash\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        setTimeoutId(null);\n      }\n      \n      if (!isConfirming && !isConfirmed && !isConfirmError) {\n        setStep('pending');\n      }\n    }\n  }, [hash, isConfirming, isConfirmed, isConfirmError, timeoutId]);\n\n  useEffect(() => {\n    if (isConfirmed && hash) {\n      setStep('success');\n      \n      // Create transaction data for chat integration\n      const transactionData: TransactionData = {\n        hash,\n        to: recipientAddress,\n        amount,\n        chainId,\n        timestamp: new Date(),\n        from: address!,\n        recipientName: recipientUser?.name || 'Unknown',\n        senderName: currentUser?.name || 'You',\n        status: 'confirmed',\n        comment: message.trim() || undefined,\n        gasUsed: gasEstimate?.toString(),\n        gasFee: estimatedGasFee || undefined,\n      };\n\n      if (onTransactionSent) {\n        onTransactionSent(transactionData);\n      }\n\n      // Auto-close after success\n      setTimeout(() => {\n        onClose();\n      }, 3000);\n    }\n  }, [isConfirmed, hash, recipientAddress, amount, chainId, address, recipientUser, currentUser, onTransactionSent, onClose, message, gasEstimate, estimatedGasFee]);\n\n  useEffect(() => {\n    if (sendError || isConfirmError) {\n      setStep('error');\n      const errorMessage = sendError?.message || confirmError?.message || 'Transaction failed';\n      \n      // Parse common error messages\n      if (errorMessage.includes('insufficient funds')) {\n        setError('Insufficient funds for this transaction');\n      } else if (errorMessage.includes('user rejected') || errorMessage.includes('User denied')) {\n        setError('Transaction was cancelled by user');\n      } else if (errorMessage.includes('gas')) {\n        setError('Transaction failed due to gas issues');\n      } else if (errorMessage.includes('network')) {\n        setError('Network error. Please check your connection and try again.');\n      } else {\n        // Simplify complex error messages\n        setError('Transaction failed. Please try again.');\n      }\n      \n      // Clear any pending timeouts\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        setTimeoutId(null);\n      }\n    }\n  }, [sendError, isConfirmError, confirmError, timeoutId]);\n\n  const canSubmit = () => {\n    return isValidAmount() && isValidAddress() && !isSending && !balanceLoading && balance && !networkLoading;\n  };\n\n  // Handle form submission\n  const handleSend = async () => {\n    if (!canSubmit()) return;\n\n    try {\n      setError(null);\n      console.log('Sending transaction:', {\n        to: recipientAddress,\n        value: parseEther(amount),\n        chainId\n      });\n      \n      sendTransaction({\n        to: recipientAddress as `0x${string}`,\n        value: parseEther(amount),\n      });\n    } catch (err) {\n      console.error('Transaction error:', err);\n      setError('Failed to initiate transaction');\n      setStep('error');\n    }\n  };\n\n  // Quick amount buttons\n  const quickAmounts = ['0.001', '0.01', '0.1'];\n\n  const handleQuickAmount = (quickAmount: string) => {\n    setAmount(quickAmount);\n  };\n\n  // Handle max amount with proper gas calculation + safety buffer (MetaMask approach)\n  const handleMaxAmount = async () => {\n    if (!balance || !address || !publicClient) return;\n    \n    const balanceValue = parseFloat(balance.formatted);\n\n    try {\n      // Step 1: Get current gas price\n      const currentGasPrice = gasPrice;\n      if (!currentGasPrice) {\n        alert('Unable to fetch gas price. Please try again in a moment.');\n        return;\n      }\n\n      // Step 2: Estimate gas for a small transaction\n      // Use a very small amount or 1% of balance, whichever is smaller\n      const testAmountValue = Math.min(0.0001, balanceValue * 0.01);\n      const testAmount = parseEther(testAmountValue.toString());\n      \n      const gasEstimate = await publicClient.estimateGas({\n        account: address,\n        to: recipientAddress as `0x${string}`,\n        value: testAmount,\n      });\n\n      // Step 3: Apply MetaMask-style safety buffer  \n      // GitHub issue shows MetaMask uses 1.5x the estimate (50% increase)\n      const gasWithBuffer = gasEstimate * BigInt(150) / BigInt(100); // 50% increase (1.5x)\n      \n      // Step 4: Calculate transaction fee with buffer\n      const txFee = gasWithBuffer * currentGasPrice;\n      const txFeeInEther = formatEther(txFee);\n      const txFeeValue = parseFloat(txFeeInEther);\n\n      // Step 5: Calculate max sendable amount\n      const maxSendableAmount = balanceValue - txFeeValue;\n\n      // Check if there's enough left after gas\n      if (maxSendableAmount <= 0) {\n        alert(`Insufficient balance for transaction.\\n\\nBalance: ${balanceValue} ${networkInfo.symbol}\\nEstimated gas fee (with buffer): ${txFeeValue.toFixed(8)} ${networkInfo.symbol}\\n\\nYou need more ${networkInfo.symbol} to cover gas fees.`);\n        return;\n      }\n\n      // Additional safety check: ensure result doesn't exceed balance\n      const finalAmount = Math.min(maxSendableAmount, balanceValue * 0.99); // Never use more than 99% of balance\n\n      // Use higher precision for small amounts\n      const precision = finalAmount < 0.01 ? 8 : 6;\n      setAmount(finalAmount.toFixed(precision));\n\n      console.log('Max calculation with MetaMask 1.5x approach:', {\n        balance: balanceValue,\n        gasEstimate: gasEstimate.toString(),\n        gasWithBuffer: gasWithBuffer.toString(),\n        gasPrice: currentGasPrice.toString(),\n        txFee: txFeeValue,\n        maxSendable: maxSendableAmount,\n        finalAmount: finalAmount\n      });\n\n    } catch (error) {\n      console.error('Error calculating max amount:', error);\n      alert('Unable to calculate max amount. Please enter amount manually.');\n    }\n  };\n\n  // Retry balance fetch\n  const retryBalance = () => {\n    if (refetchBalance) {\n      refetchBalance();\n    }\n  };\n\n  // Create block explorer URL\n  const getExplorerUrl = () => {\n    if (!hash || !networkInfo.explorerUrl) return null;\n    return `${networkInfo.explorerUrl}/tx/${hash}`;\n  };\n\n  // Handle close with confirmation if transaction is in progress\n  const handleClose = () => {\n    if (step === 'confirming') {\n      const shouldClose = window.confirm(\n        'Are you sure you want to close? The transaction request may still be pending in your wallet.'\n      );\n      if (!shouldClose) return;\n    }\n    \n    if (step === 'pending') {\n      const shouldClose = window.confirm(\n        'Transaction is being processed on the blockchain. Are you sure you want to close? You can check the status using the transaction hash.'\n      );\n      if (!shouldClose) return;\n    }\n    \n    // Clear any timeouts\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    onClose();\n  };\n\n  // Render different steps\n  const renderContent = () => {\n    switch (step) {\n      case 'form':\n        return (\n          <>\n            <div className=\"transaction-form\">\n              {/* Recipient Info */}\n              {recipientUser && (\n                <div className=\"recipient-info\">\n                  <EthProfilePic eth={recipientUser.wallet} />\n                  <div className=\"recipient-details\">\n                    <h4>{recipientUser.name}</h4>\n                    <p className=\"recipient-address\">\n                      {recipientUser.wallet.slice(0, 6)}...{recipientUser.wallet.slice(-4)}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* Balance Error */}\n              {balanceError && (\n                <div className=\"error-message\">\n                  Failed to load balance. \n                  <button \n                    onClick={retryBalance}\n                    style={{ \n                      marginLeft: '10px', \n                      background: '#50b458', \n                      border: 'none', \n                      color: 'white', \n                      padding: '4px 8px', \n                      borderRadius: '4px',\n                      cursor: 'pointer'\n                    }}\n                  >\n                    Retry\n                  </button>\n                </div>\n              )}\n\n              {/* Amount Input */}\n              <div className=\"form-group\">\n                <label>Amount ({networkLoading ? 'Loading...' : networkInfo.symbol})</label>\n                <div className=\"amount-input-group\">\n                  <input\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"0.0\"\n                    step=\"0.0001\"\n                    min=\"0\"\n                    max={balance?.formatted || '0'}\n                    className={amount && !isValidAmount() ? 'error' : ''}\n                  />\n                  <div className=\"quick-amounts\">\n                    {quickAmounts.map((quickAmount) => (\n                      <button\n                        key={quickAmount}\n                        type=\"button\"\n                        className=\"quick-amount-btn\"\n                        onClick={() => handleQuickAmount(quickAmount)}\n                      >\n                        {quickAmount}\n                      </button>\n                    ))}\n                    <button\n                      type=\"button\"\n                      className=\"quick-amount-btn\"\n                      onClick={handleMaxAmount}\n                      disabled={!balance}\n                    >\n                      Max\n                    </button>\n                  </div>\n                </div>\n                <div className=\"balance-info\">\n                  {balanceLoading ? (\n                    <span>Loading balance...</span>\n                  ) : balance ? (\n                    <span>\n                      Balance: {parseFloat(balance.formatted).toFixed(6)} {balance.symbol}\n                    </span>\n                  ) : (\n                    <span>Balance unavailable</span>\n                  )}\n                </div>\n                {amount && !isValidAmount() && (\n                  <span className=\"error-text\">\n                    {parseFloat(amount) <= 0 \n                      ? 'Amount must be greater than 0' \n                      : totalCost && parseFloat(totalCost) > parseFloat(balance?.formatted || '0')\n                        ? 'Insufficient balance (including gas fees)'\n                        : 'Insufficient balance'\n                    }\n                  </span>\n                )}\n              </div>\n\n              {/* Recipient Address (if not pre-filled) */}\n              {!recipientUser && (\n                <div className=\"form-group\">\n                  <label>Recipient Address</label>\n                  <input\n                    type=\"text\"\n                    value={recipientAddress}\n                    onChange={(e) => setRecipientAddress(e.target.value)}\n                    placeholder=\"0x...\"\n                    className={!isValidAddress() && recipientAddress ? 'error' : ''}\n                  />\n                  {recipientAddress && !isValidAddress() && (\n                    <span className=\"error-text\">Invalid address</span>\n                  )}\n                </div>\n              )}\n\n              {/* Message (optional) */}\n              <div className=\"form-group\">\n                <label>Comment (optional)</label>\n                <textarea\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  placeholder=\"What's this transaction for?\"\n                  maxLength={200}\n                  rows={3}\n                />\n                <div style={{ fontSize: '12px', color: '#ccc', textAlign: 'right', marginTop: '4px' }}>\n                  {message.length}/200\n                </div>\n              </div>\n\n              {/* Transaction Summary */}\n              {amount && parseFloat(amount) > 0 && (\n                <div className=\"transaction-summary\">\n                  <h4>Transaction Summary</h4>\n                  <div className=\"summary-row\">\n                    <span>Amount to send:</span>\n                    <span>{amount} {networkLoading ? 'Loading...' : networkInfo.symbol}</span>\n                  </div>\n                  {estimatedGasFee && (\n                    <div className=\"summary-row\">\n                      <span>Estimated gas fee:</span>\n                      <span className=\"gas-fee\">\n                        {parseFloat(estimatedGasFee).toFixed(6)} {networkLoading ? 'Loading...' : networkInfo.symbol}\n                      </span>\n                    </div>\n                  )}\n                  {gasLoading && (\n                    <div className=\"summary-row\">\n                      <span>Estimating gas fee...</span>\n                      <span className=\"gas-loading\">⏳</span>\n                    </div>\n                  )}\n                  {totalCost && (\n                    <div className=\"summary-row total\">\n                      <span><strong>Total cost:</strong></span>\n                      <span><strong>{parseFloat(totalCost).toFixed(6)} {networkLoading ? 'Loading...' : networkInfo.symbol}</strong></span>\n                    </div>\n                  )}\n                  {amount && !isValidAmount() && totalCost && (\n                    <div className=\"summary-warning\">\n                      ⚠️ Insufficient balance for total cost including gas fees\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Network Info */}\n              <div className=\"network-info\">\n                <span>\n                  Sending on {networkLoading ? 'Loading network...' : networkInfo.name}\n                  {chainId && !networkLoading && (\n                    <span style={{ opacity: 0.7, fontSize: '12px', marginLeft: '8px' }}>\n                      (Chain {chainId})\n                    </span>\n                  )}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={handleClose}>\n                Cancel\n              </button>\n              <button \n                className=\"send-btn\"\n                onClick={handleSend}\n                disabled={!canSubmit()}\n              >\n                <IoSend size={18} />\n                Send\n              </button>\n            </div>\n          </>\n        );\n\n      case 'confirming':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon confirming\">\n              <div className=\"spinner\" />\n            </div>\n            <h3>Confirm in Wallet</h3>\n            <p>Please confirm the transaction in your wallet to continue.</p>\n            <p>Network: {networkInfo.name}</p>\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={handleClose}>\n                Cancel\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'pending':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon pending\">\n              <div className=\"spinner\" />\n            </div>\n            <h3>Transaction Pending</h3>\n            <p>Your transaction is being processed on {networkInfo.name}.</p>\n            {hash && (\n              <div className=\"transaction-hash\">\n                <p>Transaction Hash:</p>\n                <code>{hash.slice(0, 10)}...{hash.slice(-8)}</code>\n              </div>\n            )}\n            {getExplorerUrl() && (\n              <div className=\"transaction-explorer\">\n                <a \n                  href={getExplorerUrl()!} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"explorer-link\"\n                >\n                  View on {networkInfo.name} Explorer →\n                </a>\n              </div>\n            )}\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={handleClose}>\n                Close\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'success':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon success\">\n              ✓\n            </div>\n            <h3>Transaction Sent!</h3>\n            <p>\n              Successfully sent {amount} {networkInfo.symbol} to {recipientUser?.name || 'recipient'}\n            </p>\n            {hash && (\n              <div className=\"transaction-hash\">\n                <p>Transaction Hash:</p>\n                <code>{hash.slice(0, 10)}...{hash.slice(-8)}</code>\n              </div>\n            )}\n            {getExplorerUrl() && (\n              <div className=\"transaction-explorer\">\n                <a \n                  href={getExplorerUrl()!} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"explorer-link\"\n                >\n                  View on {networkInfo.name} Explorer →\n                </a>\n              </div>\n            )}\n            <p className=\"auto-close\">This window will close automatically...</p>\n          </div>\n        );\n\n      case 'error':\n        return (\n          <div className=\"transaction-status\">\n            <div className=\"status-icon error\">\n              ✕\n            </div>\n            <h3>Transaction Failed</h3>\n            <div className=\"error-message\">{error}</div>\n            <div className=\"modal-footer\">\n              <button className=\"cancel-btn\" onClick={onClose}>\n                Close\n              </button>\n              <button className=\"retry-btn\" onClick={() => {\n                setStep('form');\n                setError(null);\n                resetSendTransaction();\n                if (timeoutId) {\n                  clearTimeout(timeoutId);\n                  setTimeoutId(null);\n                }\n              }}>\n                Try Again\n              </button>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"modalOverlay\">\n      <div className=\"modalContent transaction-modal\">\n        <div className=\"modal-header\">\n          <h2>Send {networkLoading ? 'Loading...' : networkInfo.symbol}</h2>\n          {(step === 'form' || step === 'error') && (\n            <button \n              className=\"closeButton\" \n              onClick={handleClose}\n            >\n              <SlClose size={20} />\n            </button>\n          )}\n        </div>\n\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default SendTransactionModal;","import { useState, useEffect } from 'react';\n\ninterface ResponsiveState {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  windowSize: { width: number; height: number };\n}\n\nexport const useResponsive = (): ResponsiveState => {\n  const [windowSize, setWindowSize] = useState({\n    width: typeof window !== 'undefined' ? window.innerWidth : 0,\n    height: typeof window !== 'undefined' ? window.innerHeight : 0,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const isMobile = windowSize.width <= 768;\n  const isTablet = windowSize.width > 768 && windowSize.width <= 1024;\n  const isDesktop = windowSize.width > 1024;\n\n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    windowSize,\n  };\n};","import React, { useState, useEffect } from \"react\";\nimport { useAccount } from \"wagmi\";\nimport \"../styles.css\";\nimport ChatSelector from \"./ChatSelector\";\nimport ChatWindow from \"./ChatWindow\";\nimport ChatContent from \"./ChatContent\";\nimport ChatHeader from \"./ChatHeader\";\nimport { collection, getDocs, doc, getDoc } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport NewChatModal from \"./NewChatModal\";\nimport SendTransactionModal, { TransactionData } from \"./SendTransactionModal\";\nimport { SendTransactionMessage } from \"./ChatBottomBar\";\nimport { LuMessageCirclePlus } from \"react-icons/lu\";\nimport { IoArrowBack } from \"react-icons/io5\";\nimport { useResponsive } from \"./useResponsive\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatData {\n  pid: string[];\n  createdAt?: any;\n  lastActivity?: any;\n}\n\nfunction Chat() {\n  const { address } = useAccount();\n  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const { setCurrentUser, currentUser } = useUser();\n  const [showNewChatModal, setShowNewChatModal] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [transactionRecipient, setTransactionRecipient] = useState<User | null>(null);\n  const [currentChatData, setCurrentChatData] = useState<ChatData | null>(null);\n  const { isMobile } = useResponsive();\n  \n  // Mobile-specific state for view management\n  const [mobileView, setMobileView] = useState<'list' | 'chat'>('list');\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const usersRef = collection(firestore, \"users\");\n        const usersSnapshot = await getDocs(usersRef);\n        const usersData = usersSnapshot.docs.map((doc) => ({\n          id: doc.id,\n          name: doc.data().name,\n          wallet: doc.data().wallet,\n        }));\n        setUsers(usersData);\n        console.log(\"Fetched users:\", usersData);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n      }\n    };\n    fetchUsers();\n  }, []);\n\n  // Fetch chat data when selectedChatId changes\n  useEffect(() => {\n    const fetchChatData = async () => {\n      if (!selectedChatId) {\n        setCurrentChatData(null);\n        return;\n      }\n\n      try {\n        const chatDoc = await getDoc(doc(firestore, \"privateChats\", selectedChatId));\n        if (chatDoc.exists()) {\n          const chatData = chatDoc.data() as ChatData;\n          setCurrentChatData(chatData);\n          console.log(\"Fetched chat data:\", chatData);\n        } else {\n          console.error(\"Chat document not found:\", selectedChatId);\n          setCurrentChatData(null);\n        }\n      } catch (error) {\n        console.error(\"Error fetching chat data:\", error);\n        setCurrentChatData(null);\n      }\n    };\n\n    fetchChatData();\n  }, [selectedChatId]);\n\n  // Update currentUser in context whenever users or address changes\n  useEffect(() => {\n    if (users.length > 0 && address) {\n      const foundCurrentUser = users.find(user => user.wallet === address);\n      console.log(\"Current User:\", foundCurrentUser);\n      setCurrentUser(foundCurrentUser);\n    }\n  }, [users, address, setCurrentUser]);\n\n  // Handler for selecting a chat room\n  const handleChatSelect = (chatId: string) => {\n    setSelectedChatId(chatId);\n    // On mobile, switch to chat view when a chat is selected\n    if (isMobile) {\n      setMobileView('chat');\n    }\n  };\n\n  // Handler for going back to chat list on mobile\n  const handleBackToList = () => {\n    if (isMobile) {\n      setMobileView('list');\n      setSelectedChatId(null);\n    }\n  };\n\n  // Handler for when a new chat is created\n  const handleChatCreated = (chatId: string) => {\n    console.log(\"New chat created with ID:\", chatId);\n    setSelectedChatId(chatId);\n    if (isMobile) {\n      setMobileView('chat');\n    }\n  };\n\n  // Helper function to get wallet by user ID\n  const getWalletById = (id: string) => {\n    const user = users.find((user) => user.id === id);\n    return user ? user.wallet : \"\";\n  };\n\n  // Get the name of the currently selected chat participant\n  const getCurrentChatName = () => {\n    const recipientUser = getRecipientUser();\n    return recipientUser ? recipientUser.name : \"Chat\";\n  };\n\n  // Get recipient user for the current chat\n  const getRecipientUser = (): User | null => {\n    console.log(\"Getting recipient user...\");\n    console.log(\"Selected chat ID:\", selectedChatId);\n    console.log(\"Current chat data:\", currentChatData);\n    console.log(\"Current address:\", address);\n    console.log(\"Available users:\", users);\n\n    if (!selectedChatId || !currentChatData || !address || users.length === 0) {\n      console.log(\"Missing required data for recipient detection\");\n      return null;\n    }\n\n    // Find the current user\n    const foundCurrentUser = users.find(user => user.wallet === address);\n    if (!foundCurrentUser) {\n      console.log(\"Current user not found in users list\");\n      return null;\n    }\n\n    console.log(\"Current user found:\", foundCurrentUser);\n\n    // Get the other participant from the chat's pid array\n    const otherParticipantId = currentChatData.pid.find(id => id !== foundCurrentUser.id);\n    if (!otherParticipantId) {\n      console.log(\"Other participant ID not found in chat data\");\n      return null;\n    }\n\n    console.log(\"Other participant ID:\", otherParticipantId);\n\n    // Find the other participant in the users list\n    const recipientUser = users.find(user => user.id === otherParticipantId);\n    console.log(\"Recipient user found:\", recipientUser);\n\n    return recipientUser || null;\n  };\n\n  // Handle sending transactions\n  const handleSendTransaction = (recipientUser: User) => {\n    console.log(\"Handle send transaction called with:\", recipientUser);\n    \n    // Validate input\n    if (!recipientUser || !recipientUser.wallet || !recipientUser.name) {\n      console.error(\"Invalid recipient user:\", recipientUser);\n      return;\n    }\n    \n    // Use functional updates for better state management\n    setTransactionRecipient(prev => {\n      console.log(\"Setting recipient from\", prev, \"to\", recipientUser);\n      return recipientUser;\n    });\n    \n    setShowTransactionModal(prev => {\n      console.log(\"Setting modal visibility from\", prev, \"to true\");\n      return true;\n    });\n  };\n\n  // Handle successful transaction\n  const handleTransactionSent = async (transactionData: TransactionData) => {\n    console.log(\"Transaction sent:\", transactionData);\n    \n    // Close the transaction modal\n    setShowTransactionModal(false);\n    setTransactionRecipient(null);\n    \n    // Send transaction message to the chat\n    if (selectedChatId && currentUser) {\n      try {\n        await SendTransactionMessage(transactionData, selectedChatId, currentUser.id);\n        console.log(\"Transaction message added to chat\");\n      } catch (error) {\n        console.error(\"Failed to add transaction message to chat:\", error);\n        // The transaction was successful but we couldn't add it to chat\n        // Could show a toast notification to the user about this\n      }\n    } else {\n      console.error(\"Missing chat ID or current user for transaction message\");\n    }\n  };\n\n  // Handle closing transaction modal\n  const handleCloseTransactionModal = () => {\n    setShowTransactionModal(false);\n    setTransactionRecipient(null);\n  };\n\n  // Log recipient user whenever it changes\n  useEffect(() => {\n    const recipient = getRecipientUser();\n    console.log(\"Recipient user updated:\", recipient);\n  }, [selectedChatId, currentChatData, users, address]);\n\n  // Desktop Layout\n  if (!isMobile) {\n    return (\n      <div className=\"chat desktop-chat\">\n        <ChatSelector\n          setSelectedChatId={handleChatSelect}\n          users={users}\n          getWalletById={getWalletById}\n          selectedChatId={selectedChatId}\n        />\n        <div className=\"desktop-chat-area\">\n          {selectedChatId ? (\n            <>\n              <ChatHeader \n                chatName={getCurrentChatName()}\n                onBack={handleBackToList}\n                showBackButton={false}\n              />\n              <ChatWindow \n                selectedChatId={selectedChatId}\n                onSendTransaction={handleSendTransaction}\n                recipientUser={getRecipientUser()}\n              >\n                <ChatContent\n                  selectedChatId={selectedChatId}\n                  users={users}\n                  getWalletById={getWalletById}\n                  onSendTransaction={handleSendTransaction}\n                  recipientUser={getRecipientUser()}\n                />\n              </ChatWindow>\n            </>\n          ) : (\n            <div className=\"desktop-chat-placeholder\">\n              <h2>Select a chat to start messaging</h2>\n              <p>Choose a conversation from the sidebar or create a new one</p>\n            </div>\n          )}\n        </div>\n        <button \n          className=\"createChatButton desktop-create-chat\" \n          onClick={() => setShowNewChatModal(true)}\n          title=\"Start new chat\"\n        >\n          <LuMessageCirclePlus size={24} />\n        </button>\n\n        {showNewChatModal && (\n          <NewChatModal \n            onClose={() => setShowNewChatModal(false)} \n            onChatCreated={handleChatCreated}\n          />\n        )}\n\n        {showTransactionModal && transactionRecipient && (\n          <SendTransactionModal\n            onClose={handleCloseTransactionModal}\n            recipientUser={transactionRecipient}\n            onTransactionSent={handleTransactionSent}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // Mobile Layout\n  return (\n    <div className=\"chat mobile-chat\">\n      {mobileView === 'list' ? (\n        // Mobile Chat List View\n        <div className=\"mobile-chat-list\">\n          <ChatHeader \n            chatName=\"Chats\"\n            onBack={handleBackToList}\n            showBackButton={false}\n            showProfilePic={true}\n          />\n          <div className=\"mobile-chat-selector\">\n            <ChatSelector\n              setSelectedChatId={handleChatSelect}\n              users={users}\n              getWalletById={getWalletById}\n              selectedChatId={selectedChatId}\n            />\n          </div>\n          <button \n            className=\"createChatButton mobile-create-chat\" \n            onClick={() => setShowNewChatModal(true)}\n            title=\"Start new chat\"\n          >\n            <LuMessageCirclePlus size={28} />\n          </button>\n        </div>\n      ) : (\n        // Mobile Chat View\n        <div className=\"mobile-chat-window\">\n          <ChatHeader \n            chatName={getCurrentChatName()}\n            onBack={handleBackToList}\n            showBackButton={true}\n          />\n          {selectedChatId && (\n            <ChatWindow \n              selectedChatId={selectedChatId}\n              onSendTransaction={handleSendTransaction}\n              recipientUser={getRecipientUser()}\n            >\n              <ChatContent\n                selectedChatId={selectedChatId}\n                users={users}\n                getWalletById={getWalletById}\n                onSendTransaction={handleSendTransaction}\n                recipientUser={getRecipientUser()}\n              />\n            </ChatWindow>\n          )}\n        </div>\n      )}\n      \n      {showNewChatModal && (\n        <NewChatModal \n          onClose={() => setShowNewChatModal(false)} \n          onChatCreated={handleChatCreated}\n        />\n      )}\n\n      {showTransactionModal && transactionRecipient && (\n        <SendTransactionModal\n          onClose={handleCloseTransactionModal}\n          recipientUser={transactionRecipient}\n          onTransactionSent={handleTransactionSent}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chat;","import React, { useState } from 'react';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { useAccount } from 'wagmi';\nimport { SlLogin } from \"react-icons/sl\";\nimport { firestore } from './Firebase'; \nimport { useNavigate } from 'react-router-dom';\n\nfunction ProceedButton() {\n  const { address } = useAccount();\n  const [userExists, setUserExists] = useState<boolean | null>(null);\n  const navigate = useNavigate();\n\n  const checkUser = async (walletAddress: string) => {\n    const usersCollection = collection(firestore, 'users');\n    const q = query(usersCollection, where('wallet', '==', walletAddress));\n\n    try {\n      const querySnapshot = await getDocs(q);\n      const userFound = !querySnapshot.empty;\n      console.log(\"User found:\", userFound);\n      setUserExists(userFound);\n\n      if (userFound) {\n        navigate('/chat'); // Redirect to Chat page if user is found\n      } else {\n        navigate('/signup'); // Redirect to Signup page if user is not found\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      setUserExists(false);\n      navigate('/signup'); // Redirect to Signup page on error\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className=\"proceedButton\"\n        onClick={() => {\n          if (address) {\n            checkUser(address);\n          } else {\n            console.error(\"Address is undefined\");\n          }\n        }}\n      >\n        <SlLogin size={28} />\n        <span>Proceed</span>\n      </button>\n      {userExists !== null && (\n        <p>{userExists ? 'User exists' : 'User does not exist'}</p>\n      )}\n    </div>\n  );\n}\n\nexport default ProceedButton;\n","import React, { useCallback } from 'react';\nimport { SlClose } from 'react-icons/sl';\nimport { useAccount, useDisconnect } from 'wagmi';\n\nfunction WalletMenu() {\n  const { address, isConnected } = useAccount();\n  const { disconnect } = useDisconnect();\n  \n  const handleDisconnect = useCallback(async () => {\n    try {\n      console.log(\"Starting disconnect process...\");\n      \n      // Step 1: Clear localStorage immediately to prevent auto-reconnection\n      localStorage.removeItem('walletconnect');\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('connectorId');\n      localStorage.removeItem('lastConnectedAddress');\n      \n      // Step 2: Clear any Web3Modal related storage\n      const keysToRemove = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && (\n          key.startsWith('w3m-') || \n          key.startsWith('wagmi.') ||\n          key.startsWith('wc@2:') ||\n          key.includes('walletconnect')\n        )) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      keysToRemove.forEach(key => {\n        try {\n          localStorage.removeItem(key);\n        } catch (error) {\n          console.warn(`Failed to remove ${key}:`, error);\n        }\n      });\n      \n      // Step 3: Clear sessionStorage as well\n      try {\n        const sessionKeysToRemove = [];\n        for (let i = 0; i < sessionStorage.length; i++) {\n          const key = sessionStorage.key(i);\n          if (key && (\n            key.startsWith('w3m-') || \n            key.startsWith('wagmi.') ||\n            key.startsWith('wc@2:') ||\n            key.includes('walletconnect')\n          )) {\n            sessionKeysToRemove.push(key);\n          }\n        }\n        \n        sessionKeysToRemove.forEach(key => {\n          try {\n            sessionStorage.removeItem(key);\n          } catch (error) {\n            console.warn(`Failed to remove session ${key}:`, error);\n          }\n        });\n      } catch (error) {\n        console.warn(\"Error clearing sessionStorage:\", error);\n      }\n      \n      // Step 4: Clear IndexedDB for WalletConnect (if accessible)\n      try {\n        if ('indexedDB' in window) {\n          const deleteDB = (dbName: string) => {\n            return new Promise((resolve, reject) => {\n              const deleteReq = indexedDB.deleteDatabase(dbName);\n              deleteReq.onsuccess = () => resolve(true);\n              deleteReq.onerror = () => reject(deleteReq.error);\n              deleteReq.onblocked = () => {\n                console.warn(`Database ${dbName} deletion blocked`);\n                resolve(false);\n              };\n            });\n          };\n          \n          // Common WalletConnect database names\n          const dbNames = ['walletconnect-v2', 'keyvaluestorage'];\n          await Promise.allSettled(dbNames.map(dbName => deleteDB(dbName)));\n        }\n      } catch (error) {\n        console.warn(\"Error clearing IndexedDB:\", error);\n      }\n      \n      // Step 5: Disconnect via wagmi (this should be after clearing storage)\n      disconnect();\n      \n      // Step 6: Force a small delay to ensure state is cleared\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      console.log(\"Disconnect process completed\");\n      \n      // Step 7: Optional - reload page for complete reset (uncomment if needed)\n      // setTimeout(() => {\n      //   window.location.reload();\n      // }, 500);\n      \n    } catch (error) {\n      console.error(\"Error during disconnect:\", error);\n      \n      // Force disconnect even if there's an error\n      disconnect();\n      \n      // Clear critical localStorage items as fallback\n      try {\n        localStorage.clear();\n        sessionStorage.clear();\n      } catch (clearError) {\n        console.error(\"Failed to clear storage:\", clearError);\n      }\n      \n      // Reload page as last resort\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    }\n  }, [disconnect]);\n  \n  return (\n    <div className=\"wallet-button\">\n      {isConnected && address ? (\n        <div className='walletBubble'>\n          <div className=\"address\">\n            {address.slice(0, 6)}...{address.slice(-4)}\n          </div>\n          <button \n            onClick={handleDisconnect}\n            title=\"Disconnect wallet\"\n            aria-label=\"Disconnect wallet\"\n          >\n            <SlClose size={25} />\n          </button>\n        </div>\n      ) : (\n        // Directly use the web3modal button\n        <w3m-connect-button />\n      )}\n    </div>\n  );\n}\n\nexport default WalletMenu;","import React, { useState, useEffect, useCallback } from \"react\";\nimport ConnectButton from \"./ConnectButton\";\nimport \"../styles.css\";\nimport { useAccount, useConnect, useDisconnect } from \"wagmi\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProceedButton from \"./ProceedButton\";\nimport WalletMenu from \"./WalletMenu\";\nimport { useResponsive } from \"./useResponsive\";\n\nfunction HomePage() {\n  const { address, isConnected, connector } = useAccount();\n  const { connect, connectors } = useConnect();\n  const { disconnect } = useDisconnect();\n  const [connected, setConnected] = useState(isConnected);\n  const navigate = useNavigate();\n  const { isMobile } = useResponsive();\n\n  // Enhanced reconnection logic with better persistence handling\n  const attemptReconnection = useCallback(async () => {\n    const wasConnected = localStorage.getItem('walletConnected') === 'true';\n    const lastConnectedAddress = localStorage.getItem('lastConnectedAddress');\n    \n    // Only attempt reconnection if we have clear evidence of a previous connection\n    if (!wasConnected || !lastConnectedAddress || isConnected) {\n      console.log(\"No previous connection or already connected, skipping reconnection\");\n      return;\n    }\n\n    console.log(\"Attempting to reconnect wallet automatically...\");\n    console.log(\"Last connected address:\", lastConnectedAddress);\n    \n    try {\n      // Find the right connector\n      const savedConnectorId = localStorage.getItem('connectorId');\n      console.log(\"Last used connector:\", savedConnectorId);\n      \n      if (savedConnectorId) {\n        const matchingConnector = connectors.find(c => c.id === savedConnectorId);\n        if (matchingConnector) {\n          console.log(\"Reconnecting with saved connector:\", savedConnectorId);\n          \n          // Set a reasonable timeout for the connection attempt\n          const connectionPromise = connect({ connector: matchingConnector });\n          const timeoutPromise = new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Connection timeout')), 15000)\n          );\n          \n          try {\n            await Promise.race([connectionPromise, timeoutPromise]);\n            console.log(\"Reconnection successful\");\n          } catch (error) {\n            console.error(\"Failed to reconnect with saved connector:\", error);\n            \n            // Only clear the saved connector if it's a permanent failure\n            if (error instanceof Error && error.message.includes('timeout')) {\n              console.log(\"Connection timed out, keeping connector for retry\");\n            } else {\n              localStorage.removeItem('connectorId');\n              localStorage.removeItem('walletConnected');\n              localStorage.removeItem('lastConnectedAddress');\n            }\n          }\n        } else {\n          console.log(\"Saved connector not found in available connectors\");\n          localStorage.removeItem('connectorId');\n        }\n      } else {\n        // Only try injected connector if there are no saved preferences\n        const injectedConnector = connectors.find(c => c.id === 'injected');\n        if (injectedConnector && typeof window !== 'undefined' && window.ethereum) {\n          console.log(\"No saved connector, trying injected...\");\n          try {\n            const connectionPromise = connect({ connector: injectedConnector });\n            const timeoutPromise = new Promise((_, reject) => \n              setTimeout(() => reject(new Error('Connection timeout')), 10000)\n            );\n            \n            await Promise.race([connectionPromise, timeoutPromise]);\n            console.log(\"Injected connector reconnection successful\");\n          } catch (error) {\n            console.error(\"Failed to connect with injected connector:\", error);\n            // Don't clear localStorage for injected connector failures\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error during reconnection attempt:\", error);\n      // Only clear on serious errors, not connection failures\n      if (error instanceof Error && error.message.includes('network')) {\n        console.log(\"Network error during reconnection, will retry later\");\n      }\n    }\n  }, [connect, connectors, isConnected]);\n\n  // Try to automatically reconnect on page load with delay\n  useEffect(() => {\n    // Longer delay to ensure connectors are ready and avoid conflicts\n    const reconnectTimer = setTimeout(() => {\n      attemptReconnection();\n    }, 1500);\n\n    return () => clearTimeout(reconnectTimer);\n  }, [attemptReconnection]);\n\n  // Listen for connection changes with improved persistence handling\n  useEffect(() => {\n    console.log(\"Connection state changed:\", isConnected ? \"connected\" : \"disconnected\");\n    console.log(\"Current connector:\", connector?.id);\n    console.log(\"Address:\", address);\n    \n    // Update local state\n    setConnected(isConnected);\n    \n    // Handle new connections (preserve persistence)\n    if (isConnected && !connected && address) {\n      console.log(\"Wallet newly connected:\", address);\n      \n      // Save connection state for persistence\n      localStorage.setItem('walletConnected', 'true');\n      localStorage.setItem('lastConnectedAddress', address);\n      localStorage.setItem('connectorId', connector?.id || '');\n      \n      console.log(\"Saved connection state for persistence\");\n    }\n    \n    // Handle disconnections (but preserve manual disconnect intent)\n    if (!isConnected && connected) {\n      console.log(\"Wallet disconnected\");\n      \n      // Check if this was a manual disconnect\n      const manualDisconnect = localStorage.getItem('manualDisconnect') === 'true';\n      \n      if (manualDisconnect) {\n        // Clear all connection data for manual disconnects\n        localStorage.removeItem('walletConnected');\n        localStorage.removeItem('lastConnectedAddress');\n        localStorage.removeItem('connectorId');\n        localStorage.removeItem('manualDisconnect');\n        console.log(\"Manual disconnect - cleared all connection data\");\n      } else {\n        // For automatic disconnects, keep some data for potential reconnection\n        console.log(\"Automatic disconnect - keeping connection data for potential reconnection\");\n        // Don't clear walletConnected to allow reconnection attempts\n      }\n    }\n  }, [isConnected, address, connected, connector]);\n\n  // Enhanced focus handling with better persistence\n  useEffect(() => {\n    const handleFocus = async () => {\n      console.log(\"Page gained focus, checking connection state\");\n      \n      // Check if the connection state is consistent\n      if (connected && !isConnected) {\n        console.log(\"Connection lost while page was inactive, updating UI\");\n        setConnected(false);\n        \n        // Don't immediately clear storage - might be temporary\n        const shouldReconnect = localStorage.getItem('walletConnected') === 'true';\n        if (shouldReconnect) {\n          console.log(\"Attempting reconnection after focus\");\n          setTimeout(() => {\n            attemptReconnection();\n          }, 1000);\n        }\n      }\n      \n      // If we should be connected but aren't, try to reconnect\n      const shouldBeConnected = localStorage.getItem('walletConnected') === 'true';\n      const timeSinceLastTry = Date.now() - (parseInt(localStorage.getItem('lastReconnectAttempt') || '0'));\n      \n      if (shouldBeConnected && !isConnected && timeSinceLastTry > 30000) { // 30 second cooldown\n        console.log(\"Should be connected but aren't, attempting reconnection\");\n        localStorage.setItem('lastReconnectAttempt', Date.now().toString());\n        await attemptReconnection();\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    \n    return () => {\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, [connected, isConnected, attemptReconnection]);\n\n  // Manual disconnect handler with clear intent marking\n  const handleDisconnect = useCallback(async () => {\n    try {\n      console.log(\"Manual disconnect initiated by user\");\n      \n      // Mark this as a manual disconnect\n      localStorage.setItem('manualDisconnect', 'true');\n      \n      // Update UI state immediately\n      setConnected(false);\n      \n      // Clear all persistence data immediately for manual disconnects\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('lastConnectedAddress');\n      localStorage.removeItem('connectorId');\n      localStorage.removeItem('lastReconnectAttempt');\n      \n      console.log(\"Manual disconnect - cleared all persistence data\");\n      \n      // Disconnect via wagmi\n      disconnect();\n      \n      // Clear the manual disconnect flag after a delay\n      setTimeout(() => {\n        localStorage.removeItem('manualDisconnect');\n      }, 2000);\n      \n    } catch (error) {\n      console.error(\"Error during manual disconnect:\", error);\n      \n      // Force clear state even if there's an error\n      setConnected(false);\n      \n      // Clear all storage as fallback\n      try {\n        const keysToRemove = Object.keys(localStorage).filter(key => \n          key.includes('wallet') || \n          key.includes('w3m') || \n          key.includes('wagmi') ||\n          key.includes('connector') ||\n          key.includes('Reconnect')\n        );\n        \n        keysToRemove.forEach(key => localStorage.removeItem(key));\n        console.log(\"Cleared all wallet-related storage\");\n      } catch (clearError) {\n        console.error(\"Failed to clear storage:\", clearError);\n      }\n    }\n  }, [disconnect]);\n\n  // Handle connection errors without being too aggressive\n  useEffect(() => {\n    const handleConnectorError = (data: { error: Error } & { uid: string }) => {\n      console.error(\"Connector error:\", data.error);\n      \n      // Only clear state for serious errors, not temporary ones\n      if (data.error.message.includes('User rejected') || \n          data.error.message.includes('User denied') ||\n          data.error.message.includes('user cancelled')) {\n        console.log(\"User rejected connection, clearing state\");\n        localStorage.removeItem('walletConnected');\n        localStorage.removeItem('connectorId');\n        setConnected(false);\n      } else {\n        console.log(\"Temporary connector error, not clearing state\");\n      }\n    };\n\n    // Listen for connector errors if available\n    if (connector?.emitter) {\n      connector.emitter.on('error', handleConnectorError);\n      \n      return () => {\n        connector.emitter?.off('error', handleConnectorError);\n      };\n    }\n  }, [connector]);\n\n  // Periodic reconnection attempt for persistent connections\n  useEffect(() => {\n    if (!isConnected) {\n      const shouldReconnect = localStorage.getItem('walletConnected') === 'true';\n      \n      if (shouldReconnect) {\n        const interval = setInterval(() => {\n          const lastAttempt = parseInt(localStorage.getItem('lastReconnectAttempt') || '0');\n          const timeSinceLastTry = Date.now() - lastAttempt;\n          \n          // Try reconnecting every 2 minutes if we should be connected\n          if (timeSinceLastTry > 120000) {\n            console.log(\"Periodic reconnection attempt\");\n            localStorage.setItem('lastReconnectAttempt', Date.now().toString());\n            attemptReconnection();\n          }\n        }, 60000); // Check every minute\n        \n        return () => clearInterval(interval);\n      }\n    }\n  }, [isConnected, attemptReconnection]);\n\n  return (\n    <div className={`homepage ${isMobile ? 'mobile-homepage' : 'desktop-homepage'}`}>\n      <div className=\"title\">\n        <h1>Chat 3.0 is here.</h1>\n        <h2>Your personal web3 companion.</h2>\n      </div>\n      <div>\n        <div className=\"login\">\n          <h3>\n            {connected \n              ? `Connected ${connector?.id ? `(${connector.id})` : \"\"}` \n              : \"Connect your wallet\"}\n          </h3>\n          <WalletMenu />\n          {connected && <ProceedButton />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;","import React, { useState, useEffect, useCallback } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { \n  getFirestore, \n  getDocs, \n  collection, \n  addDoc, \n  query, \n  orderBy, \n  limit, \n  where,\n  onSnapshot,\n  Unsubscribe\n} from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles.css\";\n\nfunction Signup() {\n  const { address, isConnected } = useAccount();\n  const navigate = useNavigate();\n  const [name, setName] = useState(\"\");\n  const [data, setData] = useState<any>(null);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const [checkingUser, setCheckingUser] = useState(true);\n\n  // Enhanced user existence check with retry logic\n  const checkUserExists = useCallback(async (retryCount = 0) => {\n    if (!address) {\n      setCheckingUser(false);\n      return;\n    }\n    \n    setCheckingUser(true);\n    \n    try {\n      console.log(`Checking if user exists (attempt ${retryCount + 1}):`, address);\n      \n      const usersCollection = collection(firestore, 'users');\n      const q = query(usersCollection, where('wallet', '==', address));\n      const querySnapshot = await getDocs(q);\n      \n      const exists = !querySnapshot.empty;\n      setUserExists(exists);\n      \n      console.log(\"User exists:\", exists);\n      \n      // If user already exists, redirect to chat\n      if (exists) {\n        console.log(\"User already exists, redirecting to chat\");\n        navigate('/chat');\n      }\n    } catch (error) {\n      console.error(\"Error checking if user exists:\", error);\n      \n      // Retry logic for network issues\n      if (retryCount < 3) {\n        console.log(\"Retrying user existence check...\");\n        setTimeout(() => {\n          checkUserExists(retryCount + 1);\n        }, 1000 * (retryCount + 1)); // Exponential backoff\n        return;\n      }\n      \n      // If all retries failed, assume user doesn't exist to allow registration\n      setUserExists(false);\n    } finally {\n      setCheckingUser(false);\n    }\n  }, [address, navigate]);\n\n  // Check if user already exists when component mounts or address changes\n  useEffect(() => {\n    checkUserExists();\n  }, [checkUserExists]);\n\n  // Redirect to home if wallet is disconnected\n  useEffect(() => {\n    if (!isConnected) {\n      console.log(\"Wallet disconnected, redirecting to home\");\n      navigate('/');\n    }\n  }, [isConnected, navigate]);\n\n  // Enhanced data fetching with error handling\n  const fetchData = useCallback(async () => {\n    try {\n      const usersCollection = collection(firestore, 'users');\n      const q = query(usersCollection, orderBy('name'), limit(10));\n      const querySnapshot = await getDocs(q);\n\n      const usersData = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      setData({ users: usersData });\n      console.log(\"Fetched user data:\", usersData);\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n      // Don't block the UI if fetching sample data fails\n      setData({ users: [] });\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Enhanced registration with better error handling and timeout\n  const writeData = useCallback(async () => {\n    if (!address || !name.trim()) {\n      console.error(\"Missing required data: address or name\");\n      return;\n    }\n\n    if (userExists) {\n      console.log(\"User already exists, cannot register again\");\n      return;\n    }\n\n    setIsRegistering(true);\n    console.log(\"Starting registration process:\", address, name.trim());\n\n    try {\n      // Double-check user doesn't exist before writing\n      const usersCollection = collection(firestore, 'users');\n      const existingUserQuery = query(usersCollection, where('wallet', '==', address));\n      const existingUserSnapshot = await getDocs(existingUserQuery);\n      \n      if (!existingUserSnapshot.empty) {\n        console.log(\"User already exists during registration attempt, redirecting\");\n        setUserExists(true);\n        setIsRegistering(false);\n        navigate('/chat');\n        return;\n      }\n\n      // Set up onSnapshot listener with timeout before adding the document\n      let listenerTimeout: number | null = null;\n      let registrationCompleted = false;\n      \n      const unsubscribe: Unsubscribe = onSnapshot(\n        query(usersCollection, where('wallet', '==', address)),\n        (snapshot) => {\n          if (!snapshot.empty && !registrationCompleted) {\n            // User has been successfully created\n            registrationCompleted = true;\n            console.log(\"User successfully registered, redirecting to chat\");\n            \n            if (listenerTimeout) {\n              clearTimeout(listenerTimeout);\n            }\n            \n            unsubscribe(); // Clean up the listener\n            navigate('/chat');\n          }\n        },\n        (error) => {\n          console.error(\"Error in registration listener:\", error);\n          setIsRegistering(false);\n          \n          if (listenerTimeout) {\n            clearTimeout(listenerTimeout);\n          }\n        }\n      );\n\n      // Set a timeout to clean up the listener if something goes wrong\n      listenerTimeout = window.setTimeout(() => {\n        if (!registrationCompleted) {\n          console.log(\"Registration listener timeout, attempting manual check\");\n          unsubscribe();\n          \n          // Manual check if user was actually created\n          checkUserExists().then(() => {\n            setIsRegistering(false);\n          });\n        }\n      }, 15000); // 15 second timeout\n\n      // Add the new user document\n      const docRef = await addDoc(usersCollection, {\n        wallet: address,\n        name: name.trim(),\n        createdAt: new Date(),\n        chats: [] // Initialize empty chats array\n      });\n      \n      console.log(\"Registration document written with ID:\", docRef.id);\n      \n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n      setIsRegistering(false);\n      \n      // Show user-friendly error message\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      if (errorMessage.includes('permission') || errorMessage.includes('rules')) {\n        alert('Registration failed: Permission denied. Please try again or contact support.');\n      } else if (errorMessage.includes('network') || errorMessage.includes('offline')) {\n        alert('Registration failed: Network error. Please check your connection and try again.');\n      } else {\n        alert('Registration failed: ' + errorMessage);\n      }\n    }\n  }, [address, name, userExists, navigate, checkUserExists]);\n\n  // Handle Enter key press in input field\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && !isRegistering && !userExists && name.trim()) {\n      writeData();\n    }\n  }, [writeData, isRegistering, userExists, name]);\n\n  // Enhanced input validation\n  const isValidName = useCallback((inputName: string) => {\n    const trimmedName = inputName.trim();\n    return trimmedName.length >= 2 && trimmedName.length <= 50 && /^[a-zA-Z0-9\\s._-]+$/.test(trimmedName);\n  }, []);\n\n  // Show loading state while checking if user exists\n  if (checkingUser) {\n    return (\n      <div className=\"centered-signup\">\n        <div className=\"welcomeText\">\n          <h1>Checking registration status...</h1>\n          <h2>Please wait</h2>\n        </div>\n        <div style={{ marginTop: '20px', color: '#ccc' }}>\n          <p>Wallet: {address}</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show message if user already exists\n  if (userExists) {\n    return (\n      <div className=\"centered-signup\">\n        <div className=\"welcomeText\">\n          <h1>Already Registered</h1>\n          <h2>You're already signed up! Redirecting to chat...</h2>\n        </div>\n        <p>Wallet Address: {address}</p>\n      </div>\n    );\n  }\n\n  // Show error if no wallet is connected\n  if (!isConnected || !address) {\n    return (\n      <div className=\"centered-signup\">\n        <div className=\"welcomeText\">\n          <h1>Wallet Not Connected</h1>\n          <h2>Please connect your wallet to continue</h2>\n        </div>\n        <button\n          onClick={() => navigate('/')}\n          style={{\n            padding: '12px 24px',\n            backgroundColor: '#50b458',\n            color: 'white',\n            border: 'none',\n            borderRadius: '8px',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Go Back to Home\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"centered-signup\">\n      <div className=\"welcomeText\">\n        <h1>Welcome to Chat 3.0</h1>\n        <h2>One last step to start chatting</h2>\n      </div>\n      \n      <div style={{ marginBottom: '20px', color: '#ccc' }}>\n        <p>Wallet: {address.slice(0, 6)}...{address.slice(-4)}</p>\n      </div>\n\n      <div className=\"signupBox\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter your display name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          onKeyPress={handleKeyPress}\n          disabled={isRegistering}\n          maxLength={50}\n          minLength={2}\n          autoComplete=\"off\"\n          autoFocus\n        />\n        \n        <button \n          onClick={writeData}\n          disabled={isRegistering || !name.trim() || !isValidName(name)}\n          title={!isValidName(name) && name.trim() ? 'Name must be 2-50 characters and contain only letters, numbers, spaces, dots, hyphens, and underscores' : ''}\n        >\n          {isRegistering ? \"Registering...\" : \"Register\"}\n        </button>\n      </div>\n      \n      {/* Validation feedback */}\n      {name.trim() && !isValidName(name) && (\n        <p style={{ color: '#ff4444', fontSize: '14px', marginTop: '10px', textAlign: 'center' }}>\n          Name must be 2-50 characters and contain only letters, numbers, spaces, dots, hyphens, and underscores\n        </p>\n      )}\n      \n      {isRegistering && (\n        <p style={{ color: '#50b458', marginTop: '15px', textAlign: 'center' }}>\n          Creating your account, please wait...\n        </p>\n      )}\n      \n      {/* Retry button if there was an error */}\n      {!isRegistering && !userExists && data?.users && (\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          <button\n            onClick={() => checkUserExists()}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: 'transparent',\n              color: '#50b458',\n              border: '1px solid #50b458',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '14px'\n            }}\n          >\n            Retry Check\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Signup;","import React, { useEffect, useRef, useCallback } from 'react';\nimport { useAccount, useDisconnect } from 'wagmi';\n\n// Define a basic type for WalletConnect provider\ninterface WalletConnectProvider {\n  session?: unknown;\n  connected?: boolean;\n  disconnect?: () => Promise<void>;\n}\n\n// This component doesn't render anything visible\n// It just listens for connection events and handles them\nconst ConnectionListener: React.FC = () => {\n  const { address, isConnected, status, connector } = useAccount();\n  const { disconnect } = useDisconnect();\n  const prevConnectedRef = useRef(isConnected);\n  const checkIntervalRef = useRef<number | null>(null);\n  const isManualDisconnectRef = useRef(false);\n  const lastValidationTimeRef = useRef(0);\n\n  // Less aggressive connection validation - only check for obvious failures\n  const validateConnection = useCallback(async (): Promise<boolean> => {\n    // Throttle validation calls to prevent excessive checks\n    const now = Date.now();\n    if (now - lastValidationTimeRef.current < 5000) { // 5 second throttle (increased)\n      return isConnected;\n    }\n    lastValidationTimeRef.current = now;\n\n    try {\n      if (!isConnected || !connector) {\n        return false;\n      }\n\n      // Check if we're in the middle of manual disconnecting\n      if (isManualDisconnectRef.current) {\n        return false;\n      }\n\n      // Only validate for specific, clear failure cases\n      if (connector.id === 'walletConnect') {\n        try {\n          const provider = await connector.getProvider();\n          const wcProvider = provider as WalletConnectProvider;\n          \n          // Only disconnect if session is explicitly null/undefined and connected is false\n          if (wcProvider.session === null && wcProvider.connected === false) {\n            console.log(\"WalletConnect session explicitly ended\");\n            return false;\n          }\n        } catch (error) {\n          // Don't force disconnect on provider errors - might be temporary\n          console.warn(\"WalletConnect provider check error (not disconnecting):\", error);\n          return true; // Assume connection is still valid\n        }\n      }\n\n      // For injected providers, only check if explicitly disconnected\n      if (connector.id === 'injected' && typeof window !== 'undefined' && window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          if (!accounts || accounts.length === 0) {\n            console.log(\"No accounts available from injected provider\");\n            return false;\n          }\n        } catch (error) {\n          // Don't force disconnect on errors - might be temporary network issues\n          console.warn(\"Injected provider check error (not disconnecting):\", error);\n          return true; // Assume connection is still valid\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.warn(\"Error validating connection (assuming valid):\", error);\n      return true; // Default to assuming connection is valid\n    }\n  }, [isConnected, connector]);\n\n  // Force disconnect only in clear failure cases\n  const forceDisconnect = useCallback(async () => {\n    if (isManualDisconnectRef.current) {\n      return; // Already disconnecting\n    }\n\n    // Set flag to prevent validation during disconnect\n    isManualDisconnectRef.current = true;\n    \n    try {\n      console.log(\"Forcing disconnect due to clear connection failure\");\n      \n      // Clear localStorage\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('lastConnectedAddress');\n      localStorage.removeItem('connectorId');\n      \n      // Disconnect via wagmi\n      disconnect();\n      \n    } catch (error) {\n      console.error(\"Error during force disconnect:\", error);\n    } finally {\n      setTimeout(() => {\n        isManualDisconnectRef.current = false;\n      }, 3000);\n    }\n  }, [disconnect]);\n\n  // Main connection status handler\n  useEffect(() => {\n    console.log(\"Connection status changed:\", status);\n    console.log(\"Is connected:\", isConnected);\n    console.log(\"Current connector:\", connector?.id);\n    \n    // Detect disconnection\n    if (prevConnectedRef.current && !isConnected && !isManualDisconnectRef.current) {\n      console.log(\"Detected disconnection, cleaning up state\");\n      \n      // Clear localStorage\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('lastConnectedAddress');\n      localStorage.removeItem('connectorId');\n    }\n    \n    // Update localStorage based on connection state\n    if (isConnected && address && !isManualDisconnectRef.current) {\n      localStorage.setItem('walletConnected', 'true');\n      localStorage.setItem('lastConnectedAddress', address);\n      localStorage.setItem('connectorId', connector?.id || '');\n      console.log(\"Saved connection state to localStorage\");\n    } else if (!isConnected && !isManualDisconnectRef.current) {\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('lastConnectedAddress');\n      localStorage.removeItem('connectorId');\n      console.log(\"Removed connection state from localStorage\");\n    }\n    \n    prevConnectedRef.current = isConnected;\n  }, [isConnected, address, status, connector]);\n\n  // Much less aggressive periodic validation - only for obvious failures\n  useEffect(() => {\n    const startPeriodicCheck = () => {\n      if (checkIntervalRef.current) {\n        clearInterval(checkIntervalRef.current);\n      }\n\n      const checkConnection = async () => {\n        try {\n          if (isConnected && !isManualDisconnectRef.current) {\n            const isValid = await validateConnection();\n            \n            // Only force disconnect for clear, obvious failures\n            if (!isValid) {\n              console.log(\"Clear connection failure detected, forcing disconnect\");\n              await forceDisconnect();\n            }\n          }\n        } catch (error) {\n          console.warn(\"Error in periodic connection check (not disconnecting):\", error);\n          // Don't force disconnect on check errors\n        }\n      };\n\n      // Much longer interval - only check every 30 seconds\n      checkIntervalRef.current = window.setInterval(checkConnection, 30000);\n    };\n\n    if (isConnected) {\n      startPeriodicCheck();\n    } else if (checkIntervalRef.current) {\n      clearInterval(checkIntervalRef.current);\n      checkIntervalRef.current = null;\n    }\n    \n    return () => {\n      if (checkIntervalRef.current) {\n        clearInterval(checkIntervalRef.current);\n        checkIntervalRef.current = null;\n      }\n    };\n  }, [isConnected, validateConnection, forceDisconnect]);\n\n  // Enhanced visibility change handler - but less aggressive\n  useEffect(() => {\n    const handleVisibilityChange = async () => {\n      if (document.visibilityState === 'visible') {\n        console.log(\"Page is now visible, gentle connection check\");\n        \n        // Wait longer for the page to fully load\n        setTimeout(async () => {\n          if (isConnected && !isManualDisconnectRef.current) {\n            try {\n              const isValid = await validateConnection();\n              \n              // Only disconnect for clear failures\n              if (!isValid) {\n                console.log(\"Clear connection failure after page became visible\");\n                await forceDisconnect();\n              }\n            } catch (error) {\n              console.warn(\"Error checking connection on visibility change (ignoring):\", error);\n              // Don't force disconnect on errors\n            }\n          }\n        }, 2000); // Longer delay\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [isConnected, validateConnection, forceDisconnect]);\n\n  // Network change detection with manual disconnect tracking\n  useEffect(() => {\n    const handleNetworkChange = (chainId: string) => {\n      console.log(\"Network change detected to chain:\", chainId);\n      // Reset validation timer to trigger immediate check, but don't force disconnect\n      lastValidationTimeRef.current = 0;\n    };\n\n    const handleAccountsChanged = (accounts: string[]) => {\n      console.log(\"Accounts changed:\", accounts);\n      if (accounts.length === 0 && isConnected && !isManualDisconnectRef.current) {\n        console.log(\"All accounts removed by user, forcing disconnect\");\n        forceDisconnect();\n      }\n    };\n\n    if (typeof window !== 'undefined' && window.ethereum) {\n      window.ethereum.on?.('chainChanged', handleNetworkChange);\n      window.ethereum.on?.('accountsChanged', handleAccountsChanged);\n      \n      return () => {\n        window.ethereum.removeListener?.('chainChanged', handleNetworkChange);\n        window.ethereum.removeListener?.('accountsChanged', handleAccountsChanged);\n      };\n    }\n  }, [isConnected, forceDisconnect]);\n\n  // Track manual disconnects from WalletMenu\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'manualDisconnect' && e.newValue === 'true') {\n        console.log(\"Manual disconnect detected\");\n        isManualDisconnectRef.current = true;\n        \n        // Reset flag after a delay\n        setTimeout(() => {\n          isManualDisconnectRef.current = false;\n        }, 5000);\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  return null; // This component doesn't render anything\n};\n\nexport default ConnectionListener;","import React, { ReactNode, useEffect } from 'react';\nimport { createWeb3Modal } from '@web3modal/wagmi/react';\nimport { useAccount } from 'wagmi';\nimport { mainnet, arbitrum, bsc, polygon, optimism, base } from 'viem/chains';\nimport { WagmiProvider, createConfig, http } from 'wagmi';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { walletConnect, injected, coinbaseWallet } from 'wagmi/connectors';\nimport { authConnector } from '@web3modal/wagmi';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Chat from \"./components/Chat\";\nimport HomePage from \"./components/HomePage\";\nimport { UserProvider } from \"./components/UserContext\";\nimport Signup from \"./components/Signup\";\nimport ConnectionListener from \"./components/ConnectionListener\";\nimport NetworkDebugger from \"./components/NetworkDebugger\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 3,\n      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      refetchOnWindowFocus: true,\n      refetchOnReconnect: true,\n    },\n  },\n});\n\nconst projectId = import.meta.env.VITE_WAGMI_PROJECTID;\n\nif (!projectId) throw new Error(\"Project ID is undefined\");\n\nconst metadata = {\n  name: \"TokenChat\",\n  description: \"Web3 Chat Application\",\n  url: \"https://c4ctus96.github.io/tokenchat\",\n  icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n};\n\n// Include more chains including BSC\nconst chains = [mainnet, bsc, polygon, arbitrum, optimism, base] as const;\n\n// Create the wagmi config with completely free public RPC endpoints\nconst wagmiConfig = createConfig({\n  chains,\n  transports: {\n    // Use completely free public RPC endpoints that don't require API keys\n    [mainnet.id]: http('https://ethereum-rpc.publicnode.com'),\n    [bsc.id]: http('https://bsc-dataseed1.defibit.io'),\n    [polygon.id]: http('https://polygon-rpc.com'),\n    [arbitrum.id]: http('https://arbitrum-one-rpc.publicnode.com'),\n    [optimism.id]: http('https://optimism-rpc.publicnode.com'),\n    [base.id]: http('https://base-rpc.publicnode.com'),\n  },\n  connectors: [\n    walletConnect({\n      projectId,\n      metadata,\n      showQrModal: false\n    }),\n    injected({ \n      shimDisconnect: true,\n      target: {\n        id: 'injected',\n        name: 'Injected',\n        provider: typeof window !== 'undefined' ? window.ethereum : undefined,\n      }\n    }),\n    coinbaseWallet({\n      appName: metadata.name,\n      appLogoUrl: metadata.icons[0],\n    }),\n    authConnector({\n      options: { projectId },\n      socials: ['google', 'x', 'github', 'discord', 'apple'],\n      showWallets: true,\n      email: true,\n      walletFeatures: false,\n    }),\n  ],\n  ssr: false, // Ensure this is false for proper hydration\n});\n\n// Initialize Web3Modal with the wagmi config\ncreateWeb3Modal({\n  wagmiConfig,\n  projectId,\n  defaultChain: mainnet,\n  themeMode: 'dark',\n  enableAnalytics: true,\n  enableOnramp: false,\n  themeVariables: {\n    '--w3m-accent': '#50b458',\n    '--w3m-color-mix': '#210059',\n    '--w3m-color-mix-strength': 30\n    // Do not add --w3m-background\n  },\n  // Enhanced configuration for better connection handling\n  featuredWalletIds: [\n    // MetaMask\n    'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96',\n    // WalletConnect\n    '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0',\n    // Coinbase Wallet  \n    'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa',\n  ],\n  includeWalletIds: [\n    // Add any specific wallet IDs you want to include\n  ],\n  excludeWalletIds: [\n    // Add any wallet IDs you want to exclude\n  ],\n});\n\nfunction PrivateRoute({ children }: { children: ReactNode }) {\n  const { isConnected } = useAccount();\n  return isConnected ? <>{children}</> : <Navigate to=\"/\" />;\n}\n\n// Component to handle initial connection check and app-wide connection management\nfunction ConnectionManager() {\n  const { isConnected, address, connector } = useAccount();\n  \n  useEffect(() => {\n    console.log(\"App initialized with connection status:\", isConnected);\n    console.log(\"Current address:\", address);\n    console.log(\"Current connector:\", connector?.id);\n    \n    // Enhanced error handling for MetaMask detection\n    if (typeof window.ethereum === 'undefined') {\n      console.log(\"MetaMask not detected, but WalletConnect and other wallets can still be used\");\n    } else {\n      console.log(\"Ethereum provider detected:\", window.ethereum.isMetaMask ? 'MetaMask' : 'Other');\n    }\n\n    // Check for any persisted connection issues and clean them up\n    const checkConnectionHealth = () => {\n      const storedConnection = localStorage.getItem('walletConnected');\n      const storedAddress = localStorage.getItem('lastConnectedAddress');\n      const manualDisconnect = localStorage.getItem('manualDisconnect') === 'true';\n      \n      if (storedConnection === 'true' && storedAddress && !isConnected && !manualDisconnect) {\n        console.log(\"Detected potential connection state mismatch\");\n        // Don't immediately clear - let the reconnection logic handle it\n      }\n    };\n\n    // Run health check after a short delay\n    const healthCheckTimer = setTimeout(checkConnectionHealth, 3000);\n    \n    return () => {\n      clearTimeout(healthCheckTimer);\n    };\n  }, [isConnected, address, connector]);\n\n  // Global error handler for unhandled promise rejections\n  useEffect(() => {\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\n      console.error('Unhandled promise rejection:', event.reason);\n      \n      // If it's a wallet-related error, only clear on serious errors\n      if (event.reason?.message?.includes('User rejected') || \n          event.reason?.message?.includes('User denied') ||\n          event.reason?.message?.includes('user cancelled')) {\n        console.log(\"User rejected wallet action, clearing connection state\");\n        localStorage.removeItem('walletConnected');\n        localStorage.removeItem('connectorId');\n      } else if (event.reason?.message?.includes('wallet') || \n                event.reason?.message?.includes('connection') ||\n                event.reason?.message?.includes('provider')) {\n        console.log(\"Wallet-related error detected, but not clearing state automatically\");\n      }\n    };\n\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\n    \n    return () => {\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\n    };\n  }, []);\n\n  // Enhanced network change handling with debugging\n  useEffect(() => {\n    const handleNetworkChange = (chainId: string) => {\n      const chainIdNumber = parseInt(chainId, 16);\n      console.log(\"Network change detected in app - Chain ID:\", chainIdNumber);\n      \n      // Store the network change for debugging\n      localStorage.setItem('lastNetworkChange', JSON.stringify({\n        chainId: chainIdNumber,\n        timestamp: Date.now(),\n        address: address\n      }));\n    };\n\n    if (typeof window !== 'undefined' && window.ethereum) {\n      window.ethereum.on?.('chainChanged', handleNetworkChange);\n      \n      return () => {\n        window.ethereum.removeListener?.('chainChanged', handleNetworkChange);\n      };\n    }\n  }, [address]);\n  \n  return null;\n}\n\n// Enhanced error boundary for better error handling\nclass ErrorBoundary extends React.Component<\n  { children: ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error boundary caught an error:', error, errorInfo);\n    \n    // Only clear wallet state for wallet-related errors, and only if they're serious\n    if (error.message?.includes('User rejected') || \n        error.message?.includes('User denied') ||\n        error.message?.includes('user cancelled')) {\n      console.log(\"Clearing wallet state due to user rejection error\");\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('connectorId');\n      localStorage.removeItem('lastConnectedAddress');\n    } else if (error.message?.includes('wallet') || \n              error.message?.includes('connection') ||\n              error.message?.includes('provider')) {\n      console.log(\"Wallet-related error caught, but not clearing state automatically\");\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          minHeight: '100vh',\n          padding: '20px',\n          backgroundColor: '#000',\n          color: '#fff',\n          textAlign: 'center'\n        }}>\n          <h1>Something went wrong</h1>\n          <p>The application encountered an unexpected error.</p>\n          <details style={{ marginTop: '20px', fontSize: '14px', opacity: 0.7 }}>\n            <summary>Error Details</summary>\n            <pre style={{ marginTop: '10px', textAlign: 'left' }}>\n              {this.state.error?.message}\n            </pre>\n          </details>\n          <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>\n            <button\n              onClick={() => {\n                this.setState({ hasError: false });\n              }}\n              style={{\n                padding: '12px 24px',\n                backgroundColor: '#50b458',\n                color: 'white',\n                border: 'none',\n                borderRadius: '8px',\n                cursor: 'pointer'\n              }}\n            >\n              Try Again\n            </button>\n            <button\n              onClick={() => {\n                // Clear only problematic storage, not all\n                try {\n                  const keysToRemove = Object.keys(localStorage).filter(key => \n                    key.includes('w3m-') || \n                    key.includes('wagmi.') ||\n                    key.includes('wc@2:')\n                  );\n                  keysToRemove.forEach(key => localStorage.removeItem(key));\n                } catch (e) {\n                  console.error(\"Error clearing storage:\", e);\n                }\n                window.location.reload();\n              }}\n              style={{\n                padding: '12px 24px',\n                backgroundColor: '#ff4444',\n                color: 'white',\n                border: 'none',\n                borderRadius: '8px',\n                cursor: 'pointer'\n              }}\n            >\n              Reset & Reload\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Main App component\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <WagmiProvider config={wagmiConfig}>\n        <QueryClientProvider client={queryClient}>\n          <UserProvider>\n            <Router basename=\"/tokenchat\">\n              <ConnectionManager />\n              <ConnectionListener />\n              {/* Network debugger - only show in development */}\n              {process.env.NODE_ENV === 'development' && <NetworkDebugger />}\n              <Routes>\n                <Route path=\"/\" element={<HomePage />} />\n                <Route\n                  path=\"/chat\"\n                  element={\n                    <PrivateRoute>\n                      <Chat />\n                    </PrivateRoute>\n                  }\n                />\n                <Route path=\"/signup\" element={<Signup />} />\n                {/* Catch-all route for unknown paths */}\n                <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n              </Routes>\n            </Router>\n          </UserProvider>\n        </QueryClientProvider>\n      </WagmiProvider>\n    </ErrorBoundary>\n  );\n}\n\n// Export the App component as default\nexport default App;","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root') as HTMLElement;\nconst root = createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"names":["firebaseConfig","app","initializeApp","getAnalytics","firestore","getFirestore","EthProfilePic","eth","jsx","ChatSelector","setSelectedChatId","users","getWalletById","selectedChatId","address","useAccount","chatrooms","setChatrooms","useState","error","setError","unsubscribeRef","useRef","messageUnsubscribersRef","isPageVisibleRef","reconnectTimeoutRef","lastUpdateTimeRef","cleanupListeners","useCallback","unsubscribe","chatId","setupChatListeners","privateChatsRef","collection","onSnapshot","snapshot","privateChatsData","unsub","doc","data","chatroom","messagesRef","messagesQuery","query","orderBy","limit","messageUnsubscribe","messagesSnapshot","prevChatrooms","room","a","b","timeA","_a","_b","latestMessage","currentUser","user","senderName","getUserNameById","showNotification","msgError","err","useEffect","handleVisibilityChange","isVisible","permission","messageText","truncatedText","notification","filteredChatrooms","chat","id","getOtherParticipantId","pid","getOtherParticipantName","otherParticipantId","truncateMessage","text","maxLength","handleChatClick","jsxs","UserContext","createContext","UserProvider","children","setCurrentUser","useUser","context","useContext","SendMessage","txt","from","messageType","transactionData","chatMessagesCollectionRef","messageData","addDoc","ChatBottomBar","onSendTransaction","recipientUser","inputValue","setInputValue","React","handleChange","e","handleSend","handleSendTransaction","handleKeyDown","IoCard","IoSend","SendTransactionMessage","senderId","getTokenSymbol","chainId","ChatWindow","Message","timeStamp","own","NETWORK_DATA","networkCache","cacheExpiration","CACHE_DURATION","failedFetches","FAILURE_RETRY_DELAY","getNetworkInfo","cachedData","cacheTime","lastFailure","getFallbackNetworkInfo","networkInfo","fetchNetworkFromAPI","specialCases","controller","timeoutId","response","chain","c","_c","_d","preloadCommonNetworks","commonChains","results","info","successful","result","failed","TransactionMessage","transaction","setNetworkInfo","networkLoading","setNetworkLoading","isMounted","fallbackInfo","statusInfo","IoTime","IoCheckmark","IoClose","formatAmount","amount","num","explorerUrl","ChatContent","messages","setMessages","messagesEndRef","scrollToBottom","fetchedMessages","message","index","isOwnMessage","ChatHeader","chatName","onBack","showBackButton","showProfilePic","IoArrowBack","NewChatModal","onClose","onChatCreated","setUsers","loading","setLoading","creatingChat","setCreatingChat","usersRef","allUsers","getDocs","filteredUsers","checkExistingChat","targetUserId","q","participants","createChat","targetUser","existingChatId","newChatDoc","currentUserRef","targetUserRef","updateDoc","arrayUnion","SlClose","SlPlus","useChainListener","wagmiChainId","useChainId","currentChainId","setCurrentChainId","lastDirectChainIdRef","timeSinceLastDirectUpdate","handleChainChanged","chainIdHex","newChainId","chainIdNumber","SendTransactionModal","onTransactionSent","publicClient","usePublicClient","setAmount","recipientAddress","setRecipientAddress","setMessage","step","setStep","setTimeoutId","isValidAddress","isAddress","isValidAmount","parsedAmount","balance","totalCost","balanceLoading","balanceError","refetchBalance","useBalance","gasEstimate","gasLoading","refetchGasEstimate","useEstimateGas","parseEther","gasPrice","refetchGasPrice","useGasPrice","estimatedGasFee","formatEther","sendTransaction","hash","sendError","isSending","resetSendTransaction","useSendTransaction","isConfirming","isConfirmed","isConfirmError","confirmError","useWaitForTransactionReceipt","newChainIdNumber","timeout","errorMessage","canSubmit","quickAmounts","handleQuickAmount","quickAmount","handleMaxAmount","balanceValue","currentGasPrice","testAmountValue","testAmount","gasWithBuffer","txFee","txFeeInEther","txFeeValue","maxSendableAmount","finalAmount","precision","retryBalance","getExplorerUrl","handleClose","renderContent","Fragment","useResponsive","windowSize","setWindowSize","handleResize","isMobile","isTablet","isDesktop","Chat","showNewChatModal","setShowNewChatModal","showTransactionModal","setShowTransactionModal","transactionRecipient","setTransactionRecipient","currentChatData","setCurrentChatData","mobileView","setMobileView","usersData","chatDoc","getDoc","chatData","foundCurrentUser","handleChatSelect","handleBackToList","handleChatCreated","getCurrentChatName","getRecipientUser","prev","handleTransactionSent","handleCloseTransactionModal","recipient","LuMessageCirclePlus","ProceedButton","userExists","setUserExists","navigate","useNavigate","checkUser","walletAddress","usersCollection","where","userFound","SlLogin","WalletMenu","isConnected","disconnect","useDisconnect","handleDisconnect","keysToRemove","i","key","sessionKeysToRemove","deleteDB","dbName","resolve","reject","deleteReq","dbNames","clearError","HomePage","connector","connect","connectors","useConnect","connected","setConnected","attemptReconnection","wasConnected","lastConnectedAddress","savedConnectorId","matchingConnector","connectionPromise","timeoutPromise","_","injectedConnector","reconnectTimer","handleFocus","shouldBeConnected","timeSinceLastTry","handleConnectorError","interval","lastAttempt","Signup","name","setName","setData","isRegistering","setIsRegistering","checkingUser","setCheckingUser","checkUserExists","retryCount","exists","fetchData","writeData","existingUserQuery","listenerTimeout","registrationCompleted","docRef","handleKeyPress","isValidName","inputName","trimmedName","ConnectionListener","status","prevConnectedRef","checkIntervalRef","isManualDisconnectRef","lastValidationTimeRef","validateConnection","now","wcProvider","accounts","forceDisconnect","checkConnection","handleNetworkChange","handleAccountsChanged","handleStorageChange","queryClient","QueryClient","attemptIndex","projectId","metadata","chains","mainnet","bsc","polygon","arbitrum","optimism","base","wagmiConfig","createConfig","http","walletConnect","injected","coinbaseWallet","authConnector","createWeb3Modal","PrivateRoute","Navigate","ConnectionManager","healthCheckTimer","storedConnection","storedAddress","manualDisconnect","handleUnhandledRejection","event","_f","_e","_h","_g","_j","_i","_l","_k","ErrorBoundary","props","errorInfo","App","WagmiProvider","QueryClientProvider","Router","Routes","Route","rootElement","root","createRoot"],"mappings":"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"}