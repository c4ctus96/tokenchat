{"version":3,"file":"index-DmPmZLUW.js","sources":["../../src/components/EthProfilePic.tsx","../../src/components/ChatSidebar.tsx","../../src/components/Firebase.tsx","../../src/components/ChatSelector.tsx","../../src/components/UserContext.tsx","../../src/components/ChatBottomBar.tsx","../../src/components/ChatWindow.tsx","../../src/components/Message.tsx","../../src/components/ChatContent.tsx","../../src/components/Chat.tsx","../../src/components/ProceedButton.tsx","../../src/components/WalletMenu.tsx","../../src/components/HomePage.tsx","../../src/components/Signup.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import React from \"react\";\n\ntype EthProfilePicProps = {\n    eth: string;\n};\n\nconst EthProfilePic: React.FC<EthProfilePicProps> = ({ eth }) => {\n    return (\n        <div>\n            <img src={`https://effigy.im/a/${eth}.svg`} alt=\"Profile picture\" className=\"profilePic\" />\n        </div>\n    );\n};\n\nexport default EthProfilePic;","import React, { useState, useEffect } from \"react\";\nimport { ref, set, onValue } from \"firebase/database\";\nimport { useAccount } from \"wagmi\";\nimport \"../styles.css\";\nimport EthProfilePic from \"./EthProfilePic\";\n\nfunction ChatSidebar() {\n    const { address } = useAccount();\n    let pfp = \"https://static-00.iconduck.com/assets.00/profile-circle-icon-256x256-dngglm1r.png\";\n    if (address) {\n        pfp = `https://effigy.im/a/${address}.png`;\n    }\n\n    return (\n        <div className=\"ChatSidebar\">\n            <div className=\"profilePicture\">\n                {/*<img className=\"profilePicture\" src={pfp} alt=\"Profile Picture\"></img>*/}\n\n                {address && <EthProfilePic eth={address} />}\n            </div>\n        </div>\n    );\n}\n\nexport default ChatSidebar;\n","import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from \"firebase/firestore\";  // Import Firestore\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_APIKEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTHDOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECTID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGEBUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APPID,\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENTID,\n  // .env gitignored\n};\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst firestore = getFirestore(app);  // Initialize Firestore\n\nexport { firebaseConfig, firestore };\n","import React, { useState, useEffect } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport EthProfilePic from \"./EthProfilePic\";\n\ninterface Chatroom {\n  id: string;\n  pid: string[];\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatSelectorProps {\n  setSelectedChatId: (id: string) => void;\n  users: User[];\n  getWalletById: (id: string) => string;\n}\n\nfunction ChatSelector({ setSelectedChatId, users, getWalletById }: ChatSelectorProps) {\n  const { address } = useAccount();\n  const [chatrooms, setChatrooms] = useState<Chatroom[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!address) return;\n\n    const fetchChatrooms = async () => {\n      try {\n        const privateChatsRef = collection(firestore, \"privateChats\");\n        const privateChatsSnapshot = await getDocs(privateChatsRef);\n        const privateChatsData: Chatroom[] = privateChatsSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            pid: data.pid || []\n          };\n        });\n        setChatrooms(privateChatsData);\n      } catch (err) {\n        setError(\"Failed to fetch data. Please check your internet connection.\");\n        console.error(\"Fetch error:\", err);\n      }\n    };\n    \n    fetchChatrooms();\n  }, [address]);\n\n  // Determine the current user based on wallet address\n  const currentUser = users.find(user => user.wallet === address);\n\n  // Filter chatrooms to only those that the current user participates in\n  const filteredChatrooms = currentUser\n    ? chatrooms.filter(chat => chat.pid.includes(currentUser.id))\n    : [];\n\n  const getUserNameById = (id: string) => {\n    const user = users.find(user => user.id === id);\n    return user ? user.name : id;\n  };\n\n  // For a valid chatroom, return the participant's id that doesn't match the current user\n  const getOtherParticipantId = (pid: string[]) => {\n    return currentUser ? pid.find(id => id !== currentUser.id) || '' : '';\n  };\n\n  const getOtherParticipantName = (pid: string[]) => {\n    const otherParticipantId = getOtherParticipantId(pid);\n    return getUserNameById(otherParticipantId);\n  };\n\n  const handleChatClick = (id: string) => {\n    setSelectedChatId(id);\n  };\n\n  return (\n    <div className=\"chatSelector\">\n      {error && <p className=\"error\">{error}</p>}\n      {filteredChatrooms.length > 0 ? (\n        filteredChatrooms.map((chatroom) => (\n          <div\n            className=\"contactBox\"\n            key={chatroom.id}\n            onClick={() => handleChatClick(chatroom.id)}\n          >\n            <EthProfilePic eth={getWalletById(getOtherParticipantId(chatroom.pid))} />\n            <div className=\"contactTextBox\">\n              <h3>{getOtherParticipantName(chatroom.pid)}</h3>\n              <h3>latest message</h3>\n            </div>\n          </div>\n        ))\n      ) : (\n        <p>No chatrooms available</p>\n      )}\n    </div>\n  );\n}\n\nexport default ChatSelector;\n","import React, { createContext, useState, useContext, ReactNode } from \"react\";\n\nexport interface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface UserContextType {\n  currentUser?: User;\n  setCurrentUser: (user?: User) => void;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n  const [currentUser, setCurrentUser] = useState<User | undefined>(undefined);\n\n  return (\n    <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n  return context;\n};\n","import React from \"react\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport { IoSend } from \"react-icons/io5\";\n\ninterface ChatBottomBarProps {\n  selectedChatId?: string;\n}\n\nconst SendMessage = async (txt: string, from: string, chatId: string) => {\n  try {\n    const chatMessagesCollectionRef = collection(\n      firestore,\n      \"privateChats\",\n      chatId,\n      \"msg\"\n    );\n    await addDoc(chatMessagesCollectionRef, {\n      txt: txt,\n      from: from,\n      ts: new Date(),\n    });\n    console.log(\"Message sent successfully\");\n  } catch (error) {\n    console.error(\"Error sending message:\", error);\n  }\n};\n\nconst ChatBottomBar: React.FC<ChatBottomBarProps> = ({ selectedChatId }) => {\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const { currentUser } = useUser();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSend = () => {\n    if (!selectedChatId || !currentUser || !inputValue.trim()) {\n      console.error(\"Missing required data:\", { selectedChatId, currentUser, inputValue });\n      return;\n    }\n    SendMessage(inputValue, currentUser.id, selectedChatId);\n    setInputValue(\"\"); // Clear input after sending\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"chatBottomBar\">\n      <input\n        type=\"text\"\n        className=\"messageInput\"\n        placeholder=\"Type your message\"\n        value={inputValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      <button\n        className=\"sendMessageButton\"\n        onClick={handleSend}\n        disabled={!selectedChatId || !currentUser}\n        title=\"Send message\"\n      >\n        <IoSend size={20} />\n      </button>\n    </div>\n  );\n};\n\nexport default ChatBottomBar;","import React, { ReactNode } from \"react\";\nimport \"../styles.css\";\nimport ChatBottomBar from \"./ChatBottomBar\";\n\ninterface ChatWindowProps {\n  children?: ReactNode; // Allow ChatWindow to accept children\n  selectedChatId?: string; // Add this prop\n}\n\nfunction ChatWindow({ children, selectedChatId }: ChatWindowProps) {\n  return (\n    <div className=\"chatWindow\">\n      <div className=\"chatContent\">{children}</div> {/* Render children here */}\n      <ChatBottomBar selectedChatId={selectedChatId} />\n    </div>\n  );\n}\n\nexport default ChatWindow;\n","import React from \"react\";\n\ninterface MessageProps {\n  text: string;\n  timeStamp: number; // Expecting timeStamp as a number in milliseconds\n  from: string;\n  own: boolean;\n}\n\nconst Message: React.FC<MessageProps> = ({ text, timeStamp, from, own }) => {\n  return (\n    <div className=\"messageBox\">\n      <div className={`message ${own ? 'own' : ''}`}>\n        <p className=\"message-text\">{text}</p>\n        <p className=\"message-timestamp\">{new Date(timeStamp).toLocaleString()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, query, orderBy, onSnapshot, Timestamp } from \"firebase/firestore\";\nimport Message from \"./Message\";\nimport { useAccount } from \"wagmi\";\nimport { useUser } from \"./UserContext\";\n\ninterface ChatMessage {\n  txt: string;\n  ts: Timestamp;\n  from: string;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatContentProps {\n  selectedChatId: string;\n  users: User[];\n  getWalletById: (id: string) => string;\n}\n\nfunction ChatContent({ selectedChatId, users, getWalletById }: ChatContentProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const { address } = useAccount();\n  const { currentUser } = useUser();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to bottom function\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Scroll whenever messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!selectedChatId) return;\n\n    // Create a query with ordering\n    const messagesRef = collection(firestore, \"privateChats\", selectedChatId, \"msg\");\n    const messagesQuery = query(messagesRef, orderBy(\"ts\", \"asc\"));\n\n    // Set up real-time listener\n    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n      const fetchedMessages: ChatMessage[] = [];\n      snapshot.forEach((doc) => {\n        const messageData = doc.data() as ChatMessage;\n        if (messageData.txt && messageData.ts && messageData.from) {\n          fetchedMessages.push(messageData);\n        } else {\n          console.log(\"Missing fields in document:\", doc.id);\n        }\n      });\n      console.log(\"Real-time Messages Update:\", fetchedMessages);\n      setMessages(fetchedMessages);\n    }, (error) => {\n      console.error(\"Error fetching messages:\", error);\n    });\n\n    // Cleanup subscription on unmount or when selectedChatId changes\n    return () => unsubscribe();\n  }, [selectedChatId]);\n\n  return (\n    <div className=\"chatContent\">\n      {messages.map((message, index) => {\n        const isOwnMessage = currentUser?.id ? message.from === currentUser.id : false;\n        \n        return (\n          <Message\n            key={index}\n            text={message.txt}\n            timeStamp={message.ts.toMillis()}\n            from={message.from}\n            own={isOwnMessage}\n          />\n        );\n      })}\n      <div ref={messagesEndRef} /> {/* Invisible element to scroll to */}\n    </div>\n  );\n}\n\nexport default ChatContent;\n","import React, { useState, useEffect } from \"react\";\nimport { useAccount } from \"wagmi\";\nimport \"../styles.css\";\nimport ChatSidebar from \"./ChatSidebar\";\nimport ChatSelector from \"./ChatSelector\";\nimport ChatWindow from \"./ChatWindow\";\nimport ChatContent from \"./ChatContent\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\nfunction Chat() {\n  const { address } = useAccount(); // Get the current user's wallet address\n  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const { setCurrentUser } = useUser(); // Get the setCurrentUser function from context\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const usersRef = collection(firestore, \"users\");\n      const usersSnapshot = await getDocs(usersRef);\n      const usersData = usersSnapshot.docs.map((doc) => ({\n        id: doc.id,\n        name: doc.data().name,\n        wallet: doc.data().wallet,\n      }));\n      setUsers(usersData);\n    };\n    fetchUsers();\n  }, []);\n\n  // Update currentUser in context whenever users or address changes\n  useEffect(() => {\n    if (users.length > 0 && address) {\n      const currentUser = users.find(user => user.wallet === address);\n      console.log(\"Current User:\", currentUser);\n      setCurrentUser(currentUser);\n    }\n  }, [users, address, setCurrentUser]);\n\n  // Handler for selecting a chat room\n  const handleChatSelect = (chatId: string) => {\n    setSelectedChatId(chatId);\n  };\n\n  // Helper function to get wallet by user ID\n  const getWalletById = (id: string) => {\n    const user = users.find((user) => user.id === id);\n    return user ? user.wallet : \"\";\n  };\n\n  return (\n    <div className=\"chat\">\n      <ChatSidebar />\n      <ChatSelector\n        setSelectedChatId={handleChatSelect}\n        users={users}\n        getWalletById={getWalletById}\n      />\n      <ChatWindow selectedChatId={selectedChatId || undefined}>\n        {selectedChatId && (\n          <ChatContent\n            selectedChatId={selectedChatId}\n            users={users}\n            getWalletById={getWalletById}\n          />\n        )}\n      </ChatWindow>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React, { useState } from 'react';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { useAccount } from 'wagmi';\nimport { SlLogin } from \"react-icons/sl\";\nimport { firestore } from './Firebase'; \nimport { useNavigate } from 'react-router-dom';\n\nfunction ProceedButton() {\n  const { address } = useAccount();\n  const [userExists, setUserExists] = useState<boolean | null>(null);\n  const navigate = useNavigate();\n\n  const checkUser = async (walletAddress: string) => {\n    const usersCollection = collection(firestore, 'users');\n    const q = query(usersCollection, where('wallet', '==', walletAddress));\n\n    try {\n      const querySnapshot = await getDocs(q);\n      const userFound = !querySnapshot.empty;\n      console.log(\"User found:\", userFound);\n      setUserExists(userFound);\n\n      if (userFound) {\n        navigate('/chat'); // Redirect to Chat page if user is found\n      } else {\n        navigate('/signup'); // Redirect to Signup page if user is not found\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      setUserExists(false);\n      navigate('/signup'); // Redirect to Signup page on error\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className=\"proceedButton\"\n        onClick={() => {\n          if (address) {\n            checkUser(address);\n          } else {\n            console.error(\"Address is undefined\");\n          }\n        }}\n      >\n        <SlLogin size={28} />\n        <span>Proceed</span>\n      </button>\n      {userExists !== null && (\n        <p>{userExists ? 'User exists' : 'User does not exist'}</p>\n      )}\n    </div>\n  );\n}\n\nexport default ProceedButton;\n","import React from 'react';\nimport { SlClose } from 'react-icons/sl';\nimport { useAccount, useDisconnect } from 'wagmi';\n\nfunction WalletMenu() {\n  const { address, isConnected } = useAccount();\n  const { disconnect } = useDisconnect();\n  \n  const handleDisconnect = async () => {\n    // Clean up localStorage\n    localStorage.removeItem('walletconnect');\n    localStorage.removeItem('walletConnected');\n    localStorage.removeItem('connectorId');\n    \n    // Wagmi disconnect\n    disconnect();\n  }\n  \n  return (\n    <div className=\"wallet-button\">\n      {isConnected && address ? (\n        <div className='walletBubble'>\n          <div className=\"address\">\n            {address.slice(0, 6)}...{address.slice(-4)}\n          </div>\n          <button onClick={handleDisconnect}><SlClose size={25} /></button>\n        </div>\n      ) : (\n        // Directly use the web3modal button\n        <w3m-connect-button />\n      )}\n    </div>\n  );\n}\n\nexport default WalletMenu;\n","import React, { useState, useEffect } from \"react\";\nimport ConnectButton from \"./ConnectButton\";\nimport \"../styles.css\";\nimport { useAccount, useConnect, useDisconnect } from \"wagmi\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProceedButton from \"./ProceedButton\";\nimport WalletMenu from \"./WalletMenu\";\n\n// Define type for custom web3modal elements\n// Using built-in Web3Modal types\n\nfunction HomePage() {\n  const { address, isConnected, connector } = useAccount();\n  const { connect, connectors } = useConnect();\n  const { disconnect } = useDisconnect();\n  const [connected, setConnected] = useState(isConnected);\n  const navigate = useNavigate();\n\n  // Try to automatically reconnect on page load\n  useEffect(() => {\n    const wasConnected = localStorage.getItem('walletConnected') === 'true';\n    if (wasConnected && !isConnected) {\n      console.log(\"Attempting to reconnect wallet automatically...\");\n      \n      // Find the right connector\n      const savedConnectorId = localStorage.getItem('connectorId');\n      console.log(\"Last used connector:\", savedConnectorId);\n      \n      if (savedConnectorId) {\n        const matchingConnector = connectors.find(c => c.id === savedConnectorId);\n        if (matchingConnector) {\n          console.log(\"Reconnecting with saved connector:\", savedConnectorId);\n          connect({ connector: matchingConnector });\n        }\n      } else {\n        // Fallback to injected\n        const injectedConnector = connectors.find(c => c.id === 'injected');\n        if (injectedConnector) {\n          console.log(\"No saved connector, trying injected...\");\n          connect({ connector: injectedConnector });\n        }\n      }\n    }\n  }, [connect, connectors, isConnected]);\n\n  // Listen for connection changes\n  useEffect(() => {\n    console.log(\"Connection state changed:\", isConnected ? \"connected\" : \"disconnected\");\n    console.log(\"Current connector:\", connector?.id);\n    setConnected(isConnected);\n    \n    // If connection is established and was previously not connected\n    if (isConnected && !connected) {\n      console.log(\"Wallet newly connected:\", address);\n    }\n    \n    // If disconnected and was previously connected\n    if (!isConnected && connected) {\n      console.log(\"Wallet disconnected\");\n    }\n  }, [isConnected, address, connected, connector]);\n\n  // Handle wallet connection events more robustly\n  useEffect(() => {\n    // This helps handle disconnection events - we check state on focus\n    const handleFocus = () => {\n      // Force check connection status when tab gets focus\n      if (connected && !isConnected) {\n        console.log(\"Connection lost while page was inactive, updating UI\");\n        setConnected(false);\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    \n    return () => {\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, [connected, isConnected]);\n\n  const handleDisconnect = () => {\n    try {\n      // First update our app state to show disconnected UI immediately\n      setConnected(false);\n      \n      // Clear localStorage on manual disconnect\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('lastConnectedAddress');\n      localStorage.removeItem('connectorId');\n      \n      console.log(\"Manual disconnect triggered, state cleared\");\n      \n      // Then try to disconnect via wagmi\n      disconnect();\n    } catch (error) {\n      console.error(\"Error during disconnect:\", error);\n    }\n  };\n\n  return (\n    <div className=\"homepage\">\n      <div className=\"title\">\n        <h1>Chat 3.0 is here.</h1>\n        <h2>Your personal web3 companion.</h2>\n      </div>\n      <div>\n        <div className=\"login\">\n          <h3>\n            {connected \n              ? `Connected ${connector?.id ? `(${connector.id})` : \"\"}` \n              : \"Connect your wallet\"}\n          </h3>\n          <WalletMenu />\n          {connected && <ProceedButton />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage; ","import React, { useState, useEffect } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { getFirestore, getDocs, collection, addDoc, query, orderBy, limit,  } from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport \"../styles.css\";\n\nfunction Signup() {\n  const { address } = useAccount();\n  const [name, setName] = useState(\"\");\n  const [data, setData] = useState<any>(null);\n\n  const fetchData = async () => {\n    const usersCollection = collection(firestore, 'users');\n    const q = query(usersCollection, orderBy('name'), limit(10)); // Adjust as needed\n    const querySnapshot = await getDocs(q);\n\n    const usersData = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    setData({ users: usersData });\n    console.log(\"Fetched data:\", usersData);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const writeData = async () => {\n    console.log(\"Writing data:\", address, name);\n\n    try {\n      await addDoc(collection(firestore, 'users'), {\n        wallet: address,\n        name: name\n      });\n      console.log(\"Data written successfully\");\n      fetchData(); // Fetch the updated data\n    } catch (error) {\n      console.error(\"Error writing data:\", error);\n    }\n  };\n\n  return (\n    <div className=\"centered-signup\">\n      <div className=\"welcomeText\">\n        <h1>Welcome to Chat 3.0</h1>\n        <h2>One last step to start chatting</h2>\n      </div>\n      <p>Wallet Address: {address}</p>\n      <div className=\"signupBox\">\n         <input\n        type=\"text\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button onClick={writeData}>Register</button>\n      </div>\n     \n      {/*<pre>{JSON.stringify(data, null, 2)}</pre>*/}\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { ReactNode, useEffect } from 'react';\nimport { createWeb3Modal } from '@web3modal/wagmi/react';\nimport { useAccount } from 'wagmi';\nimport { mainnet, arbitrum } from 'viem/chains';\nimport { WagmiProvider, createConfig, http } from 'wagmi';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { walletConnect, injected, coinbaseWallet } from 'wagmi/connectors';\nimport { authConnector } from '@web3modal/wagmi';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Chat from \"./components/Chat\";\nimport HomePage from \"./components/HomePage\";\nimport { UserProvider } from \"./components/UserContext\";\nimport Signup from \"./components/Signup\";\n\nconst queryClient = new QueryClient();\nconst projectId = import.meta.env.VITE_WAGMI_PROJECTID;\n\nif (!projectId) throw new Error(\"Project ID is undefined\");\n\nconst metadata = {\n  name: \"TokenChat\",\n  description: \"Web3 Chat Application\",\n  url: \"https://c4ctus96.github.io/tokenchat\",\n  icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n};\n\nconst chains = [mainnet, arbitrum] as const;\n\n// Create the wagmi config first\nconst wagmiConfig = createConfig({\n  chains,\n  transports: {\n    [mainnet.id]: http('https://eth-mainnet.g.alchemy.com/v2/demo'),\n    [arbitrum.id]: http('https://arb-mainnet.g.alchemy.com/v2/demo'),\n  },\n  connectors: [\n    walletConnect({\n      projectId,\n      metadata,\n      showQrModal: false\n    }),\n    injected({ shimDisconnect: true }),\n    coinbaseWallet({\n      appName: metadata.name,\n      appLogoUrl: metadata.icons[0],\n    }),\n    authConnector({\n      options: { projectId },\n      socials: ['google', 'x', 'github', 'discord', 'apple'],\n      showWallets: true,\n      email: true,\n      walletFeatures: false,\n    }),\n  ],\n});\n\n// Initialize Web3Modal with the wagmi config\ncreateWeb3Modal({\n  wagmiConfig,\n  projectId,\n  defaultChain: mainnet,\n  themeMode: 'dark',\n  enableAnalytics: true,\n  enableOnramp: false,\n  themeVariables: {\n    '--w3m-accent': '#50b458',\n    '--w3m-color-mix': '#210059',\n    '--w3m-color-mix-strength': 30\n    // Do not add --w3m-background\n  }\n});\n\nfunction PrivateRoute({ children }: { children: ReactNode }) {\n  const { isConnected } = useAccount();\n  return isConnected ? <>{children}</> : <Navigate to=\"/\" />;\n}\n\n// Component to handle initial connection check\nfunction ConnectionManager() {\n  const { isConnected } = useAccount();\n  \n  useEffect(() => {\n    console.log(\"App initialized, connection status:\", isConnected);\n    // Add error handling for MetaMask detection\n    if (typeof window.ethereum === 'undefined') {\n      console.log(\"MetaMask not detected, but WalletConnect can still be used\");\n    }\n  }, [isConnected]);\n  \n  return null;\n}\n\n// Main App component\nfunction App() {\n  return (\n    <WagmiProvider config={wagmiConfig}>\n      <QueryClientProvider client={queryClient}>\n        <UserProvider>\n          <Router basename=\"/tokenchat\">\n            <ConnectionManager />\n            <Routes>\n              <Route path=\"/\" element={<HomePage />} />\n              <Route\n                path=\"/chat\"\n                element={\n                  <PrivateRoute>\n                    <Chat />\n                  </PrivateRoute>\n                }\n              />\n              <Route path=\"/signup\" element={ <Signup /> } />\n            </Routes>\n          </Router>\n        </UserProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n\n// Export the App component as default\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root') as HTMLElement;\nconst root = createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"names":["EthProfilePic","eth","jsx","ChatSidebar","address","useAccount","firebaseConfig","app","initializeApp","getAnalytics","firestore","getFirestore","ChatSelector","setSelectedChatId","users","getWalletById","chatrooms","setChatrooms","useState","error","setError","useEffect","privateChatsRef","collection","privateChatsData","getDocs","doc","data","err","currentUser","user","filteredChatrooms","chat","getUserNameById","id","getOtherParticipantId","pid","getOtherParticipantName","otherParticipantId","handleChatClick","jsxs","chatroom","UserContext","createContext","UserProvider","children","setCurrentUser","useUser","context","useContext","SendMessage","txt","from","chatId","chatMessagesCollectionRef","addDoc","ChatBottomBar","selectedChatId","inputValue","setInputValue","React","handleChange","e","handleSend","handleKeyDown","IoSend","ChatWindow","Message","text","timeStamp","own","ChatContent","messages","setMessages","messagesEndRef","useRef","scrollToBottom","_a","messagesRef","messagesQuery","query","orderBy","unsubscribe","onSnapshot","snapshot","fetchedMessages","messageData","message","index","isOwnMessage","Chat","setUsers","usersRef","usersData","handleChatSelect","ProceedButton","userExists","setUserExists","navigate","useNavigate","checkUser","walletAddress","usersCollection","q","where","userFound","SlLogin","WalletMenu","isConnected","disconnect","useDisconnect","handleDisconnect","SlClose","HomePage","connector","connect","connectors","useConnect","connected","setConnected","savedConnectorId","matchingConnector","c","injectedConnector","handleFocus","Signup","name","setName","setData","fetchData","limit","writeData","queryClient","QueryClient","projectId","metadata","chains","mainnet","arbitrum","wagmiConfig","createConfig","http","walletConnect","injected","coinbaseWallet","authConnector","createWeb3Modal","PrivateRoute","Fragment","Navigate","ConnectionManager","App","WagmiProvider","QueryClientProvider","Router","Routes","Route","rootElement","root","createRoot"],"mappings":"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"}