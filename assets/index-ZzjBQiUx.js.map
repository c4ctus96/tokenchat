{"version":3,"file":"index-ZzjBQiUx.js","sources":["../../src/components/EthProfilePic.tsx","../../src/components/ChatSidebar.tsx","../../src/components/Firebase.tsx","../../src/components/ChatSelector.tsx","../../src/components/UserContext.tsx","../../src/components/ChatBottomBar.tsx","../../src/components/ChatWindow.tsx","../../src/components/Message.tsx","../../src/components/ChatContent.tsx","../../src/components/NewChatModal.tsx","../../src/components/Chat.tsx","../../src/components/ProceedButton.tsx","../../src/components/WalletMenu.tsx","../../src/components/HomePage.tsx","../../src/components/Signup.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import React from \"react\";\n\ntype EthProfilePicProps = {\n    eth: string;\n};\n\nconst EthProfilePic: React.FC<EthProfilePicProps> = ({ eth }) => {\n    return (\n        <div>\n            <img src={`https://effigy.im/a/${eth}.svg`} alt=\"Profile picture\" className=\"profilePic\" />\n        </div>\n    );\n};\n\nexport default EthProfilePic;","import React, { useState, useEffect } from \"react\";\nimport { ref, set, onValue } from \"firebase/database\";\nimport { useAccount } from \"wagmi\";\nimport \"../styles.css\";\nimport EthProfilePic from \"./EthProfilePic\";\n\nfunction ChatSidebar() {\n    const { address } = useAccount();\n    let pfp = \"https://static-00.iconduck.com/assets.00/profile-circle-icon-256x256-dngglm1r.png\";\n    if (address) {\n        pfp = `https://effigy.im/a/${address}.png`;\n    }\n\n    return (\n        <div className=\"ChatSidebar\">\n            <div className=\"profilePicture\">\n                {/*<img className=\"profilePicture\" src={pfp} alt=\"Profile Picture\"></img>*/}\n\n                {address && <EthProfilePic eth={address} />}\n            </div>\n        </div>\n    );\n}\n\nexport default ChatSidebar;\n","import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from \"firebase/firestore\";  // Import Firestore\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_APIKEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTHDOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECTID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGEBUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APPID,\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENTID,\n  // .env gitignored\n};\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst firestore = getFirestore(app);  // Initialize Firestore\n\nexport { firebaseConfig, firestore };\n","import React, { useState, useEffect } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport EthProfilePic from \"./EthProfilePic\";\n\ninterface Chatroom {\n  id: string;\n  pid: string[];\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatSelectorProps {\n  setSelectedChatId: (id: string) => void;\n  users: User[];\n  getWalletById: (id: string) => string;\n}\n\nfunction ChatSelector({ setSelectedChatId, users, getWalletById }: ChatSelectorProps) {\n  const { address } = useAccount();\n  const [chatrooms, setChatrooms] = useState<Chatroom[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!address) return;\n\n    // Set up real-time listener for privateChats collection\n    const privateChatsRef = collection(firestore, \"privateChats\");\n    \n    const unsubscribe = onSnapshot(\n      privateChatsRef,\n      (snapshot) => {\n        try {\n          const privateChatsData: Chatroom[] = snapshot.docs.map(doc => {\n            const data = doc.data();\n            return {\n              id: doc.id,\n              pid: data.pid || []\n            };\n          });\n          \n          console.log(\"Real-time chatrooms update:\", privateChatsData);\n          setChatrooms(privateChatsData);\n          setError(null);\n        } catch (err) {\n          setError(\"Failed to fetch chat data. Please check your internet connection.\");\n          console.error(\"Snapshot error:\", err);\n        }\n      },\n      (error) => {\n        setError(\"Failed to fetch data. Please check your internet connection.\");\n        console.error(\"Fetch error:\", error);\n      }\n    );\n    \n    // Cleanup subscription on unmount or when address changes\n    return () => unsubscribe();\n  }, [address]);\n\n  // Determine the current user based on wallet address\n  const currentUser = users.find(user => user.wallet === address);\n\n  // Filter chatrooms to only those that the current user participates in\n  const filteredChatrooms = currentUser\n    ? chatrooms.filter(chat => chat.pid.includes(currentUser.id))\n    : [];\n\n  const getUserNameById = (id: string) => {\n    const user = users.find(user => user.id === id);\n    return user ? user.name : id;\n  };\n\n  // For a valid chatroom, return the participant's id that doesn't match the current user\n  const getOtherParticipantId = (pid: string[]) => {\n    return currentUser ? pid.find(id => id !== currentUser.id) || '' : '';\n  };\n\n  const getOtherParticipantName = (pid: string[]) => {\n    const otherParticipantId = getOtherParticipantId(pid);\n    return getUserNameById(otherParticipantId);\n  };\n\n  const handleChatClick = (id: string) => {\n    setSelectedChatId(id);\n  };\n\n  return (\n    <div className=\"chatSelector\">\n      {error && <p className=\"error\">{error}</p>}\n      {filteredChatrooms.length > 0 ? (\n        filteredChatrooms.map((chatroom) => (\n          <div\n            className=\"contactBox\"\n            key={chatroom.id}\n            onClick={() => handleChatClick(chatroom.id)}\n          >\n            <EthProfilePic eth={getWalletById(getOtherParticipantId(chatroom.pid))} />\n            <div className=\"contactTextBox\">\n              <h3>{getOtherParticipantName(chatroom.pid)}</h3>\n              <h3>latest message</h3>\n            </div>\n          </div>\n        ))\n      ) : (\n        <p>No chatrooms available</p>\n      )}\n    </div>\n  );\n}\n\nexport default ChatSelector;","import React, { createContext, useState, useContext, ReactNode } from \"react\";\n\nexport interface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface UserContextType {\n  currentUser?: User;\n  setCurrentUser: (user?: User) => void;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n  const [currentUser, setCurrentUser] = useState<User | undefined>(undefined);\n\n  return (\n    <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n  return context;\n};\n","import React from \"react\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport { IoSend } from \"react-icons/io5\";\n\ninterface ChatBottomBarProps {\n  selectedChatId?: string;\n}\n\nconst SendMessage = async (txt: string, from: string, chatId: string) => {\n  try {\n    const chatMessagesCollectionRef = collection(\n      firestore,\n      \"privateChats\",\n      chatId,\n      \"msg\"\n    );\n    await addDoc(chatMessagesCollectionRef, {\n      txt: txt,\n      from: from,\n      ts: new Date(),\n    });\n    console.log(\"Message sent successfully\");\n  } catch (error) {\n    console.error(\"Error sending message:\", error);\n  }\n};\n\nconst ChatBottomBar: React.FC<ChatBottomBarProps> = ({ selectedChatId }) => {\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const { currentUser } = useUser();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSend = () => {\n    if (!selectedChatId || !currentUser || !inputValue.trim()) {\n      console.error(\"Missing required data:\", { selectedChatId, currentUser, inputValue });\n      return;\n    }\n    SendMessage(inputValue, currentUser.id, selectedChatId);\n    setInputValue(\"\"); // Clear input after sending\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"chatBottomBar\">\n      <input\n        type=\"text\"\n        className=\"messageInput\"\n        placeholder=\"Type your message\"\n        value={inputValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      <button\n        className=\"sendMessageButton\"\n        onClick={handleSend}\n        disabled={!selectedChatId || !currentUser}\n        title=\"Send message\"\n      >\n        <IoSend size={20} />\n      </button>\n    </div>\n  );\n};\n\nexport default ChatBottomBar;","import React, { ReactNode } from \"react\";\nimport \"../styles.css\";\nimport ChatBottomBar from \"./ChatBottomBar\";\n\ninterface ChatWindowProps {\n  children?: ReactNode; // Allow ChatWindow to accept children\n  selectedChatId?: string; // Add this prop\n}\n\nfunction ChatWindow({ children, selectedChatId }: ChatWindowProps) {\n  return (\n    <div className=\"chatWindow\">\n      <div className=\"chatContent\">{children}</div> {/* Render children here */}\n      <ChatBottomBar selectedChatId={selectedChatId} />\n    </div>\n  );\n}\n\nexport default ChatWindow;\n","import React from \"react\";\n\ninterface MessageProps {\n  text: string;\n  timeStamp: number; // Expecting timeStamp as a number in milliseconds\n  from: string;\n  own: boolean;\n}\n\nconst Message: React.FC<MessageProps> = ({ text, timeStamp, from, own }) => {\n  return (\n    <div className=\"messageBox\">\n      <div className={`message ${own ? 'own' : ''}`}>\n        <p className=\"message-text\">{text}</p>\n        <p className=\"message-timestamp\">{new Date(timeStamp).toLocaleString()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { collection, query, orderBy, onSnapshot, Timestamp } from \"firebase/firestore\";\nimport Message from \"./Message\";\nimport { useAccount } from \"wagmi\";\nimport { useUser } from \"./UserContext\";\n\ninterface ChatMessage {\n  txt: string;\n  ts: Timestamp;\n  from: string;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\ninterface ChatContentProps {\n  selectedChatId: string;\n  users: User[];\n  getWalletById: (id: string) => string;\n}\n\nfunction ChatContent({ selectedChatId, users, getWalletById }: ChatContentProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const { address } = useAccount();\n  const { currentUser } = useUser();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to bottom function\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Scroll whenever messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!selectedChatId) return;\n\n    // Create a query with ordering\n    const messagesRef = collection(firestore, \"privateChats\", selectedChatId, \"msg\");\n    const messagesQuery = query(messagesRef, orderBy(\"ts\", \"asc\"));\n\n    // Set up real-time listener\n    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n      const fetchedMessages: ChatMessage[] = [];\n      snapshot.forEach((doc) => {\n        const messageData = doc.data() as ChatMessage;\n        if (messageData.txt && messageData.ts && messageData.from) {\n          fetchedMessages.push(messageData);\n        } else {\n          console.log(\"Missing fields in document:\", doc.id);\n        }\n      });\n      console.log(\"Real-time Messages Update:\", fetchedMessages);\n      setMessages(fetchedMessages);\n    }, (error) => {\n      console.error(\"Error fetching messages:\", error);\n    });\n\n    // Cleanup subscription on unmount or when selectedChatId changes\n    return () => unsubscribe();\n  }, [selectedChatId]);\n\n  return (\n    <div className=\"chatContent\">\n      {messages.map((message, index) => {\n        const isOwnMessage = currentUser?.id ? message.from === currentUser.id : false;\n        \n        return (\n          <Message\n            key={index}\n            text={message.txt}\n            timeStamp={message.ts.toMillis()}\n            from={message.from}\n            own={isOwnMessage}\n          />\n        );\n      })}\n      <div ref={messagesEndRef} /> {/* Invisible element to scroll to */}\n    </div>\n  );\n}\n\nexport default ChatContent;\n","import React, { useState, useEffect } from \"react\";\nimport { SlClose, SlPlus } from \"react-icons/sl\";\nimport { collection, getDocs, addDoc, doc, updateDoc, arrayUnion, query, where } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport EthProfilePic from \"./EthProfilePic\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n  chats?: string[];\n}\n\ninterface NewChatModalProps {\n  onClose: () => void;\n  onChatCreated?: (chatId: string) => void; // Optional callback when chat is created\n}\n\nconst NewChatModal: React.FC<NewChatModalProps> = ({ onClose, onChatCreated }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [creatingChat, setCreatingChat] = useState<string | null>(null); // Track which user we're creating chat with\n  const [error, setError] = useState<string | null>(null);\n  const { currentUser } = useUser();\n\n  // Fetch all users except the current user\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        setLoading(true);\n        const usersRef = collection(firestore, \"users\");\n        const usersSnapshot = await getDocs(usersRef);\n        \n        const allUsers = usersSnapshot.docs.map(doc => ({\n          id: doc.id,\n          name: doc.data().name,\n          wallet: doc.data().wallet,\n          chats: doc.data().chats || []\n        }));\n\n        // Filter out the current user\n        const filteredUsers = currentUser \n          ? allUsers.filter(user => user.id !== currentUser.id)\n          : allUsers;\n\n        setUsers(filteredUsers);\n      } catch (err) {\n        console.error(\"Error fetching users:\", err);\n        setError(\"Failed to load users. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, [currentUser]);\n\n  // Check if a chat already exists between current user and target user\n  const checkExistingChat = async (targetUserId: string): Promise<string | null> => {\n    if (!currentUser) return null;\n\n    try {\n      const privateChatsRef = collection(firestore, \"privateChats\");\n      const q = query(privateChatsRef);\n      const snapshot = await getDocs(q);\n\n      // Look for existing chat with both users\n      for (const doc of snapshot.docs) {\n        const chatData = doc.data();\n        const participants = chatData.pid || [];\n        \n        if (participants.includes(currentUser.id) && participants.includes(targetUserId)) {\n          return doc.id; // Return existing chat ID\n        }\n      }\n      \n      return null; // No existing chat found\n    } catch (err) {\n      console.error(\"Error checking existing chat:\", err);\n      return null;\n    }\n  };\n\n  // Create a new chat between current user and target user\n  const createChat = async (targetUser: User) => {\n    if (!currentUser) {\n      setError(\"You must be logged in to create a chat\");\n      return;\n    }\n\n    setCreatingChat(targetUser.id);\n    setError(null);\n\n    try {\n      // Check if chat already exists\n      const existingChatId = await checkExistingChat(targetUser.id);\n      if (existingChatId) {\n        console.log(\"Chat already exists:\", existingChatId);\n        if (onChatCreated) {\n          onChatCreated(existingChatId);\n        }\n        onClose();\n        return;\n      }\n\n      // Create new chat in privateChats collection\n      const privateChatsRef = collection(firestore, \"privateChats\");\n      const newChatDoc = await addDoc(privateChatsRef, {\n        pid: [currentUser.id, targetUser.id],\n        createdAt: new Date(),\n        lastActivity: new Date()\n      });\n\n      console.log(\"Created new chat with ID:\", newChatDoc.id);\n\n      // Update both users' chats arrays\n      const currentUserRef = doc(firestore, \"users\", currentUser.id);\n      const targetUserRef = doc(firestore, \"users\", targetUser.id);\n\n      await Promise.all([\n        updateDoc(currentUserRef, {\n          chats: arrayUnion(newChatDoc.id)\n        }),\n        updateDoc(targetUserRef, {\n          chats: arrayUnion(newChatDoc.id)\n        })\n      ]);\n\n      console.log(\"Updated users' chat lists\");\n\n      // Call callback if provided\n      if (onChatCreated) {\n        onChatCreated(newChatDoc.id);\n      }\n\n      // Close modal\n      onClose();\n\n    } catch (err) {\n      console.error(\"Error creating chat:\", err);\n      setError(\"Failed to create chat. Please try again.\");\n    } finally {\n      setCreatingChat(null);\n    }\n  };\n\n  return (\n    <div className=\"modalOverlay\">\n      <div className=\"modalContent\">\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>\n          <h2>Start New Chat</h2>\n          <button \n            className=\"closeButton\" \n            onClick={onClose}\n            style={{\n              background: 'transparent',\n              border: 'none',\n              color: '#fff',\n              cursor: 'pointer',\n              padding: '5px'\n            }}\n          >\n            <SlClose size={20} />\n          </button>\n        </div>\n\n        {error && (\n          <div style={{ \n            color: '#ff4444', \n            marginBottom: '15px', \n            padding: '10px', \n            background: 'rgba(255, 68, 68, 0.1)',\n            borderRadius: '8px'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {loading ? (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <p>Loading users...</p>\n          </div>\n        ) : users.length === 0 ? (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <p>No other users found.</p>\n          </div>\n        ) : (\n          <div style={{ \n            maxHeight: '400px', \n            overflowY: 'auto',\n            scrollbarWidth: 'thin',\n            scrollbarColor: 'rgba(255, 255, 255, 0.2) transparent',\n            paddingRight: '8px'\n          }}\n          className=\"modal-scroll-area\"\n          >\n            <p style={{ marginBottom: '15px', color: '#ccc' }}>\n              Select a user to start chatting:\n            </p>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n              {users.map((user) => (\n                <div\n                  key={user.id}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    padding: '12px',\n                    background: 'rgba(255, 255, 255, 0.05)',\n                    borderRadius: '8px',\n                    border: '1px solid rgba(255, 255, 255, 0.1)'\n                  }}\n                >\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n                    <EthProfilePic eth={user.wallet} />\n                    <div>\n                      <h4 style={{ margin: 0, fontSize: '16px' }}>{user.name}</h4>\n                      <p style={{ \n                        margin: 0, \n                        fontSize: '12px', \n                        color: '#ccc',\n                        fontFamily: 'monospace'\n                      }}>\n                        {user.wallet.slice(0, 6)}...{user.wallet.slice(-4)}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <button\n                    onClick={() => createChat(user)}\n                    disabled={creatingChat === user.id}\n                    style={{\n                      background: creatingChat === user.id ? '#666' : '#50b458',\n                      border: 'none',\n                      borderRadius: '50%',\n                      width: '40px',\n                      height: '40px',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      cursor: creatingChat === user.id ? 'not-allowed' : 'pointer',\n                      color: '#fff',\n                      transition: 'all 0.2s ease'\n                    }}\n                    onMouseEnter={(e) => {\n                      if (creatingChat !== user.id) {\n                        (e.target as HTMLButtonElement).style.background = '#5bc464';\n                        (e.target as HTMLButtonElement).style.transform = 'scale(1.05)';\n                      }\n                    }}\n                    onMouseLeave={(e) => {\n                      if (creatingChat !== user.id) {\n                        (e.target as HTMLButtonElement).style.background = '#50b458';\n                        (e.target as HTMLButtonElement).style.transform = 'scale(1)';\n                      }\n                    }}\n                  >\n                    {creatingChat === user.id ? (\n                      <div style={{ \n                        width: '16px', \n                        height: '16px', \n                        border: '2px solid #fff',\n                        borderTop: '2px solid transparent',\n                        borderRadius: '50%',\n                        animation: 'spin 1s linear infinite'\n                      }} />\n                    ) : (\n                      <SlPlus size={18} />\n                    )}\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        <style>{`\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar {\n            width: 6px;\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar-track {\n            background: transparent;\n          }\n          \n          .modal-scroll-area::-webkit-scrollbar-thumb {\n            background-color: rgba(255, 255, 255, 0.2);\n            border-radius: 3px;\n          }\n        `}</style>\n      </div>\n    </div>\n  );\n};\n\nexport default NewChatModal;","import React, { useState, useEffect } from \"react\";\nimport { useAccount } from \"wagmi\";\nimport \"../styles.css\";\nimport ChatSidebar from \"./ChatSidebar\";\nimport ChatSelector from \"./ChatSelector\";\nimport ChatWindow from \"./ChatWindow\";\nimport ChatContent from \"./ChatContent\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { firestore } from \"./Firebase\";\nimport { useUser } from \"./UserContext\";\nimport NewChatModal from \"./NewChatModal\";\nimport { LuMessageCirclePlus } from \"react-icons/lu\";\n\ninterface User {\n  id: string;\n  name: string;\n  wallet: string;\n}\n\nfunction Chat() {\n  const { address } = useAccount(); // Get the current user's wallet address\n  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const { setCurrentUser } = useUser(); // Get the setCurrentUser function from context\n  const [showNewChatModal, setShowNewChatModal] = useState(false);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const usersRef = collection(firestore, \"users\");\n      const usersSnapshot = await getDocs(usersRef);\n      const usersData = usersSnapshot.docs.map((doc) => ({\n        id: doc.id,\n        name: doc.data().name,\n        wallet: doc.data().wallet,\n      }));\n      setUsers(usersData);\n    };\n    fetchUsers();\n  }, []);\n\n  // Update currentUser in context whenever users or address changes\n  useEffect(() => {\n    if (users.length > 0 && address) {\n      const currentUser = users.find(user => user.wallet === address);\n      console.log(\"Current User:\", currentUser);\n      setCurrentUser(currentUser);\n    }\n  }, [users, address, setCurrentUser]);\n\n  // Handler for selecting a chat room\n  const handleChatSelect = (chatId: string) => {\n    setSelectedChatId(chatId);\n  };\n\n  // Handler for when a new chat is created\n  const handleChatCreated = (chatId: string) => {\n    console.log(\"New chat created with ID:\", chatId);\n    // Automatically select the newly created chat\n    setSelectedChatId(chatId);\n    // You might want to refresh the chat list here if needed\n    // For now, the ChatSelector should automatically pick up the new chat\n    // since it listens to Firestore changes\n  };\n\n  // Helper function to get wallet by user ID\n  const getWalletById = (id: string) => {\n    const user = users.find((user) => user.id === id);\n    return user ? user.wallet : \"\";\n  };\n\n  return (\n    <div className=\"chat\">\n      <ChatSidebar />\n      <ChatSelector\n        setSelectedChatId={handleChatSelect}\n        users={users}\n        getWalletById={getWalletById}\n      />\n      <ChatWindow selectedChatId={selectedChatId || undefined}>\n        {selectedChatId && (\n          <ChatContent\n            selectedChatId={selectedChatId}\n            users={users}\n            getWalletById={getWalletById}\n          />\n        )}\n      </ChatWindow>\n      <button \n        className=\"createChatButton\" \n        onClick={() => setShowNewChatModal(true)}\n        title=\"Start new chat\"\n      >\n        <LuMessageCirclePlus size={32} />\n      </button>\n      {showNewChatModal && (\n        <NewChatModal \n          onClose={() => setShowNewChatModal(false)} \n          onChatCreated={handleChatCreated}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chat;","import React, { useState } from 'react';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { useAccount } from 'wagmi';\nimport { SlLogin } from \"react-icons/sl\";\nimport { firestore } from './Firebase'; \nimport { useNavigate } from 'react-router-dom';\n\nfunction ProceedButton() {\n  const { address } = useAccount();\n  const [userExists, setUserExists] = useState<boolean | null>(null);\n  const navigate = useNavigate();\n\n  const checkUser = async (walletAddress: string) => {\n    const usersCollection = collection(firestore, 'users');\n    const q = query(usersCollection, where('wallet', '==', walletAddress));\n\n    try {\n      const querySnapshot = await getDocs(q);\n      const userFound = !querySnapshot.empty;\n      console.log(\"User found:\", userFound);\n      setUserExists(userFound);\n\n      if (userFound) {\n        navigate('/chat'); // Redirect to Chat page if user is found\n      } else {\n        navigate('/signup'); // Redirect to Signup page if user is not found\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      setUserExists(false);\n      navigate('/signup'); // Redirect to Signup page on error\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className=\"proceedButton\"\n        onClick={() => {\n          if (address) {\n            checkUser(address);\n          } else {\n            console.error(\"Address is undefined\");\n          }\n        }}\n      >\n        <SlLogin size={28} />\n        <span>Proceed</span>\n      </button>\n      {userExists !== null && (\n        <p>{userExists ? 'User exists' : 'User does not exist'}</p>\n      )}\n    </div>\n  );\n}\n\nexport default ProceedButton;\n","import React from 'react';\nimport { SlClose } from 'react-icons/sl';\nimport { useAccount, useDisconnect } from 'wagmi';\n\nfunction WalletMenu() {\n  const { address, isConnected } = useAccount();\n  const { disconnect } = useDisconnect();\n  \n  const handleDisconnect = async () => {\n    // Clean up localStorage\n    localStorage.removeItem('walletconnect');\n    localStorage.removeItem('walletConnected');\n    localStorage.removeItem('connectorId');\n    \n    // Wagmi disconnect\n    disconnect();\n  }\n  \n  return (\n    <div className=\"wallet-button\">\n      {isConnected && address ? (\n        <div className='walletBubble'>\n          <div className=\"address\">\n            {address.slice(0, 6)}...{address.slice(-4)}\n          </div>\n          <button onClick={handleDisconnect}><SlClose size={25} /></button>\n        </div>\n      ) : (\n        // Directly use the web3modal button\n        <w3m-connect-button />\n      )}\n    </div>\n  );\n}\n\nexport default WalletMenu;\n","import React, { useState, useEffect } from \"react\";\nimport ConnectButton from \"./ConnectButton\";\nimport \"../styles.css\";\nimport { useAccount, useConnect, useDisconnect } from \"wagmi\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProceedButton from \"./ProceedButton\";\nimport WalletMenu from \"./WalletMenu\";\n\n// Define type for custom web3modal elements\n// Using built-in Web3Modal types\n\nfunction HomePage() {\n  const { address, isConnected, connector } = useAccount();\n  const { connect, connectors } = useConnect();\n  const { disconnect } = useDisconnect();\n  const [connected, setConnected] = useState(isConnected);\n  const navigate = useNavigate();\n\n  // Try to automatically reconnect on page load\n  useEffect(() => {\n    const wasConnected = localStorage.getItem('walletConnected') === 'true';\n    if (wasConnected && !isConnected) {\n      console.log(\"Attempting to reconnect wallet automatically...\");\n      \n      // Find the right connector\n      const savedConnectorId = localStorage.getItem('connectorId');\n      console.log(\"Last used connector:\", savedConnectorId);\n      \n      if (savedConnectorId) {\n        const matchingConnector = connectors.find(c => c.id === savedConnectorId);\n        if (matchingConnector) {\n          console.log(\"Reconnecting with saved connector:\", savedConnectorId);\n          connect({ connector: matchingConnector });\n        }\n      } else {\n        // Fallback to injected\n        const injectedConnector = connectors.find(c => c.id === 'injected');\n        if (injectedConnector) {\n          console.log(\"No saved connector, trying injected...\");\n          connect({ connector: injectedConnector });\n        }\n      }\n    }\n  }, [connect, connectors, isConnected]);\n\n  // Listen for connection changes\n  useEffect(() => {\n    console.log(\"Connection state changed:\", isConnected ? \"connected\" : \"disconnected\");\n    console.log(\"Current connector:\", connector?.id);\n    setConnected(isConnected);\n    \n    // If connection is established and was previously not connected\n    if (isConnected && !connected) {\n      console.log(\"Wallet newly connected:\", address);\n    }\n    \n    // If disconnected and was previously connected\n    if (!isConnected && connected) {\n      console.log(\"Wallet disconnected\");\n    }\n  }, [isConnected, address, connected, connector]);\n\n  // Handle wallet connection events more robustly\n  useEffect(() => {\n    // This helps handle disconnection events - we check state on focus\n    const handleFocus = () => {\n      // Force check connection status when tab gets focus\n      if (connected && !isConnected) {\n        console.log(\"Connection lost while page was inactive, updating UI\");\n        setConnected(false);\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    \n    return () => {\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, [connected, isConnected]);\n\n  const handleDisconnect = () => {\n    try {\n      // First update our app state to show disconnected UI immediately\n      setConnected(false);\n      \n      // Clear localStorage on manual disconnect\n      localStorage.removeItem('walletConnected');\n      localStorage.removeItem('lastConnectedAddress');\n      localStorage.removeItem('connectorId');\n      \n      console.log(\"Manual disconnect triggered, state cleared\");\n      \n      // Then try to disconnect via wagmi\n      disconnect();\n    } catch (error) {\n      console.error(\"Error during disconnect:\", error);\n    }\n  };\n\n  return (\n    <div className=\"homepage\">\n      <div className=\"title\">\n        <h1>Chat 3.0 is here.</h1>\n        <h2>Your personal web3 companion.</h2>\n      </div>\n      <div>\n        <div className=\"login\">\n          <h3>\n            {connected \n              ? `Connected ${connector?.id ? `(${connector.id})` : \"\"}` \n              : \"Connect your wallet\"}\n          </h3>\n          <WalletMenu />\n          {connected && <ProceedButton />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage; ","import React, { useState, useEffect } from \"react\";\nimport { firestore } from \"./Firebase\";\nimport { \n  getFirestore, \n  getDocs, \n  collection, \n  addDoc, \n  query, \n  orderBy, \n  limit, \n  where,\n  onSnapshot,\n  Unsubscribe\n} from \"firebase/firestore\";\nimport { useAccount } from \"wagmi\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles.css\";\n\nfunction Signup() {\n  const { address } = useAccount();\n  const navigate = useNavigate();\n  const [name, setName] = useState(\"\");\n  const [data, setData] = useState<any>(null);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const [checkingUser, setCheckingUser] = useState(true);\n\n  // Check if user already exists when component mounts or address changes\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (!address) return;\n      \n      setCheckingUser(true);\n      try {\n        const usersCollection = collection(firestore, 'users');\n        const q = query(usersCollection, where('wallet', '==', address));\n        const querySnapshot = await getDocs(q);\n        \n        const exists = !querySnapshot.empty;\n        setUserExists(exists);\n        \n        // If user already exists, redirect to chat\n        if (exists) {\n          console.log(\"User already exists, redirecting to chat\");\n          navigate('/chat');\n        }\n      } catch (error) {\n        console.error(\"Error checking if user exists:\", error);\n      } finally {\n        setCheckingUser(false);\n      }\n    };\n\n    checkUserExists();\n  }, [address, navigate]);\n\n  const fetchData = async () => {\n    const usersCollection = collection(firestore, 'users');\n    const q = query(usersCollection, orderBy('name'), limit(10));\n    const querySnapshot = await getDocs(q);\n\n    const usersData = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    setData({ users: usersData });\n    console.log(\"Fetched data:\", usersData);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const writeData = async () => {\n    if (!address || !name.trim()) {\n      console.error(\"Missing required data: address or name\");\n      return;\n    }\n\n    if (userExists) {\n      console.log(\"User already exists, cannot register again\");\n      return;\n    }\n\n    setIsRegistering(true);\n    console.log(\"Writing data:\", address, name);\n\n    try {\n      // Double-check user doesn't exist before writing\n      const usersCollection = collection(firestore, 'users');\n      const existingUserQuery = query(usersCollection, where('wallet', '==', address));\n      const existingUserSnapshot = await getDocs(existingUserQuery);\n      \n      if (!existingUserSnapshot.empty) {\n        console.log(\"User already exists, cannot register\");\n        setUserExists(true);\n        setIsRegistering(false);\n        navigate('/chat');\n        return;\n      }\n\n      // Set up onSnapshot listener before adding the document\n      const unsubscribe: Unsubscribe = onSnapshot(\n        query(usersCollection, where('wallet', '==', address)),\n        (snapshot) => {\n          if (!snapshot.empty) {\n            // User has been successfully created\n            console.log(\"User successfully registered, redirecting to chat\");\n            unsubscribe(); // Clean up the listener\n            navigate('/chat');\n          }\n        },\n        (error) => {\n          console.error(\"Error in onSnapshot listener:\", error);\n          setIsRegistering(false);\n        }\n      );\n\n      // Add the new user document\n      await addDoc(usersCollection, {\n        wallet: address,\n        name: name.trim()\n      });\n      \n      console.log(\"Data written successfully\");\n      \n      // Set a timeout to clean up the listener if something goes wrong\n      setTimeout(() => {\n        unsubscribe();\n        if (isRegistering) {\n          setIsRegistering(false);\n          console.log(\"Registration timeout, stopped listening\");\n        }\n      }, 10000); // 10 second timeout\n\n    } catch (error) {\n      console.error(\"Error writing data:\", error);\n      setIsRegistering(false);\n    }\n  };\n\n  // Handle Enter key press in input field\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && !isRegistering && !userExists && name.trim()) {\n      writeData();\n    }\n  };\n\n  // Show loading state while checking if user exists\n  if (checkingUser) {\n    return (\n      <div className=\"centered-signup\">\n        <div className=\"welcomeText\">\n          <h1>Checking registration status...</h1>\n          <h2>Please wait</h2>\n        </div>\n      </div>\n    );\n  }\n\n  // Show message if user already exists\n  if (userExists) {\n    return (\n      <div className=\"centered-signup\">\n        <div className=\"welcomeText\">\n          <h1>Already Registered</h1>\n          <h2>You're already signed up! Redirecting to chat...</h2>\n        </div>\n        <p>Wallet Address: {address}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"centered-signup\">\n      <div className=\"welcomeText\">\n        <h1>Welcome to Chat 3.0</h1>\n        <h2>One last step to start chatting</h2>\n      </div>\n      <p>Wallet Address: {address}</p>\n      <div className=\"signupBox\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          onKeyPress={handleKeyPress}\n          disabled={isRegistering}\n          maxLength={50} // Add reasonable limit\n        />\n        <button \n          onClick={writeData}\n          disabled={isRegistering || !name.trim()}\n        >\n          {isRegistering ? \"Registering...\" : \"Register\"}\n        </button>\n      </div>\n      \n      {isRegistering && (\n        <p style={{ color: '#50b458', marginTop: '10px' }}>\n          Creating your account, please wait...\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default Signup;","import React, { ReactNode, useEffect } from 'react';\nimport { createWeb3Modal } from '@web3modal/wagmi/react';\nimport { useAccount } from 'wagmi';\nimport { mainnet, arbitrum } from 'viem/chains';\nimport { WagmiProvider, createConfig, http } from 'wagmi';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { walletConnect, injected, coinbaseWallet } from 'wagmi/connectors';\nimport { authConnector } from '@web3modal/wagmi';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Chat from \"./components/Chat\";\nimport HomePage from \"./components/HomePage\";\nimport { UserProvider } from \"./components/UserContext\";\nimport Signup from \"./components/Signup\";\n\nconst queryClient = new QueryClient();\nconst projectId = import.meta.env.VITE_WAGMI_PROJECTID;\n\nif (!projectId) throw new Error(\"Project ID is undefined\");\n\nconst metadata = {\n  name: \"TokenChat\",\n  description: \"Web3 Chat Application\",\n  url: \"https://c4ctus96.github.io/tokenchat\",\n  icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n};\n\nconst chains = [mainnet, arbitrum] as const;\n\n// Create the wagmi config first\nconst wagmiConfig = createConfig({\n  chains,\n  transports: {\n    [mainnet.id]: http('https://eth-mainnet.g.alchemy.com/v2/demo'),\n    [arbitrum.id]: http('https://arb-mainnet.g.alchemy.com/v2/demo'),\n  },\n  connectors: [\n    walletConnect({\n      projectId,\n      metadata,\n      showQrModal: false\n    }),\n    injected({ shimDisconnect: true }),\n    coinbaseWallet({\n      appName: metadata.name,\n      appLogoUrl: metadata.icons[0],\n    }),\n    authConnector({\n      options: { projectId },\n      socials: ['google', 'x', 'github', 'discord', 'apple'],\n      showWallets: true,\n      email: true,\n      walletFeatures: false,\n    }),\n  ],\n});\n\n// Initialize Web3Modal with the wagmi config\ncreateWeb3Modal({\n  wagmiConfig,\n  projectId,\n  defaultChain: mainnet,\n  themeMode: 'dark',\n  enableAnalytics: true,\n  enableOnramp: false,\n  themeVariables: {\n    '--w3m-accent': '#50b458',\n    '--w3m-color-mix': '#210059',\n    '--w3m-color-mix-strength': 30\n    // Do not add --w3m-background\n  }\n});\n\nfunction PrivateRoute({ children }: { children: ReactNode }) {\n  const { isConnected } = useAccount();\n  return isConnected ? <>{children}</> : <Navigate to=\"/\" />;\n}\n\n// Component to handle initial connection check\nfunction ConnectionManager() {\n  const { isConnected } = useAccount();\n  \n  useEffect(() => {\n    console.log(\"App initialized, connection status:\", isConnected);\n    // Add error handling for MetaMask detection\n    if (typeof window.ethereum === 'undefined') {\n      console.log(\"MetaMask not detected, but WalletConnect can still be used\");\n    }\n  }, [isConnected]);\n  \n  return null;\n}\n\n// Main App component\nfunction App() {\n  return (\n    <WagmiProvider config={wagmiConfig}>\n      <QueryClientProvider client={queryClient}>\n        <UserProvider>\n          <Router basename=\"/tokenchat\">\n            <ConnectionManager />\n            <Routes>\n              <Route path=\"/\" element={<HomePage />} />\n              <Route\n                path=\"/chat\"\n                element={\n                  <PrivateRoute>\n                    <Chat />\n                  </PrivateRoute>\n                }\n              />\n              <Route path=\"/signup\" element={ <Signup /> } />\n            </Routes>\n          </Router>\n        </UserProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n\n// Export the App component as default\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root') as HTMLElement;\nconst root = createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"names":["EthProfilePic","eth","jsx","ChatSidebar","address","useAccount","firebaseConfig","app","initializeApp","getAnalytics","firestore","getFirestore","ChatSelector","setSelectedChatId","users","getWalletById","chatrooms","setChatrooms","useState","error","setError","useEffect","privateChatsRef","collection","unsubscribe","onSnapshot","snapshot","privateChatsData","doc","data","err","currentUser","user","filteredChatrooms","chat","getUserNameById","id","getOtherParticipantId","pid","getOtherParticipantName","otherParticipantId","handleChatClick","jsxs","chatroom","UserContext","createContext","UserProvider","children","setCurrentUser","useUser","context","useContext","SendMessage","txt","from","chatId","chatMessagesCollectionRef","addDoc","ChatBottomBar","selectedChatId","inputValue","setInputValue","React","handleChange","e","handleSend","handleKeyDown","IoSend","ChatWindow","Message","text","timeStamp","own","ChatContent","messages","setMessages","messagesEndRef","useRef","scrollToBottom","_a","messagesRef","messagesQuery","query","orderBy","fetchedMessages","messageData","message","index","isOwnMessage","NewChatModal","onClose","onChatCreated","setUsers","loading","setLoading","creatingChat","setCreatingChat","usersRef","allUsers","getDocs","filteredUsers","checkExistingChat","targetUserId","q","participants","createChat","targetUser","existingChatId","newChatDoc","currentUserRef","targetUserRef","updateDoc","arrayUnion","SlClose","SlPlus","Chat","showNewChatModal","setShowNewChatModal","usersData","handleChatSelect","handleChatCreated","LuMessageCirclePlus","ProceedButton","userExists","setUserExists","navigate","useNavigate","checkUser","walletAddress","usersCollection","where","userFound","SlLogin","WalletMenu","isConnected","disconnect","useDisconnect","handleDisconnect","HomePage","connector","connect","connectors","useConnect","connected","setConnected","savedConnectorId","matchingConnector","c","injectedConnector","handleFocus","Signup","name","setName","setData","isRegistering","setIsRegistering","checkingUser","setCheckingUser","exists","fetchData","limit","writeData","existingUserQuery","handleKeyPress","queryClient","QueryClient","projectId","metadata","chains","mainnet","arbitrum","wagmiConfig","createConfig","http","walletConnect","injected","coinbaseWallet","authConnector","createWeb3Modal","PrivateRoute","Fragment","Navigate","ConnectionManager","App","WagmiProvider","QueryClientProvider","Router","Routes","Route","rootElement","root","createRoot"],"mappings":"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"}